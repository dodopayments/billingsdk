{
	"$schema": "https://ui.shadcn.com/schema/registry-item.json",
	"name": "alerts",
	"type": "registry:block",
	"title": "Alerts",
	"description": "A component for displaying important notifications and warnings to users",
	"dependencies": ["lucide-react"],
	"registryDependencies": ["button", "utils"],
	"files": [
		{
			"path": "src/registry/billingsdk/alerts.tsx",
			"content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { AlertCircle, CheckCircle, Info, X } from 'lucide-react';\nimport { useState } from 'react';\n\ninterface AlertProps {\n\tvariant?: 'default' | 'destructive';\n\ttitle: string;\n\tdescription?: string;\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n}\n\nfunction Alert({\n\tvariant = 'default',\n\ttitle,\n\tdescription,\n\tclassName,\n\tchildren,\n}: AlertProps) {\n\tconst isDestructive = variant === 'destructive';\n\n\treturn (\n\t\t<div\n\t\t\tclassName={cn(\n\t\t\t\t'relative w-full rounded-lg border p-4',\n\t\t\t\tvariant === 'destructive'\n\t\t\t\t\t? 'bg-destructive/80 text-destructive-foreground border-destructive/50'\n\t\t\t\t\t: 'bg-background text-foreground border',\n\t\t\t\tclassName\n\t\t\t)}\n\t\t\trole={isDestructive ? 'alert' : 'status'}\n\t\t\taria-live={isDestructive ? 'assertive' : 'polite'}\n\t\t>\n\t\t\t<div className=\"flex items-start\">\n\t\t\t\t<div className=\"flex-1\">\n\t\t\t\t\t<div className=\"font-medium\">{title}</div>\n\t\t\t\t\t{description && (\n\t\t\t\t\t\t<div className=\"text-sm opacity-90 mt-1\">{description}</div>\n\t\t\t\t\t)}\n\t\t\t\t\t{children}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport interface AlertItem {\n\tid: string;\n\ttype: 'warning' | 'info' | 'success' | 'error';\n\ttitle: string;\n\tmessage: string;\n\tactionText?: string;\n\tonAction?: () => void;\n\tdismissible?: boolean;\n}\n\nexport interface AlertsBannerProps {\n\tclassName?: string;\n\talerts: AlertItem[];\n\tonDismiss?: (id: string) => void;\n}\n\nexport function Alerts({ className, alerts, onDismiss }: AlertsBannerProps) {\n\tconst [dismissedAlerts, setDismissedAlerts] = useState<string[]>([]);\n\n\tconst handleDismiss = (id: string) => {\n\t\tsetDismissedAlerts((prev) => [...prev, id]);\n\t\tonDismiss?.(id);\n\t};\n\n\tconst getAlertIcon = (type: AlertItem['type']) => {\n\t\tswitch (type) {\n\t\t\tcase 'warning':\n\t\t\t\treturn <AlertCircle className=\"h-4 w-4\" />;\n\t\t\tcase 'success':\n\t\t\t\treturn <CheckCircle className=\"h-4 w-4\" />;\n\t\t\tcase 'info':\n\t\t\t\treturn <Info className=\"h-4 w-4\" />;\n\t\t\tcase 'error':\n\t\t\t\treturn <AlertCircle className=\"h-4 w-4\" />;\n\t\t\tdefault:\n\t\t\t\treturn <Info className=\"h-4 w-4\" />;\n\t\t}\n\t};\n\n\tconst getAlertVariant = (type: AlertItem['type']) => {\n\t\tswitch (type) {\n\t\t\tcase 'warning':\n\t\t\t\treturn 'destructive';\n\t\t\tcase 'success':\n\t\t\t\treturn 'default';\n\t\t\tcase 'info':\n\t\t\t\treturn 'default';\n\t\t\tcase 'error':\n\t\t\t\treturn 'destructive';\n\t\t\tdefault:\n\t\t\t\treturn 'default';\n\t\t}\n\t};\n\n\tconst visibleAlerts = alerts.filter(\n\t\t(alert) => !dismissedAlerts.includes(alert.id)\n\t);\n\n\tif (visibleAlerts.length === 0) return null;\n\n\treturn (\n\t\t<div className={cn('space-y-3', className)}>\n\t\t\t{visibleAlerts.map((alert) => (\n\t\t\t\t<Alert\n\t\t\t\t\tkey={alert.id}\n\t\t\t\t\tvariant={getAlertVariant(alert.type)}\n\t\t\t\t\ttitle={alert.title}\n\t\t\t\t\tdescription={alert.message}\n\t\t\t\t\tclassName=\"relative\"\n\t\t\t\t>\n\t\t\t\t\t<div className=\"flex items-start\">\n\t\t\t\t\t\t<div className=\"flex-shrink-0 mt-0.5\">\n\t\t\t\t\t\t\t{getAlertIcon(alert.type)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"ml-3 flex-1\">\n\t\t\t\t\t\t\t{alert.actionText && alert.onAction && (\n\t\t\t\t\t\t\t\t<div className=\"mt-3\">\n\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\tvariant={\n\t\t\t\t\t\t\t\t\t\t\talert.type === 'warning' || alert.type === 'error'\n\t\t\t\t\t\t\t\t\t\t\t\t? 'default'\n\t\t\t\t\t\t\t\t\t\t\t\t: 'outline'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\t\t\tonClick={alert.onAction}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{alert.actionText}\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{alert.dismissible !== false && (\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tvariant=\"ghost\"\n\t\t\t\t\t\t\t\tsize=\"sm\"\n\t\t\t\t\t\t\t\tclassName=\"absolute right-2 top-2 h-6 w-6 p-0\"\n\t\t\t\t\t\t\t\tonClick={() => handleDismiss(alert.id)}\n\t\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\t\taria-label={`Dismiss ${alert.title} alert`}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<X className=\"h-4 w-4\" />\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</Alert>\n\t\t\t))}\n\t\t</div>\n\t);\n}",
			"type": "registry:component",
			"target": "components/billingsdk/alerts.tsx"
		},
		{
			"path": "src/registry/billingsdk/demo/alerts-demo.tsx",
			"content": "'use client';\n\nimport { Alerts } from '@/registry/billingsdk/alerts';\n\nexport function AlertsDemo() {\n\treturn (\n\t\t<Alerts\n\t\t\talerts={[\n\t\t\t\t{\n\t\t\t\t\tid: '1',\n\t\t\t\t\ttype: 'warning',\n\t\t\t\t\ttitle: 'High Usage Alert',\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t\"You've used 90% of your API quota. Upgrade to avoid service interruption.\",\n\t\t\t\t\tactionText: 'Upgrade Plan',\n\t\t\t\t\tonAction: () => console.log('Upgrade clicked'),\n\t\t\t\t\tdismissible: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: '2',\n\t\t\t\t\ttype: 'info',\n\t\t\t\t\ttitle: 'New Feature Available',\n\t\t\t\t\tmessage: 'Check out our new analytics dashboard for better insights.',\n\t\t\t\t\tactionText: 'View Dashboard',\n\t\t\t\t\tonAction: () => console.log('View dashboard clicked'),\n\t\t\t\t\tdismissible: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: '3',\n\t\t\t\t\ttype: 'success',\n\t\t\t\t\ttitle: 'Payment Successful',\n\t\t\t\t\tmessage: 'Your payment of $29.00 has been processed successfully.',\n\t\t\t\t\tdismissible: true,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: '4',\n\t\t\t\t\ttype: 'error',\n\t\t\t\t\ttitle: 'Payment Failed',\n\t\t\t\t\tmessage:\n\t\t\t\t\t\t'Your payment method was declined. Please update your payment information.',\n\t\t\t\t\tactionText: 'Update Payment Method',\n\t\t\t\t\tonAction: () => console.log('Update payment clicked'),\n\t\t\t\t\tdismissible: true,\n\t\t\t\t},\n\t\t\t]}\n\t\t\tonDismiss={(id) => console.log('Dismissed alert', id)}\n\t\t/>\n\t);\n}",
			"type": "registry:component",
			"target": "components/alerts-demo.tsx"
		}
	]
}
