{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details-two",
  "type": "registry:block",
  "title": "Payment Details Two",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection built using React Hook Form and custom validation",
  "dependencies": [
    "lucide-react",
    "react-hook-form",
    "motion",
    "country-state-city"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "textarea",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details-two.tsx",
      "content": "\"use client\"\n\nimport { useForm } from \"react-hook-form\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\nimport { detectCardType, formatCardNumber, formatExpiryDate, validateLuhn } from \"@/utils/card-validation\"\nimport { Check, CreditCard, Shield, ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { useState, useEffect } from \"react\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { motion, AnimatePresence } from 'motion/react'\nimport { Country, State, City } from 'country-state-city'\n\n\nexport interface PaymentFormData {\n  nameOnCard?: string\n  cardNumber?: string\n  validTill?: string\n  cvv?: string\n  firstName?: string\n  middleLastName?: string\n  country?: string\n  state?: string\n  city?: string\n  billingAddress?: string\n  pinCode?: string\n  contactNumber?: string\n  general?: string\n}\n\nconst CardLogo = ({ type }: { type: string }) => {\n  switch (type) {\n    case \"visa\":\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-blue-600 rounded text-white text-xs font-bold\">VISA</div>\n    case \"mastercard\":\n      return <div className=\"flex items-center\"><div className=\"w-5 h-5 bg-red-500 rounded-full\"></div><div className=\"w-5 h-5 bg-orange-400 rounded-full -ml-2\"></div></div>\n    case \"amex\":\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-blue-500 rounded text-white text-xs font-bold\">AMEX</div>\n    case \"rupay\":\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-green-600 rounded text-white text-xs font-bold\">RuPay</div>\n    case \"discover\":\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-orange-600 rounded text-white text-xs font-bold\">DISC</div>\n    default:\n      return <CreditCard className=\"w-5 h-5 text-muted-foreground\" />\n  }\n}\n\nexport function PaymentDetailsTwo({\n  className,\n  onSubmit,\n  onDiscard,\n  countries,\n  states,\n  cities,\n}: {\n  className?: string\n  onSubmit?: (data: PaymentFormData) => void\n  onDiscard?: () => void,\n  countries?: { name: string; isoCode: string }[]\n  states?: { name: string; isoCode: string }[],\n  cities?: { name: string }[],\n}) {\n  const [step, setStep] = useState(1)\n  const [cardType, setCardType] = useState(\"\")\n  const [isSaved, setIsSaved] = useState(false)\n  const [defaultCountries, setDefaultCountries] = useState<{ name: string; isoCode: string }[]>([])\n  const [defaultStates, setDefaultStates] = useState<{ name: string; isoCode: string }[]>([])\n  const [defaultCities, setDefaultCities] = useState<{ name: string }[]>([])\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\")\n  const [selectedState, setSelectedState] = useState<string>(\"\")\n\n  const { register, handleSubmit, setValue, reset, formState: { errors, isSubmitting } } = useForm<PaymentFormData>({\n    defaultValues: {\n      nameOnCard: \"\",\n      cardNumber: \"\",\n      validTill: \"\",\n      cvv: \"\",\n      firstName: \"\",\n      middleLastName: \"\",\n      country: \"\",\n      state: \"\",\n      city: \"\",\n      billingAddress: \"\",\n      pinCode: \"\",\n      contactNumber: \"\",\n    },\n  })\n\n  useEffect(() => {\n    // fetch all countries\n    if (countries && countries?.length > 0) {\n      setDefaultCountries(countries)\n    } else {\n      const countryData = Country.getAllCountries()\n      setDefaultCountries(countryData)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (states && states.length > 0) {\n      setDefaultStates(states)\n    }\n    else {\n      const stateData = State.getStatesOfCountry(selectedCountry)\n      setDefaultStates(stateData)\n    }\n  }, [selectedCountry])\n\n\n  useEffect(() => {\n\n    if (cities && cities.length > 0) {\n      setDefaultCities(cities)\n    }\n    else {\n      const cityData = City.getCitiesOfState(selectedCountry, selectedState)\n      setDefaultCities(cityData)\n    }\n\n  }, [selectedCountry, selectedState])\n\n\n  const handleFormSubmit = async (data: PaymentFormData) => {\n    if (!onSubmit) return;\n    try {\n      await onSubmit(data);\n      setIsSaved(true);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleDiscardClick = () => {\n    if (onDiscard) {\n      onDiscard();\n    } else {\n      reset();\n      setIsSaved(false);\n    }\n  };\n\n  const formatAndSetCard = (val: string) => {\n    const raw = val.replace(/\\s+/g, \"\")\n    const formatted = formatCardNumber(raw)\n    setValue(\"cardNumber\", formatted)\n    setCardType(detectCardType(formatted))\n  }\n\n  const handleNext = () => {\n    setStep(2)\n  }\n\n  const handleBack = () => {\n    setStep(1)\n  }\n\n  return (\n    <Card className={cn(\"w-full max-w-2xl mx-auto pb-0\", className)}>\n      <CardHeader className=\"space-y-4\">\n        <div>\n          <CardTitle>Payment Details</CardTitle>\n          <CardDescription className=\"mt-1.5\">\n            {step === 1 ? \"Enter your card information\" : \"Enter your billing address\"}\n          </CardDescription>\n        </div>\n\n        {/* Progress Indicator */}\n        <div className=\"flex items-center gap-2\">\n          <div className=\"flex items-center gap-2 flex-1\">\n            <div className={cn(\n              \"flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium transition-colors\",\n              step === 1 ? \"bg-primary text-primary-foreground\" : \"bg-primary/20 text-primary\"\n            )}>\n              1\n            </div>\n            <div className=\"flex-1 h-1 rounded-full bg-border\">\n              <div className={cn(\n                \"h-full rounded-full bg-primary transition-all duration-300\",\n                step === 2 ? \"w-full\" : \"w-0\"\n              )} />\n            </div>\n          </div>\n          <div className={cn(\n            \"flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium transition-colors\",\n            step === 2 ? \"bg-primary text-primary-foreground\" : \"bg-muted text-muted-foreground\"\n          )}>\n            2\n          </div>\n        </div>\n      </CardHeader>\n\n      <form onSubmit={handleSubmit(handleFormSubmit)}>\n        <CardContent className=\"min-h-[420px] py-6\">\n          <AnimatePresence mode=\"wait\">\n            {step === 1 ? (\n              <motion.div\n                key=\"step1\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n                className=\"space-y-5\"\n              >\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"nameOnCard\">Name on card</Label>\n                  <Input\n                    id=\"nameOnCard\"\n                    placeholder=\"John Doe\"\n                    {...register(\"nameOnCard\", { required: \"Name is required\" })}\n                  />\n                  {errors.nameOnCard && <p className=\"text-sm text-destructive\">{errors.nameOnCard.message}</p>}\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"cardNumber\">Card number</Label>\n                  <div className=\"relative\">\n                    <div className=\"absolute left-3 top-1/2 -translate-y-1/2 z-10\"><CardLogo type={cardType} /></div>\n                    <Input\n                      id=\"cardNumber\"\n                      className=\"pl-14 font-mono tracking-wide\"\n                      placeholder=\"1234 5678 9012 3456\"\n                      maxLength={20}\n                      inputMode=\"numeric\"\n                      pattern=\"[0-9 ]*\"\n                      {...register(\"cardNumber\", {\n                        required: \"Card number is required\",\n                        validate: (val) => val ? validateLuhn(val) : \"Invalid card number\"\n                      })}\n                      onChange={(e) => formatAndSetCard(e.target.value)}\n                    />\n                  </div>\n                  {errors.cardNumber && <p className=\"text-sm text-destructive\">{errors.cardNumber.message}</p>}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"validTill\">Expiry date</Label>\n                    <Input\n                      id=\"validTill\"\n                      className=\"font-mono\"\n                      placeholder=\"MM/YY\"\n                      maxLength={5}\n                      {...register(\"validTill\", {\n                        required: \"Valid expiry date is required (MM/YY)\",\n                        validate: (val?: string) => {\n                          if (!val) return \"Valid expiry date is required (MM/YY)\";\n                          if (!/^\\d{2}\\/\\d{2}$/.test(val)) return \"Invalid format (MM/YY)\";\n                          const [mm, yy] = val.split(\"/\").map(Number);\n                          if (mm < 1 || mm > 12) return \"Invalid month\";\n                          const now = new Date();\n                          const expiry = new Date(2000 + yy, mm - 1, 1);\n                          if (expiry < now) return \"Card expired\";\n                          return true;\n                        },\n                      })}\n                      onChange={(e) => setValue(\"validTill\", formatExpiryDate(e.target.value))}\n                    />\n                    {errors.validTill && <p className=\"text-sm text-destructive\">{errors.validTill.message}</p>}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"cvv\">CVV</Label>\n                    <div className=\"relative\">\n                      <Shield className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground z-10\" />\n                      <Input\n                        id=\"cvv\"\n                        type=\"password\"\n                        className=\"pl-10 font-mono\"\n                        placeholder=\"123\"\n                        maxLength={4}\n                        inputMode=\"numeric\"\n                        pattern=\"[0-9 ]*\"\n                        {...register(\"cvv\", {\n                          required: \"Valid CVV is required\",\n                          validate: (val) =>\n                            (cardType === \"amex\" ? val?.length === 4 : val?.length === 3) ||\n                            \"Invalid CVV length\",\n                        })}\n                      />\n                    </div>\n                    {errors.cvv && <p className=\"text-sm text-destructive\">{errors.cvv.message}</p>}\n                  </div>\n                </div>\n              </motion.div>\n            ) : (\n              <motion.div\n                key=\"step2\"\n                initial={{ opacity: 0, x: 20 }}\n                animate={{ opacity: 1, x: 0 }}\n                exit={{ opacity: 0, x: -20 }}\n                transition={{ duration: 0.3 }}\n                className=\"space-y-5\"\n              >\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"firstName\">First name</Label>\n                    <Input\n                      id=\"firstName\"\n                      placeholder=\"John\"\n                      {...register(\"firstName\", { required: \"Required\" })}\n                    />\n                    {errors.firstName && <p className=\"text-sm text-destructive\">{errors.firstName.message}</p>}\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"middleLastName\">Last name</Label>\n                    <Input\n                      id=\"middleLastName\"\n                      placeholder=\"Doe\"\n                      {...register(\"middleLastName\", { required: \"Required\" })}\n                    />\n                    {errors.middleLastName && <p className=\"text-sm text-destructive\">{errors.middleLastName.message}</p>}\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Select onValueChange={(val) => {\n                      setValue(\"country\", val)\n                      setSelectedCountry(val)\n                    }}>\n                      <SelectTrigger id=\"country\">\n                        <SelectValue placeholder=\"Select country\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {defaultCountries.map((c) => <SelectItem key={c.isoCode} value={c.isoCode}>{c.name}</SelectItem>)}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"state\">State</Label>\n                    <Select onValueChange={(val) => {\n                      setValue(\"state\", val)\n                      setSelectedState(val)\n                    }}>\n                      <SelectTrigger id=\"state\">\n                        <SelectValue placeholder=\"Select state\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {defaultStates.length > 0 ? defaultStates.map((s) => <SelectItem key={s.isoCode} value={s.isoCode}>{s.name} </SelectItem>) : <SelectItem disabled value=\"No state found\">No state found</SelectItem>}\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"city\">City</Label>\n                    <Select onValueChange={(val) => setValue(\"city\", val)}>\n                      <SelectTrigger id=\"city\">\n                        <SelectValue placeholder=\"Select city\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {defaultCities.length > 0 ? defaultCities.map((c) => <SelectItem key={c.name} value={c.name}>{c.name}</SelectItem>) : <SelectItem disabled value=\"No city found\">No city found</SelectItem>}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"billingAddress\">Billing Address</Label>\n                  <Textarea\n                    id=\"billingAddress\"\n                    placeholder=\"Enter Billing Address\"\n                    {...register(\"billingAddress\", { required: \"Required\" })}\n                  />\n                  {errors.billingAddress && <p className=\"text-sm text-destructive\">{errors.billingAddress.message}</p>}\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"pinCode\">Pincode</Label>\n                    <Input\n                      id=\"pinCode\"\n                      placeholder=\"110024\"\n                      {...register(\"pinCode\", {\n                        required: \"Required\",\n                        pattern: { value: /^[0-9]{6}$/, message: \"Invalid pincode\" },\n                      })}\n                    />\n                    {errors.pinCode && <p className=\"text-sm text-destructive\">{errors.pinCode.message}</p>}\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"contactNumber\">Mobile</Label>\n                    <Input\n                      id=\"contactNumber\"\n                      placeholder=\"9991023558\"\n                      {...register(\"contactNumber\", {\n                        required: \"Required\",\n                        pattern: { value: /^[0-9]{10}$/, message: \"Invalid number\" },\n                      })}\n                    />\n                    {errors.contactNumber && <p className=\"text-sm text-destructive\">{errors.contactNumber.message}</p>}\n                  </div>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </CardContent>\n\n        <CardFooter className=\"flex justify-between border-t bg-muted/30 py-6\">\n          {step === 1 ? (\n            <>\n              <Button type=\"button\" variant=\"ghost\" onClick={handleDiscardClick}>\n                Cancel\n              </Button>\n              <Button type=\"button\" onClick={handleNext} className=\"min-w-[100px]\">\n                Next\n                <ChevronRight className=\"ml-2 h-4 w-4\" />\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button type=\"button\" variant=\"ghost\" onClick={handleBack}>\n                <ChevronLeft className=\"mr-2 h-4 w-4\" />\n                Back\n              </Button>\n              <Button type=\"submit\" disabled={isSubmitting || isSaved} className=\"min-w-[120px]\">\n                <AnimatePresence mode=\"wait\" initial={false}>\n                  {isSubmitting ? (\n                    <motion.div key=\"saving\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className=\"flex items-center gap-2\">\n                      <div className=\"w-4 h-4 border-2 border-background border-t-transparent rounded-full animate-spin\" />\n                      <span>Saving...</span>\n                    </motion.div>\n                  ) : isSaved ? (\n                    <motion.div key=\"saved\" initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }} className=\"flex items-center gap-2\">\n                      <Check className=\"w-4 h-4\" />\n                      <span>Saved</span>\n                    </motion.div>\n                  ) : (\n                    <motion.span key=\"default\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>\n                      Save Changes\n                    </motion.span>\n                  )}\n                </AnimatePresence>\n              </Button>\n            </>\n          )}\n        </CardFooter>\n      </form>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-details-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-two-demo.tsx",
      "content": "\"use client\"\n\nimport { PaymentDetailsTwo, type PaymentFormData } from \"@/components/billingsdk/payment-details-two\";\n\n\nexport function PaymentDetailsTwoDemo() {\n\n  //Function that handles onSubmit in the Form\n  const handleSubmit = async (_data: PaymentFormData) => {\n    // _data contains all the form values entered by the user:\n    // e.g., _data.cardNumber, _data.nameOnCard, _data.validTill, _data.cvv, _data.firstName, etc.\n    // You can use this object to make an API call to your backend, for example:\n    // await fetch('/api/payment', { method: 'POST', body: JSON.stringify(_data) })\n\n    return await new Promise((resolve) => {\n      setTimeout(() => {\n        console.log(\"Handle Submit Function\")\n        resolve('The promise is resolved')\n      }, 3000)\n    })\n  }\n\n\n  //Function that handles onCancel in the Form\n  const handleDiscard = () => {\n    console.log(\"The Discard Function\")\n  }\n\n  return (\n    <PaymentDetailsTwo\n      onSubmit={handleSubmit}\n      onDiscard={handleDiscard}\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/payment-details-two-demo.tsx"
    },
    {
      "path": "src/utils/card-validation.ts",
      "content": "\n// Detect card type\nexport const detectCardType = (\n  cardNumber: string\n): \"visa\" | \"mastercard\" | \"amex\" | \"rupay\" | \"diners\" | \"discover\" | \"unknown\" => {\n  const number = cardNumber.replace(/\\s/g, \"\")\n\n  if (/^4/.test(number)) return \"visa\"\n  if (/^3[47]/.test(number)) return \"amex\"\n  if (/^3(?:0[0-5]|09|095|6|8)/.test(number)) return \"diners\"\n  if (/^5[1-5]/.test(number) || /^222[1-9]/.test(number) || /^22[3-9]\\d/.test(number) || /^2[3-6]\\d{2}/.test(number) || /^27[0-1]\\d/.test(number) || /^2720/.test(number)) return \"mastercard\"\n  if (/^6011/.test(number) || /^65/.test(number) || /^64[4-9]/.test(number) || /^622(?:12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9[0-1]\\d|92[0-5])/.test(number)) return \"discover\"\n  if (/^60/.test(number) || /^81/.test(number) || /^82/.test(number) || /^508/.test(number)) return \"rupay\"\n\n  return \"unknown\"\n}\n\n// Luhn algorithm\nexport const validateLuhn = (cardNumber: string): true | string => {\n  const number = cardNumber.replace(/\\s/g, \"\")\n  if (!number || !/^\\d+$/.test(number)) return \"Invalid card number\"\n\n  let sum = 0\n  let shouldDouble = false\n\n  for (let i = number.length - 1; i >= 0; i--) {\n    let digit = parseInt(number.charAt(i))\n    if (shouldDouble) {\n      digit *= 2\n      if (digit > 9) digit -= 9\n    }\n    sum += digit\n    shouldDouble = !shouldDouble\n  }\n\n  return sum % 10 === 0 ? true : \"Invalid card number\"\n}\n\n\n\n/**\n * Formats a card number by adding spaces every 4 digits\n * @param value - The raw card number input\n * @returns The formatted card number with spaces\n */\nexport const formatCardNumber = (value: string): string => {\n  const number = value.replace(/\\s/g, \"\").replace(/[^0-9]/gi, \"\")\n  const matches = number.match(/\\d{4,16}/g)\n  const match = (matches && matches[0]) || \"\"\n  const parts = []\n\n  for (let i = 0, len = match.length; i < len; i += 4) {\n    parts.push(match.substring(i, i + 4))\n  }\n\n  if (parts.length) {\n    return parts.join(\" \")\n  } else {\n    return number\n  }\n}\n\n\n/**\n * Formats an expiry date of the card\n * @param value - The raw card expiry input\n * @returns The formatted expiry date with / in between\n */\nexport const formatExpiryDate = (value ?: string): string => {\n  if (!value) return \"\"\n  const number = value.replace(/\\D/g, \"\")\n  if (number.length >= 2) {\n    return number.substring(0, 2) + \"/\" + number.substring(2, 4)\n  }\n  return number\n}\n\n",
      "type": "registry:component",
      "target": "utils/card-validation.ts"
    }
  ]
}