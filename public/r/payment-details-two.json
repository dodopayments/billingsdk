{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details-two",
  "type": "registry:block",
  "title": "Payment Details Two",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection built using React Hook Form with custom validation",
  "dependencies": [
    "lucide-react",
    "react-hook-form",
    "motion",
    "country-state-city"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "textarea",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details-two.tsx",
      "content": "\"use client\"\r\n\r\nimport { useForm } from \"react-hook-form\"\r\nimport { Input } from \"@\/components\/ui\/input\"\r\nimport { Label } from \"@\/components\/ui\/label\"\r\nimport { Textarea } from \"@\/components\/ui\/textarea\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@\/components\/ui\/select\"\r\nimport { detectCardType, formatCardNumber, formatExpiryDate, validateLuhn } from \"@\/utils\/card-validation\"\r\nimport { Check, CreditCard, Shield } from \"lucide-react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { cn } from \"@\/lib\/utils\"\r\nimport { Button } from \"@\/components\/ui\/button\"\r\nimport { motion, AnimatePresence } from 'motion\/react'\r\nimport {Country, State, City} from 'country-state-city'\r\n\r\n\r\nexport interface PaymentFormData {\r\n  nameOnCard?: string\r\n  cardNumber?: string\r\n  validTill?: string\r\n  cvv?: string\r\n  firstName?: string\r\n  middleLastName?: string\r\n  country?: string\r\n  state?: string\r\n  city?: string\r\n  billingAddress?: string\r\n  pinCode?: string\r\n  contactNumber?: string\r\n  general?: string\r\n}\r\n\r\nconst CardLogo = ({ type }: { type: string }) => {\r\n  switch (type) {\r\n    case \"visa\":\r\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-blue-600 rounded text-white text-xs font-bold\">VISA<\/div>\r\n    case \"mastercard\":\r\n      return <div className=\"flex items-center\"><div className=\"w-5 h-5 bg-red-500 rounded-full\"><\/div><div className=\"w-5 h-5 bg-orange-400 rounded-full -ml-2\"><\/div><\/div>\r\n    case \"amex\":\r\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-blue-500 rounded text-white text-xs font-bold\">AMEX<\/div>\r\n    case \"rupay\":\r\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-green-600 rounded text-white text-xs font-bold\">RuPay<\/div>\r\n    case \"discover\":\r\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-orange-600 rounded text-white text-xs font-bold\">DISC<\/div>\r\n    default:\r\n      return <CreditCard className=\"w-5 h-5 text-muted-foreground\" \/>\r\n  }\r\n}\r\n\r\nexport function PaymentDetailsTwo({\r\n  className,\r\n  onSubmit,\r\n  onDiscard,\r\n  countries ,\r\n  states,\r\n  cities,\r\n}: {\r\n  className?: string\r\n  onSubmit?: (data: PaymentFormData) => void\r\n  onDiscard?: () => void,\r\n  countries? :{ name: string; isoCode: string }[]\r\n  states? : { name: string; isoCode: string }[],\r\n  cities ?: { name: string}[],\r\n}) {\r\n  const [cardType, setCardType] = useState(\"\")\r\n  const [isSaved, setIsSaved] = useState(false)\r\n  const [defaultCountries, setDefaultCountries] = useState<{ name: string; isoCode: string }[]>([])\r\n  const [defaultStates, setDefaultStates] = useState<{ name: string; isoCode: string }[]>([])\r\n  const [defaultCities, setDefaultCities] = useState<{ name: string }[]>([])\r\n  const [selectedCountry , setSelectedCountry] = useState<string>(\"\")\r\n  const [selectedState , setSelectedState] = useState<string>(\"\")\r\n\r\n  const { register, handleSubmit, setValue, reset,  formState: { errors, isSubmitting } } = useForm<PaymentFormData>({\r\n    defaultValues: {\r\n      nameOnCard: \"\",\r\n      cardNumber: \"\",\r\n      validTill: \"\",\r\n      cvv: \"\",\r\n      firstName: \"\",\r\n      middleLastName: \"\",\r\n      country: \"\",\r\n      state: \"\",\r\n      city: \"\",\r\n      billingAddress: \"\",\r\n      pinCode: \"\",\r\n      contactNumber: \"\",\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    \/\/ fetch all countries\r\n    if(countries && countries?.length > 0){\r\n      setDefaultCountries(countries)\r\n    }else{\r\n      const countryData = Country.getAllCountries()\r\n      setDefaultCountries(countryData)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(()=>{  \r\n    if(states && states.length > 0){\r\n      setDefaultStates(states)\r\n    }\r\n    else{\r\n        const stateData =  State.getStatesOfCountry(selectedCountry)\r\n        setDefaultStates(stateData)\r\n    }\r\n  },[selectedCountry])\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    if(cities && cities.length > 0){\r\n      setDefaultCities(cities)\r\n    }\r\n    else{\r\n      const cityData = City.getCitiesOfState(selectedCountry ,selectedState)\r\n      setDefaultCities(cityData)\r\n    }\r\n   \r\n  }, [selectedCountry, selectedState])\r\n\r\n\r\n  const handleFormSubmit = async (data: PaymentFormData) => {\r\n    if (!onSubmit) return;\r\n    try {\r\n      await onSubmit(data);\r\n      setIsSaved(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleDiscardClick = () => {\r\n    if (onDiscard) {\r\n      onDiscard();\r\n    } else {\r\n      reset();\r\n      setIsSaved(false);\r\n    }\r\n  };\r\n\r\n  const formatAndSetCard = (val: string) => {\r\n    const raw = val.replace(\/\\s+\/g, \"\")\r\n    const formatted = formatCardNumber(raw)\r\n    setValue(\"cardNumber\", formatted)\r\n    setCardType(detectCardType(formatted))\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(handleFormSubmit)} className={cn(\" max-w-2xl  w-full mx-auto space-y-6\", className)}>\r\n      {\/* Card Section *\/}\r\n      <div className=\"flex flex-col border  rounded-lg gap-6 p-6 bg-card\/50 shadow-md\">\r\n        <h2 className=\"text-lg font-medium text-center\">Card Details<\/h2>\r\n\r\n        <div>\r\n          <Label className=\" md:text-[15px] font-medium\">Name on card<\/Label>\r\n          <Input\r\n            className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n            placeholder=\"Placeholder name\"\r\n            {...register(\"nameOnCard\", { required: \"Name is required\" })}\r\n          \/>\r\n          {errors.nameOnCard && <p className=\"text-red-500 text-sm\">{errors.nameOnCard.message}<\/p>}\r\n        <\/div>\r\n\r\n        <div>\r\n          <Label className=\" md:text-[15px] font-medium\">Card number<\/Label>\r\n          <div className=\"relative flex items-center\">\r\n            <div className=\"absolute left-3\"><CardLogo type={cardType} \/><\/div>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 pl-14 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"1234 5678 9012 3456\"\r\n              maxLength={20}\r\n              inputMode=\"numeric\"\r\n              pattern=\"[0-9 ]*\"\r\n              {...register(\"cardNumber\", {\r\n                required: \"Card number is required\",\r\n                validate: (val) => val ? validateLuhn(val) : \"Invalid card number\"\r\n              })}\r\n              onChange={(e) => formatAndSetCard(e.target.value)}\r\n            \/>\r\n          <\/div>\r\n          {errors.cardNumber && <p className=\"text-red-500 text-sm\">{errors.cardNumber.message}<\/p>}\r\n        <\/div>\r\n\r\n        <div className=\"flex gap-6\">\r\n          <div className=\"w-full\">\r\n            <Label className=\" md:text-[15px] font-medium\">Expiry<\/Label>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"MM\/YY\"\r\n              {...register(\"validTill\", {\r\n                required: \"Valid expiry date is required (MM\/YY)\",\r\n                validate: (val?: string) => {\r\n                  if (!val) return \"Valid expiry date is required (MM\/YY)\";\r\n                  if (!\/^\\d{2}\\\/\\d{2}$\/.test(val)) return \"Invalid format (MM\/YY)\";\r\n                  const [mm, yy] = val.split(\"\/\").map(Number);\r\n                  if (mm < 1 || mm > 12) return \"Invalid month\";\r\n                  const now = new Date();\r\n                  const expiry = new Date(2000 + yy, mm - 1, 1);\r\n                  if (expiry < now) return \"Card expired\";\r\n                  return true;\r\n                },\r\n              })}\r\n              onChange={(e) => setValue(\"validTill\", formatExpiryDate(e.target.value))}\r\n            \/>\r\n            {errors.validTill && <p className=\"text-red-500 text-sm\">{errors.validTill.message}<\/p>}\r\n          <\/div>\r\n          <div className=\"w-full\">\r\n            <Label className=\" md:text-[15px] font-medium\">CVV<\/Label>\r\n            <div className=\"relative\">\r\n              <Shield className=\"absolute left-3 top-1\/2 -translate-y-1\/2 w-4 h-4 text-muted-foreground\" \/>\r\n              <Input\r\n                type=\"password\"\r\n                className=\"mb-1.5 mt-1.5 pl-8 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n                placeholder=\"123\"\r\n                maxLength={4}\r\n                inputMode=\"numeric\"\r\n                pattern=\"[0-9 ]*\"\r\n                {...register(\"cvv\", {\r\n                  required: \"Valid CVV is required\",\r\n                  validate: (val) =>\r\n                    (cardType === \"amex\" ? val?.length === 4 : val?.length === 3) ||\r\n                    \"Invalid CVV length\",\r\n                })}\r\n              \/>\r\n            <\/div>\r\n            {errors.cvv && <p className=\"text-red-500 text-sm\">{errors.cvv.message}<\/p>}\r\n          <\/div>\r\n        <\/div>\r\n      <\/div>\r\n\r\n      <div className=\"w-full border-t \"><\/div>\r\n\r\n      {\/* Billing Section *\/}\r\n      <div className=\"flex flex-col border bg-card\/50 rounded-lg gap-6 pt-4 px-6 pb-6 shadow-md \">\r\n        <h2 className=\"text-lg font-medium pb-2 text-center\">Billing Details<\/h2>\r\n\r\n        <div className=\"flex flex-col md:flex-row gap-6\">\r\n          <div className=\"w-full\">\r\n            <Label className=\" md:text-[15px] font-medium\">Firstname<\/Label>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"Firstname\"\r\n              {...register(\"firstName\", { required: \"Required\" })}\r\n            \/>\r\n            {errors.firstName && <p className=\"text-red-500 text-sm\">{errors.firstName.message}<\/p>}\r\n          <\/div>\r\n          <div className=\"w-full\">\r\n            <Label className=\" md:text-[15px] font-medium\">Lastname<\/Label>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"Lastname\"\r\n              {...register(\"middleLastName\", { required: \"Required\" })}\r\n            \/>\r\n            {errors.middleLastName && <p className=\"text-red-500 text-sm\">{errors.middleLastName.message}<\/p>}\r\n          <\/div>\r\n        <\/div>\r\n\r\n        <div className=\"flex flex-col md:flex-row gap-6\">\r\n          <div className=\"w-full\">\r\n            <Label className=\"md:text-[15px] font-medium\">Country<\/Label>\r\n            <Select onValueChange={(val) => {setValue(\"country\", val) \r\n              setSelectedCountry(val)\r\n            }}>\r\n              <SelectTrigger className=\"mb-1.5 mt-1.5 w-full shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\">\r\n                <SelectValue placeholder=\"Select country \" \/>\r\n              <\/SelectTrigger>\r\n              <SelectContent>\r\n                {defaultCountries.map((c) => <SelectItem key={c.isoCode} value={c.isoCode}>{c.name}<\/SelectItem>)}\r\n              <\/SelectContent>\r\n            <\/Select>\r\n          <\/div>\r\n\r\n          <div className=\"w-full\">\r\n            <Label className=\"md:text-[15px] font-medium\">State<\/Label>\r\n            <Select onValueChange={(val) => {setValue(\"state\", val) \r\n            setSelectedState(val)\r\n            }}>\r\n              <SelectTrigger className=\"mb-1.5 mt-1.5 shadow-md w-full !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\">\r\n                <SelectValue placeholder=\"Select state\" \/>\r\n              <\/SelectTrigger>\r\n              <SelectContent>\r\n                {defaultStates.length > 0 ? defaultStates.map((s) => <SelectItem key={s.isoCode} value={s.isoCode}>{s.name} <\/SelectItem>) : <SelectItem disabled value=\"No state found\">No state found<\/SelectItem>}\r\n              <\/SelectContent>\r\n            <\/Select>\r\n          <\/div>\r\n\r\n          <div className=\"w-full\">\r\n            <Label className=\"md:text-[15px] font-medium\">City<\/Label>\r\n            <Select onValueChange={(val) => setValue(\"city\", val)}>\r\n              <SelectTrigger className=\"mb-1.5 mt-1.5 shadow-md w-full !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\">\r\n                <SelectValue placeholder=\"Select city\" \/>\r\n              <\/SelectTrigger>\r\n              <SelectContent>\r\n                {defaultCities.length > 0 ? defaultCities.map((c) => <SelectItem key={c.name} value={c.name}>{c.name}<\/SelectItem>):<SelectItem disabled value=\"No city found\">No city found<\/SelectItem>}\r\n              <\/SelectContent>\r\n            <\/Select>\r\n          <\/div>\r\n        <\/div>\r\n\r\n        <div>\r\n          <Label className=\"md:text-[15px] font-medium\">Billing Address<\/Label>\r\n          <Textarea\r\n            className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n            placeholder=\"Enter Billing Address\"\r\n            {...register(\"billingAddress\", { required: \"Required\" })}\r\n          \/>\r\n          {errors.billingAddress && <p className=\"text-red-500 text-sm\">{errors.billingAddress.message}<\/p>}\r\n        <\/div>\r\n\r\n        <div className=\"flex flex-col md:flex-row gap-6\">\r\n          <div className=\"w-full\">\r\n            <Label className=\"md:text-[15px] font-medium\">Pincode<\/Label>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"110024\"\r\n              {...register(\"pinCode\", {\r\n                required: \"Required\",\r\n                pattern: { value: \/^[0-9]{6}$\/, message: \"Invalid pincode\" },\r\n              })}\r\n            \/>\r\n            {errors.pinCode && <p className=\"text-red-500 text-sm\">{errors.pinCode.message}<\/p>}\r\n          <\/div>\r\n\r\n          <div className=\"w-full\">\r\n            <Label className=\"md:text-[15px] font-medium\">Mobile<\/Label>\r\n            <Input\r\n              className=\"mb-1.5 mt-1.5 shadow-md !bg-card focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary focus-visible:ring-[2px] md:text-[15px]\"\r\n              placeholder=\"9991023558\"\r\n              {...register(\"contactNumber\", {\r\n                required: \"Required\",\r\n                pattern: { value: \/^[0-9]{10}$\/, message: \"Invalid number\" },\r\n              })}\r\n            \/>\r\n            {errors.contactNumber && <p className=\"text-red-500 text-sm\">{errors.contactNumber.message}<\/p>}\r\n          <\/div>\r\n        <\/div>\r\n      <\/div>\r\n\r\n      <div className=\"flex justify-center mb-4\">\r\n        <div className=\"flex items-center justify-end gap-3 pt-2\">\r\n          <Button type=\"button\" variant=\"outline\" onClick={handleDiscardClick} disabled={isSubmitting}>\r\n            Discard\r\n          <\/Button>\r\n          <Button type=\"submit\" disabled={isSubmitting || isSaved} className=\"flex items-center justify-center gap-2\">\r\n            <AnimatePresence mode=\"wait\" initial={false}>\r\n              {isSubmitting ? (\r\n                <motion.div key=\"saving\" initial={{ opacity: 0, x: -10 }} animate={{ opacity: 1, x: 0 }} exit={{ opacity: 0, x: 10 }} className=\"flex items-center gap-2\">\r\n                  <div className=\"w-5 h-5 border border-background border-t-transparent rounded-full animate-spin\" \/>\r\n                  <span>Saving<\/span>\r\n                <\/motion.div>\r\n              ) : isSaved ? (\r\n                <motion.div key=\"saved\" initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }} className=\"flex items-center gap-2\">\r\n                  <div className=\"w-5 h-5 border bg-green-200 rounded-full flex items-center justify-center\">\r\n                    <Check className=\"w-4 h-4 text-green-600\" \/>\r\n                  <\/div>\r\n                  <span>Saved<\/span>\r\n                <\/motion.div>\r\n              ) : (\r\n                <motion.span key=\"default\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>\r\n                  Save Changes\r\n                <\/motion.span>\r\n              )}\r\n            <\/AnimatePresence>\r\n          <\/Button>\r\n        <\/div>\r\n      <\/div>\r\n    <\/form>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-details-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-two-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { PaymentDetailsTwo, type PaymentFormData } from \"@\/components\/billingsdk\/payment-details-two\";\r\n\r\n\r\nexport function PaymentDetailsTwoDemo() {\r\n\r\n  \/\/Function that handles onSubmit in the Form\r\n  const handleSubmit = async (_data: PaymentFormData) => {\r\n    \/\/ _data contains all the form values entered by the user:\r\n    \/\/ e.g., _data.cardNumber, _data.nameOnCard, _data.validTill, _data.cvv, _data.firstName, etc.\r\n    \/\/ You can use this object to make an API call to your backend, for example:\r\n    \/\/ await fetch('\/api\/payment', { method: 'POST', body: JSON.stringify(_data) })\r\n\r\n    return await new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        console.log(\"Handle Submit Function\")\r\n        resolve('The promise is resolved')\r\n      }, 3000)\r\n    })\r\n  }\r\n\r\n\r\n  \/\/Function that handles onCancel in the Form\r\n  const handleDiscard = () => {\r\n    console.log(\"The Discard Function\")\r\n  }\r\n\r\n  return (\r\n    <PaymentDetailsTwo\r\n      onSubmit={handleSubmit}\r\n      onDiscard={handleDiscard}\r\n    \/>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/payment-details-two-demo.tsx"
    },
    {
      "path": "src/utils/card-validation.ts",
      "type": "registry:component",
      "target": "utils/card-validation.ts"
    }
  ]
}