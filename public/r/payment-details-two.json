{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details-two",
  "type": "registry:block",
  "title": "Payment Details Two",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection built using React Hook Form and custom validation",
  "dependencies": [
    "lucide-react",
    "react-hook-form",
    "motion",
    "country-state-city"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "textarea",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details-two.tsx",
      "content": "\"use client\"\r\n\r\nimport { useForm } from \"react-hook-form\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Textarea } from \"@/components/ui/textarea\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { detectCardType, formatCardNumber, formatExpiryDate, validateLuhn } from \"@/utils/card-validation\"\r\nimport { Check, CreditCard, Shield, ChevronLeft, ChevronRight } from \"lucide-react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { motion, AnimatePresence } from 'motion/react'\r\nimport { Country, State, City } from 'country-state-city'\r\n\r\n\r\nexport interface PaymentFormData {\r\n  nameOnCard?: string\r\n  cardNumber?: string\r\n  validTill?: string\r\n  cvv?: string\r\n  firstName?: string\r\n  middleLastName?: string\r\n  country?: string\r\n  state?: string\r\n  city?: string\r\n  billingAddress?: string\r\n  pinCode?: string\r\n  contactNumber?: string\r\n  general?: string\r\n}\r\n\r\nconst CardLogo = ({ type }: { type: string }) => {\r\n  switch (type) {\r\n    case \"visa\":\r\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-blue-600 rounded text-white text-xs font-bold\">VISA</div>\r\n    case \"mastercard\":\r\n      return <div className=\"flex items-center\"><div className=\"w-5 h-5 bg-red-500 rounded-full\"></div><div className=\"w-5 h-5 bg-orange-400 rounded-full -ml-2\"></div></div>\r\n    case \"amex\":\r\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-blue-500 rounded text-white text-xs font-bold\">AMEX</div>\r\n    case \"rupay\":\r\n      return <div className=\"flex items-center justify-center w-10 h-5 bg-green-600 rounded text-white text-xs font-bold\">RuPay</div>\r\n    case \"discover\":\r\n      return <div className=\"flex items-center justify-center w-10 h-6 bg-orange-600 rounded text-white text-xs font-bold\">DISC</div>\r\n    default:\r\n      return <CreditCard className=\"w-5 h-5 text-muted-foreground\" />\r\n  }\r\n}\r\n\r\nexport function PaymentDetailsTwo({\r\n  className,\r\n  onSubmit,\r\n  onDiscard,\r\n  countries,\r\n  states,\r\n  cities,\r\n}: {\r\n  className?: string\r\n  onSubmit?: (data: PaymentFormData) => void\r\n  onDiscard?: () => void,\r\n  countries?: { name: string; isoCode: string }[]\r\n  states?: { name: string; isoCode: string }[],\r\n  cities?: { name: string }[],\r\n}) {\r\n  const [step, setStep] = useState(1)\r\n  const [cardType, setCardType] = useState(\"\")\r\n  const [isSaved, setIsSaved] = useState(false)\r\n  const [defaultCountries, setDefaultCountries] = useState<{ name: string; isoCode: string }[]>([])\r\n  const [defaultStates, setDefaultStates] = useState<{ name: string; isoCode: string }[]>([])\r\n  const [defaultCities, setDefaultCities] = useState<{ name: string }[]>([])\r\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\")\r\n  const [selectedState, setSelectedState] = useState<string>(\"\")\r\n\r\n  const { register, handleSubmit, setValue, reset, formState: { errors, isSubmitting } } = useForm<PaymentFormData>({\r\n    defaultValues: {\r\n      nameOnCard: \"\",\r\n      cardNumber: \"\",\r\n      validTill: \"\",\r\n      cvv: \"\",\r\n      firstName: \"\",\r\n      middleLastName: \"\",\r\n      country: \"\",\r\n      state: \"\",\r\n      city: \"\",\r\n      billingAddress: \"\",\r\n      pinCode: \"\",\r\n      contactNumber: \"\",\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    // fetch all countries\r\n    if (countries && countries?.length > 0) {\r\n      setDefaultCountries(countries)\r\n    } else {\r\n      const countryData = Country.getAllCountries()\r\n      setDefaultCountries(countryData)\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (states && states.length > 0) {\r\n      setDefaultStates(states)\r\n    }\r\n    else {\r\n      const stateData = State.getStatesOfCountry(selectedCountry)\r\n      setDefaultStates(stateData)\r\n    }\r\n  }, [selectedCountry])\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    if (cities && cities.length > 0) {\r\n      setDefaultCities(cities)\r\n    }\r\n    else {\r\n      const cityData = City.getCitiesOfState(selectedCountry, selectedState)\r\n      setDefaultCities(cityData)\r\n    }\r\n\r\n  }, [selectedCountry, selectedState])\r\n\r\n\r\n  const handleFormSubmit = async (data: PaymentFormData) => {\r\n    if (!onSubmit) return;\r\n    try {\r\n      await onSubmit(data);\r\n      setIsSaved(true);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  const handleDiscardClick = () => {\r\n    if (onDiscard) {\r\n      onDiscard();\r\n    } else {\r\n      reset();\r\n      setIsSaved(false);\r\n    }\r\n  };\r\n\r\n  const formatAndSetCard = (val: string) => {\r\n    const raw = val.replace(/\\s+/g, \"\")\r\n    const formatted = formatCardNumber(raw)\r\n    setValue(\"cardNumber\", formatted)\r\n    setCardType(detectCardType(formatted))\r\n  }\r\n\r\n  const handleNext = () => {\r\n    setStep(2)\r\n  }\r\n\r\n  const handleBack = () => {\r\n    setStep(1)\r\n  }\r\n\r\n  return (\r\n    <Card className={cn(\"w-full max-w-2xl mx-auto pb-0\", className)}>\r\n      <CardHeader className=\"space-y-4\">\r\n        <div>\r\n          <CardTitle>Payment Details</CardTitle>\r\n          <CardDescription className=\"mt-1.5\">\r\n            {step === 1 ? \"Enter your card information\" : \"Enter your billing address\"}\r\n          </CardDescription>\r\n        </div>\r\n\r\n        {/* Progress Indicator */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"flex items-center gap-2 flex-1\">\r\n            <div className={cn(\r\n              \"flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium transition-colors\",\r\n              step === 1 ? \"bg-primary text-primary-foreground\" : \"bg-primary/20 text-primary\"\r\n            )}>\r\n              1\r\n            </div>\r\n            <div className=\"flex-1 h-1 rounded-full bg-border\">\r\n              <div className={cn(\r\n                \"h-full rounded-full bg-primary transition-all duration-300\",\r\n                step === 2 ? \"w-full\" : \"w-0\"\r\n              )} />\r\n            </div>\r\n          </div>\r\n          <div className={cn(\r\n            \"flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium transition-colors\",\r\n            step === 2 ? \"bg-primary text-primary-foreground\" : \"bg-muted text-muted-foreground\"\r\n          )}>\r\n            2\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <form onSubmit={handleSubmit(handleFormSubmit)}>\r\n        <CardContent className=\"min-h-[420px] py-6\">\r\n          <AnimatePresence mode=\"wait\">\r\n            {step === 1 ? (\r\n              <motion.div\r\n                key=\"step1\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                transition={{ duration: 0.3 }}\r\n                className=\"space-y-5\"\r\n              >\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"nameOnCard\">Name on card</Label>\r\n                  <Input\r\n                    id=\"nameOnCard\"\r\n                    placeholder=\"John Doe\"\r\n                    {...register(\"nameOnCard\", { required: \"Name is required\" })}\r\n                  />\r\n                  {errors.nameOnCard && <p className=\"text-sm text-destructive\">{errors.nameOnCard.message}</p>}\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"cardNumber\">Card number</Label>\r\n                  <div className=\"relative\">\r\n                    <div className=\"absolute left-3 top-1/2 -translate-y-1/2 z-10\"><CardLogo type={cardType} /></div>\r\n                    <Input\r\n                      id=\"cardNumber\"\r\n                      className=\"pl-14 font-mono tracking-wide\"\r\n                      placeholder=\"1234 5678 9012 3456\"\r\n                      maxLength={20}\r\n                      inputMode=\"numeric\"\r\n                      pattern=\"[0-9 ]*\"\r\n                      {...register(\"cardNumber\", {\r\n                        required: \"Card number is required\",\r\n                        validate: (val) => val ? validateLuhn(val) : \"Invalid card number\"\r\n                      })}\r\n                      onChange={(e) => formatAndSetCard(e.target.value)}\r\n                    />\r\n                  </div>\r\n                  {errors.cardNumber && <p className=\"text-sm text-destructive\">{errors.cardNumber.message}</p>}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"validTill\">Expiry date</Label>\r\n                    <Input\r\n                      id=\"validTill\"\r\n                      className=\"font-mono\"\r\n                      placeholder=\"MM/YY\"\r\n                      maxLength={5}\r\n                      {...register(\"validTill\", {\r\n                        required: \"Valid expiry date is required (MM/YY)\",\r\n                        validate: (val?: string) => {\r\n                          if (!val) return \"Valid expiry date is required (MM/YY)\";\r\n                          if (!/^\\d{2}\\/\\d{2}$/.test(val)) return \"Invalid format (MM/YY)\";\r\n                          const [mm, yy] = val.split(\"/\").map(Number);\r\n                          if (mm < 1 || mm > 12) return \"Invalid month\";\r\n                          const now = new Date();\r\n                          const expiry = new Date(2000 + yy, mm - 1, 1);\r\n                          if (expiry < now) return \"Card expired\";\r\n                          return true;\r\n                        },\r\n                      })}\r\n                      onChange={(e) => setValue(\"validTill\", formatExpiryDate(e.target.value))}\r\n                    />\r\n                    {errors.validTill && <p className=\"text-sm text-destructive\">{errors.validTill.message}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"cvv\">CVV</Label>\r\n                    <div className=\"relative\">\r\n                      <Shield className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground z-10\" />\r\n                      <Input\r\n                        id=\"cvv\"\r\n                        type=\"password\"\r\n                        className=\"pl-10 font-mono\"\r\n                        placeholder=\"123\"\r\n                        maxLength={4}\r\n                        inputMode=\"numeric\"\r\n                        pattern=\"[0-9 ]*\"\r\n                        {...register(\"cvv\", {\r\n                          required: \"Valid CVV is required\",\r\n                          validate: (val) =>\r\n                            (cardType === \"amex\" ? val?.length === 4 : val?.length === 3) ||\r\n                            \"Invalid CVV length\",\r\n                        })}\r\n                      />\r\n                    </div>\r\n                    {errors.cvv && <p className=\"text-sm text-destructive\">{errors.cvv.message}</p>}\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            ) : (\r\n              <motion.div\r\n                key=\"step2\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                transition={{ duration: 0.3 }}\r\n                className=\"space-y-5\"\r\n              >\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"firstName\">First name</Label>\r\n                    <Input\r\n                      id=\"firstName\"\r\n                      placeholder=\"John\"\r\n                      {...register(\"firstName\", { required: \"Required\" })}\r\n                    />\r\n                    {errors.firstName && <p className=\"text-sm text-destructive\">{errors.firstName.message}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"middleLastName\">Last name</Label>\r\n                    <Input\r\n                      id=\"middleLastName\"\r\n                      placeholder=\"Doe\"\r\n                      {...register(\"middleLastName\", { required: \"Required\" })}\r\n                    />\r\n                    {errors.middleLastName && <p className=\"text-sm text-destructive\">{errors.middleLastName.message}</p>}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"country\">Country</Label>\r\n                    <Select onValueChange={(val) => {\r\n                      setValue(\"country\", val)\r\n                      setSelectedCountry(val)\r\n                    }}>\r\n                      <SelectTrigger id=\"country\">\r\n                        <SelectValue placeholder=\"Select country\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {defaultCountries.map((c) => <SelectItem key={c.isoCode} value={c.isoCode}>{c.name}</SelectItem>)}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"state\">State</Label>\r\n                    <Select onValueChange={(val) => {\r\n                      setValue(\"state\", val)\r\n                      setSelectedState(val)\r\n                    }}>\r\n                      <SelectTrigger id=\"state\">\r\n                        <SelectValue placeholder=\"Select state\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {defaultStates.length > 0 ? defaultStates.map((s) => <SelectItem key={s.isoCode} value={s.isoCode}>{s.name} </SelectItem>) : <SelectItem disabled value=\"No state found\">No state found</SelectItem>}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"city\">City</Label>\r\n                    <Select onValueChange={(val) => setValue(\"city\", val)}>\r\n                      <SelectTrigger id=\"city\">\r\n                        <SelectValue placeholder=\"Select city\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {defaultCities.length > 0 ? defaultCities.map((c) => <SelectItem key={c.name} value={c.name}>{c.name}</SelectItem>) : <SelectItem disabled value=\"No city found\">No city found</SelectItem>}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"billingAddress\">Billing Address</Label>\r\n                  <Textarea\r\n                    id=\"billingAddress\"\r\n                    placeholder=\"Enter Billing Address\"\r\n                    {...register(\"billingAddress\", { required: \"Required\" })}\r\n                  />\r\n                  {errors.billingAddress && <p className=\"text-sm text-destructive\">{errors.billingAddress.message}</p>}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"pinCode\">Pincode</Label>\r\n                    <Input\r\n                      id=\"pinCode\"\r\n                      placeholder=\"110024\"\r\n                      {...register(\"pinCode\", {\r\n                        required: \"Required\",\r\n                        pattern: { value: /^[0-9]{6}$/, message: \"Invalid pincode\" },\r\n                      })}\r\n                    />\r\n                    {errors.pinCode && <p className=\"text-sm text-destructive\">{errors.pinCode.message}</p>}\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"contactNumber\">Mobile</Label>\r\n                    <Input\r\n                      id=\"contactNumber\"\r\n                      placeholder=\"9991023558\"\r\n                      {...register(\"contactNumber\", {\r\n                        required: \"Required\",\r\n                        pattern: { value: /^[0-9]{10}$/, message: \"Invalid number\" },\r\n                      })}\r\n                    />\r\n                    {errors.contactNumber && <p className=\"text-sm text-destructive\">{errors.contactNumber.message}</p>}\r\n                  </div>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </CardContent>\r\n\r\n        <CardFooter className=\"flex justify-between border-t bg-muted/30 py-6\">\r\n          {step === 1 ? (\r\n            <>\r\n              <Button type=\"button\" variant=\"ghost\" onClick={handleDiscardClick}>\r\n                Cancel\r\n              </Button>\r\n              <Button type=\"button\" onClick={handleNext} className=\"min-w-[100px]\">\r\n                Next\r\n                <ChevronRight className=\"ml-2 h-4 w-4\" />\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Button type=\"button\" variant=\"ghost\" onClick={handleBack}>\r\n                <ChevronLeft className=\"mr-2 h-4 w-4\" />\r\n                Back\r\n              </Button>\r\n              <Button type=\"submit\" disabled={isSubmitting || isSaved} className=\"min-w-[120px]\">\r\n                <AnimatePresence mode=\"wait\" initial={false}>\r\n                  {isSubmitting ? (\r\n                    <motion.div key=\"saving\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }} className=\"flex items-center gap-2\">\r\n                      <div className=\"w-4 h-4 border-2 border-background border-t-transparent rounded-full animate-spin\" />\r\n                      <span>Saving...</span>\r\n                    </motion.div>\r\n                  ) : isSaved ? (\r\n                    <motion.div key=\"saved\" initial={{ scale: 0 }} animate={{ scale: 1 }} exit={{ scale: 0 }} className=\"flex items-center gap-2\">\r\n                      <Check className=\"w-4 h-4\" />\r\n                      <span>Saved</span>\r\n                    </motion.div>\r\n                  ) : (\r\n                    <motion.span key=\"default\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} exit={{ opacity: 0 }}>\r\n                      Save Changes\r\n                    </motion.span>\r\n                  )}\r\n                </AnimatePresence>\r\n              </Button>\r\n            </>\r\n          )}\r\n        </CardFooter>\r\n      </form>\r\n    </Card>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-details-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-two-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { PaymentDetailsTwo, type PaymentFormData } from \"@/components/billingsdk/payment-details-two\";\r\n\r\n\r\nexport function PaymentDetailsTwoDemo() {\r\n\r\n  //Function that handles onSubmit in the Form\r\n  const handleSubmit = async (_data: PaymentFormData) => {\r\n    // _data contains all the form values entered by the user:\r\n    // e.g., _data.cardNumber, _data.nameOnCard, _data.validTill, _data.cvv, _data.firstName, etc.\r\n    // You can use this object to make an API call to your backend, for example:\r\n    // await fetch('/api/payment', { method: 'POST', body: JSON.stringify(_data) })\r\n\r\n    return await new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        console.log(\"Handle Submit Function\")\r\n        resolve('The promise is resolved')\r\n      }, 3000)\r\n    })\r\n  }\r\n\r\n\r\n  //Function that handles onCancel in the Form\r\n  const handleDiscard = () => {\r\n    console.log(\"The Discard Function\")\r\n  }\r\n\r\n  return (\r\n    <PaymentDetailsTwo\r\n      onSubmit={handleSubmit}\r\n      onDiscard={handleDiscard}\r\n    />\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/payment-details-two-demo.tsx"
    },
    {
      "path": "src/utils/card-validation.ts",
      "content": "\r\n// Detect card type\r\nexport const detectCardType = (\r\n  cardNumber: string\r\n): \"visa\" | \"mastercard\" | \"amex\" | \"rupay\" | \"diners\" | \"discover\" | \"unknown\" => {\r\n  const number = cardNumber.replace(/\\s/g, \"\")\r\n\r\n  if (/^4/.test(number)) return \"visa\"\r\n  if (/^3[47]/.test(number)) return \"amex\"\r\n  if (/^3(?:0[0-5]|09|095|6|8)/.test(number)) return \"diners\"\r\n  if (/^5[1-5]/.test(number) || /^222[1-9]/.test(number) || /^22[3-9]\\d/.test(number) || /^2[3-6]\\d{2}/.test(number) || /^27[0-1]\\d/.test(number) || /^2720/.test(number)) return \"mastercard\"\r\n  if (/^6011/.test(number) || /^65/.test(number) || /^64[4-9]/.test(number) || /^622(?:12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9[0-1]\\d|92[0-5])/.test(number)) return \"discover\"\r\n  if (/^60/.test(number) || /^81/.test(number) || /^82/.test(number) || /^508/.test(number)) return \"rupay\"\r\n\r\n  return \"unknown\"\r\n}\r\n\r\n// Luhn algorithm\r\nexport const validateLuhn = (cardNumber: string): true | string => {\r\n  const number = cardNumber.replace(/\\s/g, \"\")\r\n  if (!number || !/^\\d+$/.test(number)) return \"Invalid card number\"\r\n\r\n  let sum = 0\r\n  let shouldDouble = false\r\n\r\n  for (let i = number.length - 1; i >= 0; i--) {\r\n    let digit = parseInt(number.charAt(i))\r\n    if (shouldDouble) {\r\n      digit *= 2\r\n      if (digit > 9) digit -= 9\r\n    }\r\n    sum += digit\r\n    shouldDouble = !shouldDouble\r\n  }\r\n\r\n  return sum % 10 === 0 ? true : \"Invalid card number\"\r\n}\r\n\r\n\r\n\r\n/**\r\n * Formats a card number by adding spaces every 4 digits\r\n * @param value - The raw card number input\r\n * @returns The formatted card number with spaces\r\n */\r\nexport const formatCardNumber = (value: string): string => {\r\n  const number = value.replace(/\\s/g, \"\").replace(/[^0-9]/gi, \"\")\r\n  const matches = number.match(/\\d{4,16}/g)\r\n  const match = (matches && matches[0]) || \"\"\r\n  const parts = []\r\n\r\n  for (let i = 0, len = match.length; i < len; i += 4) {\r\n    parts.push(match.substring(i, i + 4))\r\n  }\r\n\r\n  if (parts.length) {\r\n    return parts.join(\" \")\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Formats an expiry date of the card\r\n * @param value - The raw card expiry input\r\n * @returns The formatted expiry date with / in between\r\n */\r\nexport const formatExpiryDate = (value ?: string): string => {\r\n  if (!value) return \"\"\r\n  const number = value.replace(/\\D/g, \"\")\r\n  if (number.length >= 2) {\r\n    return number.substring(0, 2) + \"/\" + number.substring(2, 4)\r\n  }\r\n  return number\r\n}\r\n\r\n",
      "type": "registry:component",
      "target": "utils/card-validation.ts"
    }
  ]
}