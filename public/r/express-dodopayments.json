{
  "name": "express-dodopayments",
  "description": "DodoPayments template for Express.js",
  "framework": "express",
  "files": [
    {
      "target": "src/lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from 'dodopayments'\r\n\r\nlet dodopaymentsClient: DodoPayments | null = null\r\n\r\nexport function getDodoPaymentsClient(): DodoPayments {\r\n  if (!dodopaymentsClient) {\r\n    const token = process.env.DODO_PAYMENTS_API_KEY\r\n    const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as \"live_mode\" | \"test_mode\"\r\n\r\n    if (!token) {\r\n      throw new Error(`\r\n        DODO_PAYMENTS_API_KEY environment variable is missing.\r\n        \r\n        Please check:\r\n        1. Your .env file exists in the project root\r\n        2. The file contains: DODO_PAYMENTS_API_KEY=<your-api-key>\r\n        3. You've restarted your development server\r\n        4. No extra quotes or spaces in the .env file\r\n      `)\r\n    }\r\n\r\n    if (!environment || (environment !== \"live_mode\" && environment !== \"test_mode\")) {\r\n      throw new Error('DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"')\r\n    }\r\n\r\n    dodopaymentsClient = new DodoPayments({\r\n      bearerToken: token,\r\n      environment: environment,\r\n    })\r\n  }\r\n\r\n  return dodopaymentsClient\r\n}\r\n"
    },
    {
      "target": "src/routes/dodopayments/checkout.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\nimport { DodoPayments } from 'dodopayments';\r\nimport { z } from 'zod';\r\n\r\nconst router = express.Router();\r\n\r\nconst productCartItemSchema = z.object({\r\n    product_id: z.string().min(1, \"Product ID is required\"),\r\n    quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\r\n    amount: z.number().int().min(0).optional(),\r\n});\r\n\r\nconst attachExistingCustomerSchema = z.object({\r\n    customer_id: z.string().min(1, \"Customer ID is required\"),\r\n});\r\n\r\nconst newCustomerSchema = z.object({\r\n    email: z.string().email(\"Invalid email format\"),\r\n    name: z.string().min(1, \"Name is required\"),\r\n    phone_number: z.string().optional().nullable(),\r\n    create_new_customer: z.boolean().optional(),\r\n});\r\n\r\nconst customerSchema = z.union([attachExistingCustomerSchema, newCustomerSchema]);\r\n\r\nconst billingAddressSchema = z.object({\r\n    city: z.string().min(1, \"City is required\"),\r\n    country: z.string().regex(/^[A-Z]{2}$/, \"Country must be a 2-letter uppercase ISO code\"),\r\n    state: z.string().min(1, \"State is required\"),\r\n    street: z.string().min(1, \"Street address is required\"),\r\n    zipcode: z.string().min(1, \"Zipcode is required\"),\r\n});\r\n\r\nconst checkoutSessionSchema = z.object({\r\n    productCart: z.array(productCartItemSchema).min(1, \"At least one product is required\"),\r\n    customer: customerSchema,\r\n    billing_address: billingAddressSchema,\r\n    return_url: z.string().url(\"Return URL must be a valid URL\"),\r\n    customMetadata: z.record(z.string(), z.string()).optional(),\r\n});\r\n\r\nrouter.post('/', async (req, res) => {\r\n    try {\r\n        const validationResult = checkoutSessionSchema.safeParse(req.body);\r\n        if (!validationResult.success) {\r\n            return res.status(400).json({\r\n                error: \"Validation failed\",\r\n                details: validationResult.error.issues.map(issue => ({\r\n                    field: issue.path.join('.'),\r\n                    message: issue.message\r\n                }))\r\n            });\r\n        }\r\n\r\n        const { productCart, customer, billing_address, return_url, customMetadata } = validationResult.data;\r\n\r\n        const session = await getDodoPaymentsClient().checkoutSessions.create({\r\n            product_cart: productCart,\r\n            customer: customer,\r\n            billing_address: billing_address as DodoPayments.Payments.BillingAddress,\r\n            return_url: return_url,\r\n            metadata: customMetadata,\r\n        });\r\n\r\n        res.json(session);\r\n    } catch (error) {\r\n        console.error('Error in checkout POST handler:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nexport { router as checkoutRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/customer.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\nimport { z } from 'zod';\r\n\r\nconst router = express.Router();\r\n\r\nconst customerCreateSchema = z.object({\r\n    email: z.string().email(\"Invalid email format\"),\r\n    name: z.string().min(1, \"Name is required\"),\r\n    phone_number: z.string().optional().nullable(),\r\n});\r\n\r\nconst customerUpdateSchema = z.object({\r\n    email: z.string().email(\"Invalid email format\").optional(),\r\n    name: z.string().min(1, \"Name is required\").optional(),\r\n    phone_number: z.string().optional().nullable(),\r\n});\r\n\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const { customer_id } = req.query;\r\n\r\n        if (!customer_id || typeof customer_id !== 'string') {\r\n            return res.status(400).json({ error: 'customer_id is required' });\r\n        }\r\n\r\n        const customer = await getDodoPaymentsClient().customers.retrieve(customer_id);\r\n        res.json(customer);\r\n    } catch (error) {\r\n        console.error('Error fetching customer:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.post('/', async (req, res) => {\r\n    try {\r\n        const validationResult = customerCreateSchema.safeParse(req.body);\r\n        if (!validationResult.success) {\r\n            return res.status(400).json({\r\n                error: \"Validation failed\",\r\n                details: validationResult.error.issues.map(issue => ({\r\n                    field: issue.path.join('.'),\r\n                    message: issue.message\r\n                }))\r\n            });\r\n        }\r\n\r\n        const customer = await getDodoPaymentsClient().customers.create(validationResult.data);\r\n        res.json(customer);\r\n    } catch (error) {\r\n        console.error('Error creating customer:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.put('/', async (req, res) => {\r\n    try {\r\n        const { customer_id } = req.query;\r\n\r\n        if (!customer_id || typeof customer_id !== 'string') {\r\n            return res.status(400).json({ error: 'customer_id is required' });\r\n        }\r\n\r\n        const validationResult = customerUpdateSchema.safeParse(req.body);\r\n        if (!validationResult.success) {\r\n            return res.status(400).json({\r\n                error: \"Validation failed\",\r\n                details: validationResult.error.issues.map(issue => ({\r\n                    field: issue.path.join('.'),\r\n                    message: issue.message\r\n                }))\r\n            });\r\n        }\r\n\r\n        const customer = await getDodoPaymentsClient().customers.update(customer_id, validationResult.data);\r\n        res.json(customer);\r\n    } catch (error) {\r\n        console.error('Error updating customer:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.get('/subscriptions', async (req, res) => {\r\n    try {\r\n        const { customer_id } = req.query;\r\n\r\n        if (!customer_id || typeof customer_id !== 'string') {\r\n            return res.status(400).json({ error: 'customer_id is required' });\r\n        }\r\n\r\n        const subscriptions = await getDodoPaymentsClient().subscriptions.list({\r\n            customer_id: customer_id\r\n        });\r\n        res.json(subscriptions);\r\n    } catch (error) {\r\n        console.error('Error fetching customer subscriptions:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.get('/payments', async (req, res) => {\r\n    try {\r\n        const { customer_id } = req.query;\r\n\r\n        if (!customer_id || typeof customer_id !== 'string') {\r\n            return res.status(400).json({ error: 'customer_id is required' });\r\n        }\r\n\r\n        const payments = await getDodoPaymentsClient().payments.list({\r\n            customer_id: customer_id\r\n        });\r\n        res.json(payments);\r\n    } catch (error) {\r\n        console.error('Error fetching customer payments:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nexport { router as customerRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/payments.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const { payment_id } = req.query;\r\n\r\n        if (!payment_id || typeof payment_id !== 'string') {\r\n            return res.status(400).json({ error: 'payment_id is required' });\r\n        }\r\n\r\n        const payment = await getDodoPaymentsClient().payments.retrieve(payment_id);\r\n        res.json(payment);\r\n    } catch (error) {\r\n        console.error('Error fetching payment:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.get('/list', async (req, res) => {\r\n    try {\r\n        const { customer_id, limit, starting_after } = req.query;\r\n\r\n        const params: any = {};\r\n        if (customer_id && typeof customer_id === 'string') {\r\n            params.customer_id = customer_id;\r\n        }\r\n        if (limit && typeof limit === 'string') {\r\n            params.limit = parseInt(limit);\r\n        }\r\n        if (starting_after && typeof starting_after === 'string') {\r\n            params.starting_after = starting_after;\r\n        }\r\n\r\n        const payments = await getDodoPaymentsClient().payments.list(params);\r\n        res.json(payments);\r\n    } catch (error) {\r\n        console.error('Error fetching payments list:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nexport { router as paymentsRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/products.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const { limit, starting_after } = req.query;\r\n\r\n        const params: any = {};\r\n        if (limit && typeof limit === 'string') {\r\n            params.limit = parseInt(limit);\r\n        }\r\n        if (starting_after && typeof starting_after === 'string') {\r\n            params.starting_after = starting_after;\r\n        }\r\n\r\n        const products = await getDodoPaymentsClient().products.list(params);\r\n        res.json(products);\r\n    } catch (error) {\r\n        console.error('Error fetching products:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\n\r\nrouter.get('/product', async (req, res) => {\r\n    try {\r\n        const { product_id } = req.query;\r\n\r\n        if (!product_id || typeof product_id !== 'string') {\r\n            return res.status(400).json({ error: 'product_id is required' });\r\n        }\r\n\r\n        const product = await getDodoPaymentsClient().products.retrieve(product_id);\r\n        res.json(product);\r\n    } catch (error) {\r\n        console.error('Error fetching product:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nexport { router as productsRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/route.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { checkoutRouter } from './checkout';\r\nimport { customerRouter } from './customer';\r\nimport { paymentsRouter } from './payments';\r\nimport { productsRouter } from './products';\r\nimport { subscriptionsRouter } from './subscriptions';\r\nimport { webhookRouter } from './webhook';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use('/checkout', checkoutRouter);\r\nrouter.use('/customer', customerRouter);\r\nrouter.use('/payments', paymentsRouter);\r\nrouter.use('/products', productsRouter);\r\nrouter.use('/subscriptions', subscriptionsRouter);\r\nrouter.use('/webhook', webhookRouter);\r\n\r\nexport { router as dodopaymentsRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/subscriptions.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const { subscription_id } = req.query;\r\n\r\n        if (!subscription_id || typeof subscription_id !== 'string') {\r\n            return res.status(400).json({ error: 'subscription_id is required' });\r\n        }\r\n\r\n        const subscription = await getDodoPaymentsClient().subscriptions.retrieve(subscription_id);\r\n        res.json(subscription);\r\n    } catch (error) {\r\n        console.error('Error fetching subscription:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nrouter.get('/list', async (req, res) => {\r\n    try {\r\n        const { customer_id, limit, starting_after } = req.query;\r\n\r\n        const params: any = {};\r\n        if (customer_id && typeof customer_id === 'string') {\r\n            params.customer_id = customer_id;\r\n        }\r\n        if (limit && typeof limit === 'string') {\r\n            params.limit = parseInt(limit);\r\n        }\r\n        if (starting_after && typeof starting_after === 'string') {\r\n            params.starting_after = starting_after;\r\n        }\r\n\r\n        const subscriptions = await getDodoPaymentsClient().subscriptions.list(params);\r\n        res.json(subscriptions);\r\n    } catch (error) {\r\n        console.error('Error fetching subscriptions list:', error);\r\n        res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n});\r\n\r\nexport { router as subscriptionsRouter };\r\n"
    },
    {
      "target": "src/routes/dodopayments/webhook.ts",
      "type": "template",
      "content": "import express from 'express';\r\nimport { Webhook } from \"standardwebhooks\";\r\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\r\n\r\nconst router = express.Router();\r\n\r\nconst webhook = new Webhook(process.env.DODO_PAYMENTS_WEBHOOK_KEY!);\r\n\r\nrouter.post('/', express.raw({ type: 'application/json' }), async (req, res) => {\r\n    try {\r\n        const rawBody = req.body;\r\n        const webhookHeaders = {\r\n            \"webhook-id\": req.headers[\"webhook-id\"] as string || \"\",\r\n            \"webhook-signature\": req.headers[\"webhook-signature\"] as string || \"\",\r\n            \"webhook-timestamp\": req.headers[\"webhook-timestamp\"] as string || \"\",\r\n        };\r\n\r\n        await webhook.verify(rawBody, webhookHeaders);\r\n        const payload = JSON.parse(rawBody.toString());\r\n\r\n        if (payload.data.payload_type === \"Subscription\") {\r\n            switch (payload.type) {\r\n                case \"subscription.active\":\r\n                    const subscription = await getDodoPaymentsClient().subscriptions.retrieve(payload.data.subscription_id);\r\n                    console.log(\"-------SUBSCRIPTION DATA START ---------\")\r\n                    console.log(subscription)\r\n                    console.log(\"-------SUBSCRIPTION DATA END ---------\")\r\n                    break;\r\n                case \"subscription.failed\":\r\n                    console.log(\"Subscription failed:\", payload.data.subscription_id);\r\n                    break;\r\n                case \"subscription.cancelled\":\r\n                    console.log(\"Subscription cancelled:\", payload.data.subscription_id);\r\n                    break;\r\n                case \"subscription.renewed\":\r\n                    console.log(\"Subscription renewed:\", payload.data.subscription_id);\r\n                    break;\r\n                case \"subscription.on_hold\":\r\n                    console.log(\"Subscription on hold:\", payload.data.subscription_id);\r\n                    break;\r\n                default:\r\n                    console.log(\"Unknown subscription event:\", payload.type);\r\n                    break;\r\n            }\r\n        } else if (payload.data.payload_type === \"Payment\") {\r\n            switch (payload.type) {\r\n                case \"payment.succeeded\":\r\n                    const paymentDataResp = await getDodoPaymentsClient().payments.retrieve(payload.data.payment_id)\r\n                    console.log(\"-------PAYMENT DATA START ---------\")\r\n                    console.log(paymentDataResp)\r\n                    console.log(\"-------PAYMENT DATA END ---------\")\r\n                    break;\r\n                case \"payment.failed\":\r\n                    console.log(\"Payment failed:\", payload.data.payment_id);\r\n                    break;\r\n                case \"payment.refunded\":\r\n                    console.log(\"Payment refunded:\", payload.data.payment_id);\r\n                    break;\r\n                default:\r\n                    console.log(\"Unknown payment event:\", payload.type);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        res.status(200).json({ message: \"Webhook processed successfully\" });\r\n    } catch (error) {\r\n        console.error(\"Webhook verification failed:\", error);\r\n        res.status(400).json({ error: \"Webhook verification failed\" });\r\n    }\r\n});\r\n\r\nexport { router as webhookRouter };\r\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "# DodoPayments Configuration\r\nDODO_PAYMENTS_API_KEY=your_api_key_here\r\nDODO_PAYMENTS_ENVIRONMENT=test_mode\r\nDODO_PAYMENTS_WEBHOOK_KEY=your_webhook_key_here\r\n\r\n# Server Configuration\r\nPORT=3000\r\nNODE_ENV=development\r\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "standardwebhooks",
    "zod",
    "express",
    "@types/express"
  ]
}