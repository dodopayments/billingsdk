{
  "name": "react-dodopayments",
  "description": "DodoPayments template for React.js",
  "framework": "react",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from \"dodopayments\"\r\n\r\nexport type Product = DodoPayments.Product\r\nexport type Customer = DodoPayments.Customers.Customer\r\nexport type Subscription = DodoPayments.Subscriptions.Subscription\r\nexport type Payment = DodoPayments.Payments.Payment\r\n\r\n\r\nexport const getProducts = async ({\r\n  baseUrl,\r\n}: {\r\n  baseUrl: string\r\n}): Promise<Product[]> => {\r\n  const response = await fetch(`${baseUrl}/products`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch products: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getProduct = async ({\r\n  baseUrl,\r\n  product_id,\r\n}: {\r\n  baseUrl: string\r\n  product_id: string\r\n}): Promise<Product> => {\r\n  const response = await fetch(`${baseUrl}/product?product_id=${product_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch product: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomer = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomerSubscriptions = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Subscription[]> => {\r\n  const response = await fetch(`${baseUrl}/customer/subscriptions?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch subscriptions: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomerPayments = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Payment[]> => {\r\n  const response = await fetch(`${baseUrl}/customer/payments?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch payments: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const createCustomer = async ({\r\n  baseUrl,\r\n  customer,\r\n}: {\r\n  baseUrl: string\r\n  customer: DodoPayments.Customers.CustomerCreateParams\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(customer),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to create customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const updateCustomer = async ({\r\n  baseUrl,\r\n  customer_id,\r\n  customer,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n  customer: DodoPayments.Customers.CustomerUpdateParams\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(customer),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to update customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const checkout = async ({\r\n  baseUrl,\r\n  productCart,\r\n  customer,\r\n  billing_address,\r\n  return_url,\r\n  customMetadata,\r\n}: {\r\n  baseUrl: string\r\n  productCart: Array<{ product_id: string; quantity: number; amount?: number }>\r\n  customer: DodoPayments.Payments.CustomerRequest\r\n  billing_address: DodoPayments.Payments.BillingAddress\r\n  return_url: string\r\n  customMetadata?: Record<string, string>\r\n}): Promise<{ checkout_url: string }> => {\r\n  const response = await fetch(`${baseUrl}/checkout`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ productCart, customer, billing_address, return_url, customMetadata }),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to checkout: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n"
    },
    {
      "target": "hooks/useBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from 'react'\r\nimport { assertPayPalEnv, createOrder, captureOrder, getOrder } from '../lib/paypal'\r\n\r\nexport function useBilling({ baseUrl }: { baseUrl?: string } = {}) {\r\n  const resolvedBaseUrl = baseUrl ?? (import.meta as any).env.VITE_BASE_URL ?? 'http://localhost:3000'\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [lastOrderId, setLastOrderId] = useState<string | null>(null)\r\n\r\n  const create = useCallback(async (amount: string, currency: string) => {\r\n    try {\r\n      setLoading(true); setError(null); assertPayPalEnv(resolvedBaseUrl)\r\n      const order = await createOrder({ baseUrl: resolvedBaseUrl, amount, currency })\r\n      setLastOrderId(order.id)\r\n      return order\r\n    } catch (e: any) { setError(e?.message ?? 'Failed to create order'); throw e } finally { setLoading(false) }\r\n  }, [resolvedBaseUrl])\r\n\r\n  const capture = useCallback(async (orderId: string) => {\r\n    try {\r\n      setLoading(true); setError(null)\r\n      const order = await captureOrder({ baseUrl: resolvedBaseUrl, orderId })\r\n      return order\r\n    } catch (e: any) { setError(e?.message ?? 'Failed to capture order'); throw e } finally { setLoading(false) }\r\n  }, [resolvedBaseUrl])\r\n\r\n  const fetchOrder = useCallback(async (orderId: string) => {\r\n    try {\r\n      setLoading(true); setError(null)\r\n      const order = await getOrder({ baseUrl: resolvedBaseUrl, orderId })\r\n      return order\r\n    } catch (e: any) { setError(e?.message ?? 'Failed to fetch order'); throw e } finally { setLoading(false) }\r\n  }, [resolvedBaseUrl])\r\n\r\n  return { loading, error, lastOrderId, create, capture, fetchOrder }\r\n}\r\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "VITE_BASE_URL=\"YOUR API URL\""
    }
  ],
  "dependencies": [
    "dodopayments",
    "react"
  ]
}