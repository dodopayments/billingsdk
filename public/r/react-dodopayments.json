{
  "name": "react-dodopayments",
  "description": "DodoPayments template for React.js",
  "framework": "react",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from \"dodopayments\"\r\n\r\nexport type Product = DodoPayments.Product\r\nexport type Customer = DodoPayments.Customers.Customer\r\nexport type Subscription = DodoPayments.Subscriptions.Subscription\r\nexport type Payment = DodoPayments.Payments.Payment\r\n\r\n\r\nexport const getProducts = async ({\r\n  baseUrl,\r\n}: {\r\n  baseUrl: string\r\n}): Promise<Product[]> => {\r\n  const response = await fetch(`${baseUrl}/products`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch products: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getProduct = async ({\r\n  baseUrl,\r\n  product_id,\r\n}: {\r\n  baseUrl: string\r\n  product_id: string\r\n}): Promise<Product> => {\r\n  const response = await fetch(`${baseUrl}/product?product_id=${product_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch product: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomer = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomerSubscriptions = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Subscription[]> => {\r\n  const response = await fetch(`${baseUrl}/customer/subscriptions?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch subscriptions: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const getCustomerPayments = async ({\r\n  baseUrl,\r\n  customer_id,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n}): Promise<Payment[]> => {\r\n  const response = await fetch(`${baseUrl}/customer/payments?customer_id=${customer_id}`)\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to fetch payments: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const createCustomer = async ({\r\n  baseUrl,\r\n  customer,\r\n}: {\r\n  baseUrl: string\r\n  customer: DodoPayments.Customers.CustomerCreateParams\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(customer),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to create customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const updateCustomer = async ({\r\n  baseUrl,\r\n  customer_id,\r\n  customer,\r\n}: {\r\n  baseUrl: string\r\n  customer_id: string\r\n  customer: DodoPayments.Customers.CustomerUpdateParams\r\n}): Promise<Customer> => {\r\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`, {\r\n    method: \"PUT\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify(customer),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to update customer: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n\r\n\r\nexport const checkout = async ({\r\n  baseUrl,\r\n  productCart,\r\n  customer,\r\n  billing_address,\r\n  return_url,\r\n  customMetadata,\r\n}: {\r\n  baseUrl: string\r\n  productCart: Array<{ product_id: string; quantity: number; amount?: number }>\r\n  customer: DodoPayments.Payments.CustomerRequest\r\n  billing_address: DodoPayments.Payments.BillingAddress\r\n  return_url: string\r\n  customMetadata?: Record<string, string>\r\n}): Promise<{ checkout_url: string }> => {\r\n  const response = await fetch(`${baseUrl}/checkout`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ productCart, customer, billing_address, return_url, customMetadata }),\r\n  })\r\n  if (!response.ok) {\r\n    throw new Error(`Failed to checkout: ${response.status} ${response.statusText}`)\r\n  }\r\n  return response.json()\r\n}\r\n"
    },
    {
import { useState, useCallback } from 'react'
import {
  checkout as dodoCheckout,
  getProducts,
  getProduct,
  createCustomer,
  updateCustomer,
  getCustomer,
  getCustomerSubscriptions,
  getCustomerPayments,
} from '../lib/dodopayments'

export function useBilling({ baseUrl }: { baseUrl?: string } = {}) {
  const resolvedBaseUrl =
    baseUrl ??
    (import.meta as any).env.VITE_BASE_URL ??
    'http://localhost:3000'
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [lastCheckoutUrl, setLastCheckoutUrl] =
    useState<string | null>(null)

  const products = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      return await getProducts({ baseUrl: resolvedBaseUrl })
    } catch (e: any) {
      setError(e?.message ?? 'Failed to fetch products')
      throw e
    } finally {
      setLoading(false)
    }
  }, [resolvedBaseUrl])

  const product = useCallback(async (product_id: string) => {
    try {
      setLoading(true)
      setError(null)
      return await getProduct({
        baseUrl: resolvedBaseUrl,
        product_id,
      })
    } catch (e: any) {
      setError(e?.message ?? 'Failed to fetch product')
      throw e
    } finally {
      setLoading(false)
    }
  }, [resolvedBaseUrl])

  const checkout = useCallback(
    async (args: Parameters<typeof dodoCheckout>[0]) => {
      try {
        setLoading(true)
        setError(null)
        const { checkout_url } = await dodoCheckout({
          ...args,
          baseUrl: resolvedBaseUrl,
        })
        setLastCheckoutUrl(checkout_url)
        return checkout_url
      } catch (e: any) {
        setError(e?.message ?? 'Failed to initiate checkout')
        throw e
      } finally {
        setLoading(false)
      }
    },
    [resolvedBaseUrl]
  )

  return {
    loading,
    error,
    lastCheckoutUrl,
    products,
    product,
    checkout,
    getCustomer: (customer_id: string) =>
      getCustomer({ baseUrl: resolvedBaseUrl, customer_id }),
    updateCustomer: (
      customer_id: string,
      customer: any
    ) =>
      updateCustomer({
        baseUrl: resolvedBaseUrl,
        customer_id,
        customer,
      }),
    getCustomerSubscriptions: (customer_id: string) =>
      getCustomerSubscriptions({
        baseUrl: resolvedBaseUrl,
        customer_id,
      }),
    getCustomerPayments: (customer_id: string) =>
      getCustomerPayments({
        baseUrl: resolvedBaseUrl,
        customer_id,
      }),
  }
}
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "VITE_BASE_URL=\"YOUR API URL\""
    }
  ],
  "dependencies": [
    "dodopayments",
    "react"
  ]
}