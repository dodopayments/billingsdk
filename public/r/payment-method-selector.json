{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-method-selector",
  "type": "registry:block",
  "title": "Payment Method Selector",
  "description": "A payment method selector component with support for cards, digital wallets, UPI, and BNPL services",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-method-selector.tsx",
      "content": "\"use client\"\n\nimport type React from \"react\"\nimport { useState } from \"react\"\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { X, CreditCard, QrCode, Wallet, Landmark } from \"lucide-react\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\n\ntype PaymentMethod = \"cards\" | \"digital-wallets\" | \"upi\" | \"bnpl-services\"\n\ninterface PaymentOption {\n  id: PaymentMethod\n  name: string\n  description: string\n  icon: React.ReactNode\n  examples: string[]\n  details: string\n  features: string[]\n}\n\ninterface FormData {\n  cardNumber?: string\n  expiryDate?: string\n  cvv?: string\n  cardholderName?: string\n  email?: string\n  phone?: string\n  upiId?: string\n  income?: string\n}\n\nconst paymentOptions: PaymentOption[] = [\n  {\n    id: \"cards\",\n    name: \"Cards\",\n    description: \"Visa, Mastercard, etc.\",\n    icon: <CreditCard className=\"w-5 h-5\" />,\n    examples: [\"Visa\", \"Mastercard\", \"American Express\", \"Discover\"],\n    details: \"Secure card payments with fraud protection\",\n    features: [\"Instant processing\", \"Worldwide acceptance\", \"Cashback rewards\", \"Purchase protection\"],\n  },\n  {\n    id: \"digital-wallets\",\n    name: \"Digital Wallets\",\n    description: \"Apple Pay, Cash App, etc.\",\n    icon: <Wallet className=\"w-5 h-5\" />,\n    examples: [\"Apple Pay\", \"Google Pay\", \"Cash App\", \"Venmo\"],\n    details: \"Quick and secure mobile payments\",\n    features: [\"Touch/Face ID security\", \"No card details shared\", \"Fast checkout\", \"Loyalty integration\"],\n  },\n  {\n    id: \"upi\",\n    name: \"UPI\",\n    description: \"Unified Payments Interface (India)\",\n    icon: <QrCode className=\"w-5 h-5\" />,\n    examples: [\"PhonePe\", \"Google Pay\", \"Paytm\", \"BHIM\"],\n    details: \"Real-time bank-to-bank transfers\",\n    features: [\"24/7 availability\", \"No transaction fees\", \"QR code payments\", \"Bank account linking\"],\n  },\n  {\n    id: \"bnpl-services\",\n    name: \"BNPL Services\",\n    description: \"Klarna, Affirm, and similar options\",\n    icon: <Landmark className=\"w-5 h-5\" />,\n    examples: [\"Klarna\", \"Affirm\", \"Afterpay\", \"Sezzle\"],\n    details: \"Buy now, pay later in installments\",\n    features: [\"Split payments\", \"No interest options\", \"Flexible terms\", \"Credit building\"],\n  },\n]\n\nexport interface PaymentMethodSelectorProps {\n  className?: string\n  onProceed?: (method: PaymentMethod, data: FormData) => void\n}\n\nexport function PaymentMethodSelector({ className, onProceed }: PaymentMethodSelectorProps) {\n  const [selectedMethod, setSelectedMethod] = useState<PaymentMethod | null>(null)\n  const [formData, setFormData] = useState<FormData>({})\n\n  const handleMethodSelect = (method: PaymentMethod) => {\n    setSelectedMethod(selectedMethod === method ? null : method)\n    setFormData({})\n  }\n\n  const handleClose = () => {\n    setSelectedMethod(null)\n    setFormData({})\n  }\n\n  const handleInputChange = (field: keyof FormData, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }))\n  }\n\n  const renderForm = (method: PaymentMethod) => {\n    switch (method) {\n      case \"cards\":\n        return (\n          <motion.div\n            initial={{ y: 8, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.25, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n            className=\"space-y-4\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"col-span-2\">\n                <Label htmlFor=\"cardNumber\" className=\"text-xs font-medium\">Card Number</Label>\n                <Input\n                  id=\"cardNumber\"\n                  type=\"text\"\n                  placeholder=\"1234 5678 9012 3456\"\n                  value={formData.cardNumber || \"\"}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"cardNumber\", e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"expiryDate\" className=\"text-xs font-medium\">Expiry Date</Label>\n                <Input\n                  id=\"expiryDate\"\n                  type=\"text\"\n                  placeholder=\"MM/YY\"\n                  value={formData.expiryDate || \"\"}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"expiryDate\", e.target.value)}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"cvv\" className=\"text-xs font-medium\">CVV</Label>\n                <Input\n                  id=\"cvv\"\n                  type=\"text\"\n                  placeholder=\"123\"\n                  value={formData.cvv || \"\"}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"cvv\", e.target.value)}\n                />\n              </div>\n              <div className=\"col-span-2\">\n                <Label htmlFor=\"cardholderName\" className=\"text-xs font-medium\">Cardholder Name</Label>\n                <Input\n                  id=\"cardholderName\"\n                  type=\"text\"\n                  placeholder=\"John Doe\"\n                  value={formData.cardholderName || \"\"}\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"cardholderName\", e.target.value)}\n                />\n              </div>\n            </div>\n          </motion.div>\n        )\n\n      case \"digital-wallets\":\n        return (\n          <motion.div\n            initial={{ y: 8, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.25, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n            className=\"space-y-4\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div>\n              <Label htmlFor=\"email\" className=\"text-xs font-medium\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"john@example.com\"\n                value={formData.email || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"email\", e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"phone\" className=\"text-xs font-medium\">Phone Number</Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                placeholder=\"+1 (555) 123-4567\"\n                value={formData.phone || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"phone\", e.target.value)}\n              />\n            </div>\n            <div className=\"p-3 bg-muted/50 rounded-lg border\">\n              <p className=\"text-xs text-muted-foreground\">\n                You'll be redirected to your selected wallet app to complete the payment securely.\n              </p>\n            </div>\n          </motion.div>\n        )\n\n      case \"upi\":\n        return (\n          <motion.div\n            initial={{ y: 8, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.25, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n            className=\"space-y-4\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div>\n              <Label htmlFor=\"upiId\" className=\"text-xs font-medium\">UPI ID</Label>\n              <Input\n                id=\"upiId\"\n                type=\"text\"\n                placeholder=\"yourname@paytm\"\n                value={formData.upiId || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"upiId\", e.target.value)}\n              />\n            </div>\n            <div className=\"p-3 bg-muted/50 rounded-lg border\">\n              <p className=\"text-xs text-muted-foreground\">\n                Enter your UPI ID to receive a payment request. You can complete the payment in your UPI app.\n              </p>\n            </div>\n          </motion.div>\n        )\n\n      case \"bnpl-services\":\n        return (\n          <motion.div\n            initial={{ y: 8, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.25, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n            className=\"space-y-4\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div>\n              <Label htmlFor=\"bnplEmail\" className=\"text-xs font-medium\">Email Address</Label>\n              <Input\n                id=\"bnplEmail\"\n                type=\"email\"\n                placeholder=\"john@example.com\"\n                value={formData.email || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"email\", e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"bnplPhone\" className=\"text-xs font-medium\">Phone Number</Label>\n              <Input\n                id=\"bnplPhone\"\n                type=\"tel\"\n                placeholder=\"+1 (555) 123-4567\"\n                value={formData.phone || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"phone\", e.target.value)}\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"income\" className=\"text-xs font-medium\">Annual Income (Optional)</Label>\n              <Input\n                id=\"income\"\n                type=\"text\"\n                placeholder=\"$50,000\"\n                value={formData.income || \"\"}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleInputChange(\"income\", e.target.value)}\n              />\n            </div>\n            <div className=\"p-3 bg-muted/50 rounded-lg border\">\n              <p className=\"text-xs text-muted-foreground\">\n                You'll be redirected to complete a quick eligibility check and set up your payment plan.\n              </p>\n            </div>\n          </motion.div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <motion.div\n      className={\"w-full max-w-md mx-auto \".concat(className || \"\")}\n      initial={{ scale: 0.96, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      transition={{ duration: 0.8, ease: [0.25, 0.46, 0.45, 0.94] }}\n    >\n      <Card className=\"backdrop-blur-sm shadow-2xl overflow-hidden\">\n        <CardHeader>\n          <motion.div\n            initial={{ y: -8, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.2, duration: 0.6, ease: [0.25, 0.46, 0.45, 0.94] }}\n          >\n            <CardTitle className=\"text-center text-xl\">Payment Methods</CardTitle>\n          </motion.div>\n        </CardHeader>\n        <CardContent>\n\n        <div className=\"space-y-2 relative\">\n          <AnimatePresence>\n            {paymentOptions.map((option, index) => {\n              const isSelected = selectedMethod === option.id\n              const selectedIndex = paymentOptions.findIndex((p) => p.id === selectedMethod)\n              const isAboveSelected = selectedMethod && index < selectedIndex\n              const isBelowSelected = selectedMethod && index > selectedIndex\n\n              const shouldShow = !selectedMethod || isSelected\n\n              return (\n                <motion.div\n                  key={option.id}\n                  initial={{ x: -15, opacity: 0, scale: 0.97 }}\n                  animate={\n                    shouldShow\n                      ? { x: 0, opacity: 1, scale: 1, y: 0 }\n                      : {\n                          x: 0,\n                          opacity: 0,\n                          scale: 0.97,\n                          y: isAboveSelected ? -40 : isBelowSelected ? 40 : 0,\n                        }\n                  }\n                  exit={{\n                    opacity: 0,\n                    scale: 0.97,\n                    y: isAboveSelected ? -40 : isBelowSelected ? 40 : 0,\n                    transition: { duration: 0.4, ease: [0.25, 0.46, 0.45, 0.94] },\n                  }}\n                  transition={{\n                    delay: shouldShow ? index * 0.06 : 0,\n                    duration: 0.5,\n                    ease: [0.25, 0.46, 0.45, 0.94],\n                  }}\n                  className=\"relative\"\n                  style={{\n                    position: shouldShow ? \"relative\" : \"absolute\",\n                    width: shouldShow ? \"auto\" : \"100%\",\n                    zIndex: isSelected ? 10 : 1,\n                  }}\n                >\n                  <motion.div\n                    whileHover={\n                      !isSelected\n                        ? {\n                            scale: 1.005,\n                            y: -0.5,\n                            transition: { duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] },\n                          }\n                        : {}\n                    }\n                    whileTap={{ scale: 0.995, transition: { duration: 0.15, ease: [0.25, 0.46, 0.45, 0.94] } }}\n                  >\n                    <motion.div\n                      role=\"button\"\n                      tabIndex={0}\n                      onClick={() => handleMethodSelect(option.id)}\n                      onKeyDown={(e) => {\n                        if (e.key === 'Enter' || e.key === ' ') {\n                          e.preventDefault()\n                          handleMethodSelect(option.id)\n                        }\n                      }}\n                      className={`w-full p-4 rounded-lg transition-all duration-300 group cursor-pointer hover:bg-muted/30 ${\n                        isSelected\n                          ? \"bg-muted/10 shadow-lg shadow-black/5\"\n                          : \"hover:shadow-md\"\n                      }`}\n                    >\n                        <div className=\"relative\">\n                          {isSelected && (\n                            <motion.div\n                              role=\"button\"\n                              tabIndex={0}\n                              onClick={(e) => {\n                                e.stopPropagation()\n                                handleClose()\n                              }}\n                              onKeyDown={(e) => {\n                                if (e.key === 'Enter' || e.key === ' ') {\n                                  e.preventDefault()\n                                  e.stopPropagation()\n                                  handleClose()\n                                }\n                              }}\n                              className=\"absolute top-2 right-2 p-1 rounded-full bg-muted hover:bg-muted/80 transition-colors z-10\"\n                              initial={{ scale: 0, rotate: -45 }}\n                              animate={{ scale: 1, rotate: 0 }}\n                              transition={{ delay: 0.15, duration: 0.4, ease: [0.25, 0.46, 0.45, 0.94] }}\n                              whileHover={{ scale: 1.03 }}\n                              whileTap={{ scale: 0.97 }}\n                            >\n                              <X className=\"w-4 h-4 text-muted-foreground\" />\n                            </motion.div>\n                          )}\n\n                          <div className=\"flex items-center space-x-4\">\n                            <motion.div\n                              className=\"p-3 rounded-lg bg-background border shadow-sm group-hover:shadow-md transition-all duration-300\"\n                              whileHover={!isSelected ? { rotate: [0, -1, 1, 0], scale: 1.02 } : {}}\n                              transition={{ duration: 0.3, ease: [0.25, 0.46, 0.45, 0.94] }}\n                            >\n                              {option.icon}\n                            </motion.div>\n                            <div className=\"flex-1 text-left\">\n                              <h3 className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">\n                                {option.name}\n                              </h3>\n                              <p className=\"text-sm text-muted-foreground group-hover:text-muted-foreground/80 transition-colors\">\n                                {option.description}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <AnimatePresence>\n                          {isSelected && (\n                            <motion.div\n                              initial={{ height: 0, opacity: 0, y: -10 }}\n                              animate={{ height: \"auto\", opacity: 1, y: 0 }}\n                              exit={{ height: 0, opacity: 0, y: -10 }}\n                              transition={{ duration: 0.4, ease: [0.25, 0.46, 0.45, 0.94] }}\n                              className=\"overflow-hidden\"\n                            >\n                              <motion.div\n                                initial={{ y: -8 }}\n                                animate={{ y: 0 }}\n                                transition={{ delay: 0.1, duration: 0.4, ease: [0.25, 0.46, 0.45, 0.94] }}\n                                className=\"pt-4 mt-4\"\n                              >\n                                <div className=\"space-y-4 text-left\">{renderForm(option.id)}</div>\n                              </motion.div>\n                            </motion.div>\n                          )}\n                        </AnimatePresence>\n                    </motion.div>\n                  </motion.div>\n                </motion.div>\n              )\n            })}\n          </AnimatePresence>\n        </div>\n\n        <AnimatePresence>\n          {!selectedMethod && (\n            <motion.div\n              initial={{ y: 8, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              exit={{ y: 8, opacity: 0 }}\n              transition={{ delay: 0.4, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n              whileHover={{ scale: 1.005 }}\n              whileTap={{ scale: 0.995 }}\n            >\n              <Button\n                className=\"w-full mt-6\"\n              >\n                <span>Select Payment Method</span>\n                <span>→</span>\n              </Button>\n            </motion.div>\n          )}\n          {selectedMethod && (\n            <motion.div\n              initial={{ y: 8, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              exit={{ y: 8, opacity: 0 }}\n              transition={{ delay: 0.4, duration: 0.5, ease: [0.25, 0.46, 0.45, 0.94] }}\n              whileHover={{ scale: 1.005 }}\n              whileTap={{ scale: 0.995 }}\n            >\n              <Button\n                className=\"w-full mt-6\"\n                onClick={() => {\n                  if (onProceed) onProceed(selectedMethod, formData)\n                }}\n              >\n                <span>Proceed with Payment</span>\n                <span>→</span>\n              </Button>\n            </motion.div>\n          )}\n        </AnimatePresence>\n        </CardContent>\n      </Card>\n    </motion.div>\n  )\n}\n\n\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-method-selector.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-method-selector-demo.tsx",
      "content": "import { PaymentMethodSelector } from \"@/components/billingsdk/payment-method-selector\"\r\n\r\nexport function PaymentMethodSelectorDemo() {\r\n    return (\r\n        <div className=\"w-full h-full flex flex-col gap-6 min-h-[500px] rounded-lg overflow-hidden bg-background-secondary border-2\">\r\n            <div className=\"flex flex-1 flex-col justify-center text-center\">\r\n                <PaymentMethodSelector\r\n                    onProceed={(method, data) => {\r\n                        console.log(\"Selected method:\", method)\r\n                        console.log(\"Form data:\", data)\r\n                    }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/payment-method-selector-demo.tsx"
    }
  ]
}