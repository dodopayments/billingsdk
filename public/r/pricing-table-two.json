{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-two",
  "type": "registry:block",
  "title": "Pricing Table Two",
  "description": "A pricing table component with a feature table",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "table",
    "switch",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-two.tsx",
      "content": "\"use client\";\r\n\r\nimport { Check, Minus, Zap } from \"lucide-react\";\r\nimport { useState } from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\n\r\nimport { type Plan } from \"@/lib/billingsdk-config\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\n\r\nconst sectionVariants = cva(\"py-32\", {\r\n  variants: {\r\n    size: {\r\n      small: \"py-12\",\r\n      medium: \"py-20\",\r\n      large: \"py-32\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-b from-background to-muted/20 relative overflow-hidden\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"medium\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst titleVariants = cva(\"mb-2 font-semibold\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-2xl lg:text-3xl\",\r\n      medium: \"text-3xl lg:text-4xl\",\r\n      large: \"text-3xl lg:text-5xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent font-bold\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst descriptionVariants = cva(\"text-muted-foreground\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-sm lg:text-base\",\r\n      medium: \"text-base lg:text-lg\",\r\n      large: \"lg:text-lg\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-center max-w-2xl mx-auto\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst toggleWrapperVariants = cva(\"flex justify-center items-center gap-3\", {\r\n  variants: {\r\n    size: {\r\n      small: \"mt-6\",\r\n      medium: \"mt-7\",\r\n      large: \"mt-8\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"mt-10\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst toggleLabelVariants = cva(\"font-medium text-sm transition-all\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-xs\",\r\n      medium: \"text-sm\",\r\n      large: \"text-sm\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"font-semibold\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst switchScaleVariants = cva(\"transition-all\", {\r\n  variants: {\r\n    size: {\r\n      small: \"scale-90\",\r\n      medium: \"scale-95\",\r\n      large: \"\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"data-[state=checked]:bg-primary\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst plansWrapperVariants = cva(\"flex\", {\r\n  variants: {\r\n    size: {\r\n      small: \"mt-6\",\r\n      medium: \"mt-8\",\r\n      large: \"mt-10\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"mt-12\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst cardVariants = cva(\r\n  \"bg-card text-card-foreground border shadow-sm flex w-full flex-col justify-between text-center rounded-xl md:rounded-none transition-all duration-300\",\r\n  {\r\n    variants: {\r\n      size: {\r\n        small: \"py-4 gap-6\",\r\n        medium: \"py-5 gap-7\",\r\n        large: \"py-6 gap-8\",\r\n      },\r\n      theme: {\r\n        minimal: \"\",\r\n        classic: \"hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50\",\r\n      },\r\n      highlight: {\r\n        true: \"\",\r\n        false: \"\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        theme: \"classic\",\r\n        highlight: true,\r\n        className: \"bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden shadow-2xl\",\r\n      },\r\n      {\r\n        theme: \"minimal\",\r\n        highlight: true,\r\n        className: \"bg-muted/30 shadow-lg\",\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      size: \"large\",\r\n      theme: \"minimal\",\r\n      highlight: false,\r\n    },\r\n  }\r\n);\r\n\r\nconst priceTextVariants = cva(\"font-bold\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-3xl\",\r\n      medium: \"text-4xl\",\r\n      large: \"text-5xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-6xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst priceSubTextVariants = cva(\"text-muted-foreground\", {\r\n  variants: {\r\n    size: {\r\n      small: \"mt-2\",\r\n      medium: \"mt-3\",\r\n      large: \"mt-3\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"font-medium\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst tableWrapperVariants = cva(\"relative w-full overflow-x-auto\", {\r\n  variants: {\r\n    size: {\r\n      small: \"mt-6\",\r\n      medium: \"mt-8\",\r\n      large: \"mt-10\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"mt-16 bg-card/30 backdrop-blur-sm rounded-xl border border-border/50 shadow-sm\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst featureIconVariants = cva(\"mx-auto\", {\r\n  variants: {\r\n    size: {\r\n      small: \"size-4\",\r\n      medium: \"size-5\",\r\n      large: \"size-5\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-emerald-500\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst firstColWidthVariants = cva(\"\", {\r\n  variants: {\r\n    size: {\r\n      small: \"w-[140px]\",\r\n      medium: \"w-[180px]\",\r\n      large: \"w-[200px]\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n  },\r\n});\r\n\r\nconst buttonVariants = cva(\"w-full hover:cursor-pointer transition-all duration-300\", {\r\n  variants: {\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"hover:shadow-xl active:scale-95\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nexport interface PricingTableTwoProps extends VariantProps<typeof sectionVariants> {\r\n  className?: string;\r\n  plans: Plan[];\r\n  title?: string;\r\n  description?: string;\r\n  onPlanSelect?: (planId: string) => void;\r\n}\r\n\r\nexport function PricingTableTwo({\r\n  className,\r\n  plans,\r\n  title,\r\n  description,\r\n  onPlanSelect,\r\n  size,\r\n  theme = \"minimal\"\r\n}: PricingTableTwoProps) {\r\n  const [isAnnually, setIsAnnually] = useState(false);\r\n\r\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\r\n    const monthly = parseFloat(monthlyPrice);\r\n    const yearly = parseFloat(yearlyPrice);\r\n\r\n    if (\r\n      monthlyPrice.toLowerCase() === \"custom\" ||\r\n      yearlyPrice.toLowerCase() === \"custom\" ||\r\n      isNaN(monthly) ||\r\n      isNaN(yearly) ||\r\n      monthly === 0\r\n    ) {\r\n      return 0;\r\n    }\r\n\r\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\r\n    return Math.round(discount);\r\n  }\r\n\r\n  const yearlyPriceDiscount = plans.length\r\n    ? Math.max(\r\n      ...plans.map((plan) =>\r\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\r\n      )\r\n    )\r\n    : 0;\r\n\r\n  return (\r\n    <section className={cn(sectionVariants({ size, theme }), className)}>\r\n      {/* Classic theme background elements */}\r\n      {theme === \"classic\" && (\r\n        <>\r\n          <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\r\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl\" />\r\n          <div className=\"absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl\" />\r\n        </>\r\n      )}\r\n\r\n      <div className=\"container max-w-5xl relative\">\r\n        <motion.div\r\n          className={cn(\r\n            \"flex flex-col items-center gap-4\",\r\n            theme === \"classic\" ? \"text-center\" : \"\"\r\n          )}\r\n          initial={{ opacity: 0 }}\r\n          whileInView={{ opacity: 1 }}\r\n          viewport={{ once: true }}\r\n          transition={{ duration: 0.6, ease: \"easeOut\" }}\r\n        >\r\n          <h2 className={cn(titleVariants({ size, theme }))}>\r\n            {title || \"We offer 3 plans\"}\r\n          </h2>\r\n\r\n          <p className={cn(descriptionVariants({ size, theme }))}>\r\n            {description || \"Lorem ipsum dolor sit amet consectetur adipisicing.\"}\r\n          </p>\r\n        </motion.div>\r\n\r\n        {/* Monthly/Yearly Toggle */}\r\n        <div className={cn(toggleWrapperVariants({ size, theme }))}>\r\n          <span className={cn(\r\n            toggleLabelVariants({ size, theme }),\r\n            !isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\r\n          )}>\r\n            Monthly\r\n          </span>\r\n          <Switch\r\n            checked={isAnnually}\r\n            onCheckedChange={setIsAnnually}\r\n            className={cn(switchScaleVariants({ size, theme }))}\r\n          />\r\n          <span className={cn(\r\n            toggleLabelVariants({ size, theme }),\r\n            isAnnually ? \"text-foreground\" : \"text-muted-foreground\"\r\n          )}>\r\n            Yearly\r\n          </span>\r\n        </div>\r\n\r\n        <div className=\"flex justify-center\">\r\n          {yearlyPriceDiscount > 0 && (\r\n            <motion.span\r\n              className={cn(\r\n                \"text-xs mt-2 text-muted-foreground\",\r\n                theme === \"classic\" && \"text-emerald-500 font-medium\"\r\n              )}\r\n              initial={{ opacity: 0 }}\r\n              whileInView={{ opacity: 1 }}\r\n              viewport={{ once: true }}\r\n              transition={{ duration: 0.5, delay: 0.2 }}\r\n            >\r\n              Save upto {yearlyPriceDiscount}% with yearly plan\r\n            </motion.span>\r\n          )}\r\n        </div>\r\n\r\n        <div className={cn(\r\n          plansWrapperVariants({ size, theme }),\r\n          \"gap-4 md:gap-0\",\r\n          plans.length === 1 && \"flex-col max-w-md mx-auto\",\r\n          plans.length === 2 && \"flex-col md:flex-row max-w-4xl mx-auto\",\r\n          plans.length >= 3 && \"flex-col lg:flex-row max-w-7xl mx-auto\"\r\n        )}>\r\n          {plans.map((plan: Plan, index: number) => (\r\n            <motion.div\r\n              key={plan.id}\r\n              className={cn(\r\n                cardVariants({\r\n                  size,\r\n                  theme,\r\n                  highlight: plan.highlight\r\n                }),\r\n                index === 0 && \"md:rounded-l-xl md:border-r-0\",\r\n                index === plans.length - 1 && \"md:rounded-r-xl md:border-l-0\",\r\n                index > 0 && index < plans.length - 1 && \"md:border-l-0 md:border-r-0\",\r\n                plans.length === 1 && \"rounded-xl\"\r\n              )}\r\n              initial={{ opacity: 0 }}\r\n              whileInView={{ opacity: 1 }}\r\n              viewport={{ once: true }}\r\n              transition={{ duration: 0.6, ease: \"easeOut\", delay: index * 0.15 }}\r\n            >\r\n              <div className=\"grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6\">\r\n                <div className=\"flex items-center gap-2 justify-center\">\r\n                  <div className={cn(\r\n                    \"leading-none font-semibold\",\r\n                    theme === \"classic\" && \"text-lg font-bold\"\r\n                  )}>\r\n                    {plan.title}\r\n                  </div>\r\n                </div>\r\n                <p className={cn(\r\n                  \"text-muted-foreground text-center\",\r\n                  theme === \"classic\" && \"text-foreground/80\"\r\n                )}>\r\n                  {plan.description}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"px-6\">\r\n                <AnimatePresence mode=\"wait\">\r\n                  {isAnnually ? (\r\n                    <motion.div\r\n                      key=\"yearly\"\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      exit={{ opacity: 0, y: -10 }}\r\n                      transition={{ duration: 0.3 }}\r\n                    >\r\n                      <span className={cn(priceTextVariants({ size, theme }))}>\r\n                        {parseFloat(plan.yearlyPrice) >= 0 && (\r\n                          <>{plan.currency}</>\r\n                        )}\r\n                        {plan.yearlyPrice}\r\n                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\r\n                          <span className={cn(\r\n                            \"text-xs ml-2\",\r\n                            theme === \"classic\" ? \"text-emerald-500 font-semibold\" : \"underline\"\r\n                          )}>\r\n                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\r\n                          </span>\r\n                        )}\r\n                      </span>\r\n                      <p className={cn(priceSubTextVariants({ size, theme }))}>per year</p>\r\n                    </motion.div>\r\n                  ) : (\r\n                    <motion.div\r\n                      key=\"monthly\"\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      exit={{ opacity: 0, y: -10 }}\r\n                      transition={{ duration: 0.3 }}\r\n                    >\r\n                      <span className={cn(priceTextVariants({ size, theme }))}>\r\n                        {parseFloat(plan.monthlyPrice) >= 0 && (\r\n                          <>{plan.currency}</>\r\n                        )}\r\n                        {plan.monthlyPrice}\r\n                      </span>\r\n                      <p className={cn(priceSubTextVariants({ size, theme }))}>per month</p>\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              </div>\r\n\r\n              <div className=\"flex items-center px-6\">\r\n                <Button\r\n                  className={cn(\r\n                    buttonVariants({ theme }),\r\n                    plan.highlight && theme === \"minimal\" && \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay\",\r\n                    plan.highlight && theme === \"classic\" && \"relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg border border-primary/20\"\r\n                  )}\r\n                  variant={plan.highlight ? \"default\" : \"secondary\"}\r\n                  onClick={() => onPlanSelect?.(plan.id)}\r\n                >\r\n                  {theme === \"classic\" && plan.highlight && (\r\n                    <Zap className=\"w-4 h-4 mr-1\" />\r\n                  )}\r\n                  {plan.buttonText}\r\n                  {theme === \"classic\" && plan.highlight && (\r\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700\" />\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n\r\n        <motion.div\r\n          className={cn(tableWrapperVariants({ size, theme }))}\r\n          initial={{ opacity: 0 }}\r\n          whileInView={{ opacity: 1 }}\r\n          viewport={{ once: true }}\r\n          transition={{ duration: 0.7, ease: \"easeOut\" }}\r\n        >\r\n          <Table className={cn(theme === \"classic\" && \"bg-transparent\")}>\r\n            <TableHeader>\r\n              <TableRow className={cn(theme === \"classic\" && \"border-border/30\")}>\r\n                <TableHead className={firstColWidthVariants({ size })}></TableHead>\r\n                {plans.map((plan: Plan) => (\r\n                  <TableHead key={plan.id} className={cn(\r\n                    \"text-center font-bold text-primary\",\r\n                    theme === \"classic\" && \"text-lg\"\r\n                  )}>\r\n                    {plan.title}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {(() => {\r\n                const allFeatures = new Set<string>();\r\n                plans.forEach(plan => {\r\n                  plan.features.forEach(feature => {\r\n                    allFeatures.add(feature.name);\r\n                  });\r\n                });\r\n                return Array.from(allFeatures).map((featureName, featureIndex) => (\r\n                  <TableRow key={featureIndex} className={cn(\r\n                    theme === \"classic\" && \"border-border/20 hover:bg-muted/30\"\r\n                  )}>\r\n                    <TableCell className={cn(\r\n                      \"font-medium text-left\",\r\n                      theme === \"classic\" && \"font-semibold text-foreground/90\"\r\n                    )}>\r\n                      {featureName}\r\n                    </TableCell>\r\n                    {plans.map((plan: Plan) => {\r\n                      const feature = plan.features.find(f => f.name === featureName);\r\n                      return (\r\n                        <TableCell key={plan.id} className=\"text-center\">\r\n                          {feature ? (\r\n                            feature.icon === \"check\" ? (\r\n                              <Check className={cn(featureIconVariants({ size, theme }))} />\r\n                            ) : feature.icon === \"minus\" ? (\r\n                              <Minus className={cn(featureIconVariants({ size, theme }))} />\r\n                            ) : (\r\n                              <span className={cn(\r\n                                \"text-sm text-muted-foreground\",\r\n                                theme === \"classic\" && \"font-medium text-foreground/70\"\r\n                              )}>\r\n                                {feature.name}\r\n                              </span>\r\n                            )\r\n                          ) : (\r\n                            <Minus className={cn(featureIconVariants({ size, theme }))} />\r\n                          )}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                ));\r\n              })()}\r\n            </TableBody>\r\n          </Table>\r\n        </motion.div>\r\n      </div>\r\n    </section>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-two-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { plans } from \"@/lib/billingsdk-config\";\r\nimport { PricingTableTwo } from \"@/components/billingsdk/pricing-table-two\";\r\n\r\nexport function PricingTableTwoDemo() {\r\n    return <>\r\n        <PricingTableTwo plans={plans} className=\"w-full max-w-4xl mx-auto\"\r\n            title={`We offer ${plans.length} plans`}\r\n            description=\"Choose the plan that's right for you\"\r\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\r\n            size=\"small\" // small, medium, large\r\n            theme=\"classic\" // minimal or classic\r\n        />\r\n    </>\r\n} ",
      "type": "registry:component",
      "target": "components/pricing-table-two-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}