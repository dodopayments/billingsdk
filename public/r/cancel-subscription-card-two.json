{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "cancel-subscription-card-two",
  "type": "registry:block",
  "title": "Cancel Subscription Card",
  "description": "A modern cancel subscription card component",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/cancel-subscription-card-two.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { type Plan } from \"@/lib/billingsdk-config\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { ChevronDown, Circle } from \"lucide-react\";\r\nimport { BiSupport } from \"react-icons/bi\";\r\n\r\nexport interface CancelSubscriptionCardTwoProps {\r\n    title: string;\r\n    description: string;\r\n    plan: Plan;\r\n    warningText?: string;\r\n    supportText?: string;\r\n    supportLink?:string;\r\n    keepButtonText?: string;\r\n    continueButtonText?: string;\r\n    finalTitle?: string;\r\n    finalSubtitle?: string;\r\n    goBackButtonText?: string;\r\n    confirmButtonText?: string;\r\n    onCancel: (planId: string) => Promise<void> | void;\r\n    onKeepSubscription?: (planId: string) => Promise<void> | void;\r\n    className?: string;\r\n}\r\n\r\nexport function CancelSubscriptionCardTwo({\r\n    title,\r\n    description,\r\n    plan,\r\n    warningText,\r\n    supportText,\r\n    keepButtonText,\r\n    continueButtonText,\r\n    finalTitle,\r\n    finalSubtitle,\r\n    supportLink,\r\n    goBackButtonText,\r\n    confirmButtonText,\r\n    onCancel,\r\n    onKeepSubscription,\r\n    className,\r\n}: CancelSubscriptionCardTwoProps) {\r\n    const [showFinalConfirmation, setShowFinalConfirmation] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [showBenefits, setShowBenefits] = useState(true); // collapse \r\n\r\n    const handleContinueCancellation = () => {\r\n        setShowFinalConfirmation(true);\r\n        setError(null);\r\n    };\r\n\r\n    const handleKeepSubscription = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            if (onKeepSubscription) {\r\n                await onKeepSubscription(plan.id);\r\n            }\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'Failed to keep subscription');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setShowFinalConfirmation(false);\r\n        setError(null);\r\n    };\r\n\r\n    const handleConfirmCancellation = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            setError(null);\r\n            if (onCancel) {\r\n                await onCancel(plan.id);\r\n            }\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : 'Failed to cancel subscription');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card className={cn(\"max-w-2xl mx-auto w-full\", className)}>\r\n            <CardHeader className=\"space-y-4\">\r\n                <CardTitle className=\"text-lg sm:text-xl\">{title}</CardTitle>\r\n                <p className=\"text-sm text-muted-foreground\">{description}</p>\r\n                {error && (\r\n                    <div className=\"p-3 bg-destructive/10 border border-destructive/20 rounded-md\">\r\n                        <p className=\"text-sm text-destructive\">{error}</p>\r\n                    </div>\r\n                )}\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6\">\r\n              \r\n                {/* Subscription Details */}\r\n                {!showFinalConfirmation && (\r\n                    <div className=\"flex flex-col gap-4 p-4 bg-muted/50 rounded-lg\">\r\n                        <div className=\"flex items-center justify-between\">\r\n                            <div className=\"flex flex-col gap-1\">\r\n                                <span className=\"font-semibold text-lg\">{plan.title} Plan</span>\r\n                                <span className=\"text-sm text-muted-foreground\">Current subscription</span>\r\n                            </div>\r\n                            <Badge variant=\"secondary\">\r\n                                {parseFloat(plan.monthlyPrice) >= 0 ? `${plan.currency}${plan.monthlyPrice}/monthly` : `${plan.monthlyPrice}/monthly`}\r\n                            </Badge>\r\n                        </div>\r\n                        <div className=\"flex flex-col gap-2\">\r\n                            <Button \r\n                                variant=\"ghost\"\r\n                                className=\"w-full justify-between p-0 h-auto font-medium text-sm hover:bg-transparent\"\r\n                                onClick={() => setShowBenefits(!showBenefits)}\r\n                            >\r\n                                <span>Your Current Plan Benefits</span>\r\n                                <ChevronDown className={cn(\"w-4 h-4 transition-transform\", showBenefits && \"rotate-180\")} />\r\n                            </Button>\r\n                            {showBenefits && (\r\n                                <div className=\"space-y-2 pl-2\">\r\n                                    {plan.features.slice(0, 4).map((feature, index) => (\r\n                                        <div key={index} className=\"flex items-center gap-2\">\r\n                                            <Circle className=\"w-2 h-2 fill-primary text-primary\" />\r\n                                            <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* Support Section */}\r\n                {!showFinalConfirmation && (supportText || supportLink) && (\r\n                    <div className=\"rounded-lg border p-4 bg-muted/10\">\r\n                        {supportText && (\r\n                            <p className=\"text-sm text-muted-foreground mb-3\">{supportText}</p>\r\n                        )}\r\n                        {supportLink && (\r\n                            <div className=\"flex items-center gap-2\">\r\n                                <BiSupport className=\"w-4 h-4 text-muted-foreground\" />\r\n                                <a \r\n                                    href={supportLink}\r\n                                    className=\"text-sm text-muted-foreground hover:text-primary transition-colors\"\r\n                                >\r\n                                    Contact Support\r\n                                </a>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n\r\n                {!showFinalConfirmation ? (\r\n                    <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                        <Button\r\n                            className=\"flex-1\"\r\n                            onClick={handleKeepSubscription}\r\n                            disabled={isLoading}\r\n                        >\r\n                            {isLoading ? \"Processing...\" : (keepButtonText || \"Keep My Subscription\")}\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"destructive\"\r\n                            className=\"flex-1\"\r\n                            onClick={handleContinueCancellation}\r\n                            disabled={isLoading}\r\n                        >\r\n                            {continueButtonText || \"Continue Cancellation\"}\r\n                        </Button>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        <div className=\"text-center p-4 bg-muted/50 rounded-lg\">\r\n                            <h3 className=\"font-semibold mb-2 text-foreground\">\r\n                                {finalTitle || \"Final Step - Confirm Cancellation\"}\r\n                            </h3>\r\n                            <p className=\"text-sm text-muted-foreground mb-2\">\r\n                                {finalSubtitle || \"You'll lose access to all Pro features and your data will be permanently deleted after 30 days.\"}\r\n                            </p>\r\n                            <p className=\"text-sm text-destructive\">\r\n                                {warningText || \"This action cannot be undone and you'll lose access to all premium features.\"}\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"flex flex-col sm:flex-row gap-3\">\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                className=\"flex-1\"\r\n                                onClick={handleBack}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {goBackButtonText || \"Go Back\"}\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"destructive\"\r\n                                className=\"flex-1\"\r\n                                onClick={handleConfirmCancellation}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? \"Cancelling...\" : (confirmButtonText || \"Yes, Cancel Subscription\")}\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/cancel-subscription-card-two.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/cancel-subscription-card-two-demo.tsx",
      "content": "\"use client\";\r\n\r\nimport { CancelSubscriptionCardTwo } from \"@/components/billingsdk/cancel-subscription-card-two\";\r\nimport { plans } from \"@/lib/billingsdk-config\";\r\n\r\n\r\nexport function CancelSubscriptionCardTwoDemo() {\r\n    return(\r\n        <div className=\"flex flex-1 flex-col justify-center items-center p-4 min-h-[400px]\">\r\n            <CancelSubscriptionCardTwo\r\n                title=\"We're sorry to see you go...\"\r\n                description={`Before you cancel, we hope you'll consider upgrading to a ${plans[1].title} plan again.`}\r\n                plan={plans[1]}\r\n                warningText=\"If you cancel your subscription, you will lose access to your account and all your data will be deleted.\"\r\n                supportText=\"Need help? Our team is here to assist you.\"\r\n                supportLink=\"https://google.com/\"\r\n                finalTitle=\"Final Step - Confirm Cancellation\"\r\n                finalSubtitle=\"You'll lose access to all Pro features and your data will be permanently deleted after 30 days.\"\r\n                keepButtonText={`Keep My ${plans[1].title} Plan`}\r\n                continueButtonText=\"Continue with Cancellation\"\r\n                goBackButtonText=\"Wait, Go Back\"\r\n                confirmButtonText=\"Yes, Cancel My Subscription\"\r\n                onCancel={async (planId) => {\r\n                    console.log('cancel subscription', planId);\r\n                    return new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve(void 0);\r\n                        }, 2000); \r\n                    });\r\n                }}\r\n                onKeepSubscription={async (planId) => {\r\n                    console.log('keep subscription', planId);\r\n                    return new Promise((resolve) => {\r\n                        setTimeout(() => {\r\n                            resolve(void 0);\r\n                        }, 1000);\r\n                    });\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/cancel-subscription-card-two-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}