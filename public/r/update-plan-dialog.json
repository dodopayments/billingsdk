{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-plan-dialog",
  "type": "registry:block",
  "title": "Update Plan Dialog",
  "description": "A update plan dialog component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "radio-group",
    "toggle",
    "label",
    "dialog",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/update-plan-dialog.tsx",
      "content": "'use client';\n\nimport { motion, AnimatePresence } from \"motion/react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\nimport { Toggle } from \"@/components/ui/toggle\"\nimport { Label } from \"@/components/ui/label\"\nimport { type Plan } from \"@/lib/billingsdk-config\"\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\"\nimport { useState } from \"react\"\nimport { useTheme } from \"@/contexts/theme-context\"\nimport { getThemeStyles } from \"@/lib/themes\"\n\nexport interface UpdatePlanDialogProps {\n    currentPlan: Plan\n    plans: Plan[]\n    triggerText: string\n    onPlanChange: (planId: string) => void\n    className?: string\n    title?: string\n}\n\nexport function UpdatePlanDialog({ currentPlan, plans, onPlanChange, className, title, triggerText }: UpdatePlanDialogProps) {\n    const [isYearly, setIsYearly] = useState(false);\n    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined);\n    const [isOpen, setIsOpen] = useState(false);\n    const { currentTheme, previewDarkMode } = useTheme();\n    const themeStyles = getThemeStyles(currentTheme, previewDarkMode);\n\n    const getCurrentPrice = (plan: Plan) =>\n        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`\n\n    const handlePlanChange = (planId: string) => {\n        setSelectedPlan(planId)\n    }\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <DialogTrigger asChild>\n                <Button>{triggerText || \"Update Plan\"}</Button>\n            </DialogTrigger>\n            <DialogContent className={cn(\"space-y-3 max-h-[90vh] flex flex-col text-foreground\", className)} style={themeStyles}>\n                <DialogHeader className=\"flex flex-row items-center justify-between py-2\">\n                    <DialogTitle className=\"text-base font-semibold\">\n                        {title || \"Upgrade Plan\"}\n                    </DialogTitle>\n                    <div className=\"flex items-center gap-2 text-sm\">\n                        <Toggle\n                            size=\"sm\"\n                            pressed={!isYearly}\n                            onPressedChange={(pressed) => setIsYearly(!pressed)}\n                            className=\"px-3\"\n                        >\n                            Monthly\n                        </Toggle>\n                        <Toggle\n                            pressed={isYearly}\n                            onPressedChange={(pressed) => setIsYearly(pressed)}\n                            className=\"px-3\"\n                        >\n                            Yearly\n                        </Toggle>\n                    </div>\n                </DialogHeader>\n                <div className=\"flex-1 min-h-0 space-y-3\">\n                    <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>\n                        <AnimatePresence mode=\"wait\">\n                            {plans.map((plan) => (\n                                <motion.div\n                                    key={plan.id}\n                                    onClick={() => handlePlanChange(plan.id)}\n                                    className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id\n                                        ? \"border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md\"\n                                        : \"border-border hover:border-primary/50\"\n                                        }`}\n                                >\n                                    <div className=\"flex items-start justify-between gap-3\">\n                                        <div className=\"flex gap-3 min-w-0 flex-1\">\n                                            <RadioGroupItem\n                                                value={plan.id}\n                                                id={plan.id}\n                                                className=\"flex-shrink-0 pointer-events-none\"\n                                            />\n                                            <div className=\"min-w-0 flex-1\">\n                                                <div className=\"flex items-center gap-2 flex-wrap\">\n                                                    <Label\n                                                        htmlFor={plan.id}\n                                                        className=\"font-medium cursor-pointer\"\n                                                    >\n                                                        {plan.title}\n                                                    </Label>\n                                                    {plan.badge && (\n                                                        <Badge variant=\"secondary\" className=\"flex-shrink-0\">{plan.badge}</Badge>\n                                                    )}\n                                                </div>\n                                                <p className=\"text-xs text-muted-foreground mt-1\">\n                                                    {plan.description}\n                                                </p>\n                                                {plan.features.length > 0 && (\n                                                    <div className=\"pt-3\">\n                                                        <div className=\"flex flex-wrap gap-2\">\n                                                            {plan.features.map((feature, featureIndex) => (\n                                                                <div\n                                                                    key={featureIndex}\n                                                                    className=\"flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0\"\n                                                                >\n                                                                    <div className=\"w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0\" />\n                                                                    <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\n                                                                        {feature.name}\n                                                                    </span>\n                                                                </div>\n                                                            ))}\n                                                        </div>\n                                                    </div>\n                                                )}\n                                            </div>\n                                        </div>\n                                        <div className=\"text-right flex-shrink-0\">\n                                            <div className=\"text-xl font-semibold\">\n                                                {\n                                                    parseFloat(getCurrentPrice(plan)) >= 0 ?\n                                                        `${plan.currency}${getCurrentPrice(plan)}` :\n                                                        getCurrentPrice(plan)\n                                                }\n                                            </div>\n                                            <div className=\"text-xs text-muted-foreground\">\n                                                /{isYearly ? \"year\" : \"month\"}\n                                            </div>\n                                        </div>\n                                    </div>\n                                    <AnimatePresence>\n                                        {selectedPlan === plan.id && (\n                                            <motion.div\n                                                initial={{ opacity: 0, height: 0, y: -10 }}\n                                                animate={{ opacity: 1, height: \"auto\", y: 0 }}\n                                                exit={{ opacity: 0, height: 0, y: -10 }}\n                                                transition={{ duration: 0.3, ease: \"easeOut\" }}\n                                            >\n                                                <Button className=\"w-full mt-4\"\n                                                    disabled={selectedPlan === currentPlan.id}\n                                                    onClick={() => {\n                                                        onPlanChange(plan.id)\n                                                        setIsOpen(false)\n                                                    }}\n                                                >{selectedPlan === currentPlan.id ? \"Current Plan\" : \"Upgrade\"}</Button>\n                                            </motion.div>\n                                        )}\n                                    </AnimatePresence>\n                                </motion.div>\n                            ))}\n                        </AnimatePresence>\n                    </RadioGroup>\n                </div>\n            </DialogContent>\n        </Dialog>\n\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/update-plan-dialog.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/update-plan-dialog-demo.tsx",
      "content": "'use client'\n\nimport { UpdatePlanDialog } from '@/components/billingsdk/update-plan-dialog';\nimport { plans } from '@/lib/billingsdk-config';\n\nexport function UpdatePlanDialogDemo() {\n\n  return (\n    <div className=\"flex flex-1 flex-col justify-center text-center p-4 mx-auto min-h-[300px]\">\n      <UpdatePlanDialog\n        currentPlan={plans[1]}\n        plans={plans}\n        onPlanChange={(planId) => {\n          console.log(planId)\n        }}\n        triggerText=\"Update Plan\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component",
      "target": "components/update-plan-dialog-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}