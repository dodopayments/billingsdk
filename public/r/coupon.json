{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "coupon",
  "type": "registry:block",
  "title": "Coupon Generator",
  "description": "A coupon code generator component for billing and promotional purposes",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "button",
    "input",
    "switch",
    "label",
    "select"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/coupon.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport {\r\n    Select,\r\n    SelectContent,\r\n    SelectGroup,\r\n    SelectItem,\r\n    SelectLabel,\r\n    SelectTrigger,\r\n    SelectValue,\r\n} from \"@/components/ui/select\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { ArrowLeft, Copy, Scissors, Share2 } from \"lucide-react\"\r\nimport { ChangeEvent, useState } from \"react\"\r\n\r\nexport interface CouponGeneratorProps {\r\n    companyName: string\r\n    applicableOptions?: { label: string; value: string }[]\r\n    onGenerate: (couponData: {\r\n        code: string\r\n        discount: number\r\n        rule: string\r\n        startDate?: string\r\n        endDate?: string\r\n    }) => void\r\n    onCopy?: (code: string) => void\r\n    onShare?: (code: string) => void\r\n    className?: string\r\n    cardClassName?: string\r\n    generateButtonClassName?: string\r\n    defaultCode?: string\r\n}\r\n\r\nexport function CouponGenerator({\r\n    companyName,\r\n    applicableOptions = [],\r\n    onGenerate,\r\n    onCopy,\r\n    onShare,\r\n    className,\r\n    cardClassName,\r\n    generateButtonClassName,\r\n    defaultCode,\r\n}: CouponGeneratorProps) {\r\n    const [enabled, setEnabled] = useState(false)\r\n    const [startDate, setStartDate] = useState(\"\")\r\n    const [endDate, setEndDate] = useState(\"\")\r\n    const [generated, setGenerated] = useState(false)\r\n    const [customCode, setCustomCode] = useState(\"DODO20\")\r\n    const [discount, setDiscount] = useState<number | \"\">(20)\r\n    const [discountError, setDiscountError] = useState(\"\")\r\n    const [selectedRule, setSelectedRule] = useState(\"\")\r\n    const [generatedCouponCode, setGeneratedCouponCode] = useState(\"\")\r\n    const [dateError, setDateError] = useState(\"\")\r\n\r\n    const isDateValid = startDate && endDate && new Date(startDate) < new Date(endDate);\r\n\r\n    const isDiscountValid = discount !== \"\" && !isNaN(Number(discount)) && Number(discount) >= 0 && Number(discount) <= 100;\r\n\r\n    const isFormValid =\r\n        selectedRule.trim() !== \"\" &&\r\n        startDate.trim() !== \"\" &&\r\n        endDate.trim() !== \"\" &&\r\n        isDateValid &&\r\n        isDiscountValid;\r\n\r\n    function generateCouponCode() {\r\n        let rnd = Math.floor(Math.random() * 1_000_000);\r\n        if (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\") {\r\n            const arr = new Uint32Array(1);\r\n            crypto.getRandomValues(arr);\r\n            rnd = arr[0] % 1_000_000;\r\n        }\r\n        return `COUPON${rnd.toString().padStart(6, \"0\")}`;\r\n    }\r\n\r\n    const handleGenerate = () => {\r\n        let valid = true;\r\n\r\n        if (!selectedRule.trim() || !startDate.trim() || !endDate.trim()) {\r\n            setDateError(\"Please fill in all required fields: Applicable rule, Start date, and End date\");\r\n            valid = false;\r\n        } else if (!isDateValid) {\r\n            setDateError(\"Start date must be before end date.\");\r\n            valid = false;\r\n        } else {\r\n            setDateError(\"\");\r\n        }\r\n\r\n        if (discount === \"\" || isNaN(Number(discount))) {\r\n            setDiscountError(\"Discount must be a number.\");\r\n            valid = false;\r\n        } else if (Number(discount) < 0) {\r\n            setDiscountError(\"Discount cannot be negative.\");\r\n            valid = false;\r\n        } else if (Number(discount) > 100) {\r\n            setDiscountError(\"Discount cannot exceed 100%.\");\r\n            valid = false;\r\n        } else {\r\n            setDiscountError(\"\");\r\n        }\r\n\r\n        if (!valid) return;\r\n\r\n        let code: string\r\n        if (enabled && customCode.trim()) {\r\n            code = customCode.trim()\r\n        } else if (defaultCode) {\r\n            code = defaultCode\r\n        } else {\r\n            code = generateCouponCode();\r\n        }\r\n\r\n        const couponData = {\r\n            code,\r\n            discount: Number(discount),\r\n            rule: selectedRule,\r\n            startDate,\r\n            endDate,\r\n        }\r\n\r\n        setGeneratedCouponCode(code)\r\n        onGenerate(couponData)\r\n        setGenerated(true)\r\n    }\r\n\r\n    const handleDiscountChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        const value = e.target.value;\r\n        if (value === \"\") {\r\n            setDiscount(\"\");\r\n            setDiscountError(\"\");\r\n            return;\r\n        }\r\n        const num = Number(value);\r\n        if (isNaN(num)) {\r\n            setDiscountError(\"Discount must be a number.\");\r\n        } else if (num < 0) {\r\n            setDiscountError(\"Discount cannot be negative.\");\r\n        } else if (num > 100) {\r\n            setDiscountError(\"Discount cannot exceed 100%.\");\r\n        } else {\r\n            setDiscountError(\"\");\r\n        }\r\n        setDiscount(num); \r\n    };\r\n\r\n    return (\r\n        <div className={className}>\r\n            {generated ? (\r\n                <Card\r\n                    className={`w-full max-w-md animate-in fade-in-0 slide-in-from-bottom-4 duration-700 \r\n                    bg-background text-foreground\r\n                    border border-border shadow-2xl \r\n                    ${cardClassName || \"\"}`}\r\n                >\r\n                    <CardContent className=\"p-0\">\r\n                        <div className=\"relative overflow-hidden\">\r\n                            <div className=\"bg-zinc-900 dark:bg-zinc-100 p-6 relative\">\r\n                                <div className=\"absolute top-0 left-0 w-full h-full opacity-5\">\r\n                                    <div className=\"w-full h-full bg-[repeating-linear-gradient(45deg,transparent,transparent_10px,rgba(255,255,255,0.1)_10px,rgba(255,255,255,0.1)_20px)]\"></div>\r\n                                </div>\r\n                                <div className=\"relative z-10 text-center\">\r\n                                    <div className=\"inline-flex items-center gap-2 mb-2\">\r\n                                        <Scissors className=\"w-4 h-4 text-white dark:text-zinc-900\" />\r\n                                        <span className=\"text-xs font-medium text-zinc-400 dark:text-zinc-600 uppercase tracking-wider\">\r\n                                            Coupon\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className=\"text-3xl font-bold text-white dark:text-zinc-900 tracking-tight mb-1\">\r\n                                        {generatedCouponCode}\r\n                                    </div>\r\n                                    <div className=\"text-sm text-zinc-300 dark:text-zinc-700 font-medium\">{companyName}</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"p-6 bg-white dark:bg-zinc-900\">\r\n                                <div className=\"text-center space-y-2\">\r\n                                    <div className=\"text-2xl font-bold text-zinc-900 dark:text-white\">{discount}% OFF</div>\r\n                                    <div className=\"text-sm text-zinc-600 dark:text-zinc-400\">\r\n                                        Valid until {endDate}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-zinc-50 dark:bg-zinc-950 rounded-full -ml-3 border-2 border-zinc-200 dark:border-zinc-800\"></div>\r\n                            <div className=\"absolute right-0 top-1/2 transform -translate-y-1/2 w-6 h-6 bg-zinc-50 dark:bg-zinc-950 rounded-full -mr-3 border-2 border-zinc-200 dark:border-zinc-800\"></div>\r\n                        </div>\r\n                    </CardContent>\r\n\r\n                    <CardFooter className=\"flex justify-between items-center p-4 border-t border-border\">\r\n                        <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => setGenerated(false)}\r\n                            className=\"text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\"\r\n                        >\r\n                            <ArrowLeft className=\"w-4 h-4 mr-1\" />\r\n                            Back\r\n                        </Button>\r\n                        <div className=\"flex gap-2\">\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => onCopy?.(generatedCouponCode)}\r\n                                className=\"border-border hover:bg-muted transition-colors bg-transparent\"\r\n                            >\r\n                                <Copy className=\"w-4 h-4 mr-1\" />\r\n                                Copy\r\n                            </Button>\r\n                            <Button\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => onShare?.(generatedCouponCode)}\r\n                                className=\"border-border hover:bg-muted transition-colors bg-transparent\"\r\n                            >\r\n                                <Share2 className=\"w-4 h-4 mr-1\" />\r\n                                Share\r\n                            </Button>\r\n                        </div>\r\n                    </CardFooter>\r\n                </Card>\r\n            ) : (\r\n                <Card\r\n                    className={`w-full max-w-md animate-in fade-in-0 slide-in-from-bottom-4 duration-700 \r\n                    bg-background text-foreground\r\n                    border border-border shadow-2xl \r\n                    ${cardClassName || \"\"}`}\r\n                >\r\n                    <CardHeader className=\"pb-4\">\r\n                        <CardTitle className=\"text-xl font-semibold text-center\">\r\n                            Create Coupon Code\r\n                        </CardTitle>\r\n                    </CardHeader>\r\n\r\n                    <div className=\"h-px bg-border mx-6\"></div>\r\n\r\n                    <CardContent className=\"space-y-6 p-6\">\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <div className=\"space-y-2\">\r\n                                <Label htmlFor=\"discount\" className=\"text-sm font-medium\">\r\n                                    Discount (%)\r\n                                </Label>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    id=\"discount\"\r\n                                    value={discount}\r\n                                    onChange={handleDiscountChange}\r\n                                    min={0}\r\n                                    max={100}\r\n                                    className=\"bg-background border-border text-foreground\"\r\n                                />\r\n                                {discountError && (\r\n                                    <div className=\"text-sm text-red-500\">{discountError}</div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"space-y-2\">\r\n                                <Label htmlFor=\"applicable\" className=\"text-sm font-medium\">\r\n                                    Applicable to <span className=\"text-red-500\">*</span>\r\n                                </Label>\r\n                                <Select value={selectedRule} onValueChange={setSelectedRule}>\r\n                                    <SelectTrigger className=\"bg-background border-border text-foreground\">\r\n                                        <SelectValue placeholder=\"Select rule\" />\r\n                                    </SelectTrigger>\r\n                                    <SelectContent>\r\n                                        <SelectGroup>\r\n                                            <SelectLabel>Rules</SelectLabel>\r\n                                            {applicableOptions.map((option) => (\r\n                                                <SelectItem\r\n                                                    key={option.value}\r\n                                                    value={option.value}\r\n                                                    className=\"text-foreground hover:bg-muted\"\r\n                                                >\r\n                                                    {option.label}\r\n                                                </SelectItem>\r\n                                            ))}\r\n                                        </SelectGroup>\r\n                                    </SelectContent>\r\n                                </Select>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"space-y-3\">\r\n                            <Label className=\"text-sm font-medium\">\r\n                                Validity Period <span className=\"text-red-500\">*</span>\r\n                            </Label>\r\n                            <div className=\"grid grid-cols-2 gap-3\">\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"start-date\" className=\"text-xs\">\r\n                                        Start Date\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        id=\"start-date\"\r\n                                        value={startDate}\r\n                                        onChange={(e) => setStartDate(e.target.value)}\r\n                                        className=\"bg-background border-border text-foreground\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"space-y-2\">\r\n                                    <Label htmlFor=\"end-date\" className=\"text-xs\">\r\n                                        End Date\r\n                                    </Label>\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        id=\"end-date\"\r\n                                        value={endDate}\r\n                                        onChange={(e) => setEndDate(e.target.value)}\r\n                                        className=\"bg-background border-border text-foreground\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            {dateError && (\r\n                                <div className=\"text-sm text-red-500 mt-2\">{dateError}</div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <div className=\"space-y-3\">\r\n                            <div className=\"flex items-center space-x-3\">\r\n                                <Switch\r\n                                    id=\"custom-code\"\r\n                                    checked={enabled}\r\n                                    onCheckedChange={setEnabled}\r\n                                    className=\"data-[state=checked]:bg-zinc-900 data-[state=unchecked]:bg-zinc-200 dark:data-[state=checked]:bg-zinc-100 dark:data-[state=unchecked]:bg-zinc-700\"\r\n                                />\r\n                                <Label htmlFor=\"custom-code\" className=\"text-sm font-medium\">\r\n                                    Custom Code\r\n                                </Label>\r\n                            </div>\r\n                            {enabled && (\r\n                                <Input\r\n                                    className=\"bg-background border-border text-foreground\"\r\n                                    placeholder=\"DODO20\"\r\n                                    value={customCode}\r\n                                    onChange={(e) => setCustomCode(e.target.value)}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </CardContent>\r\n\r\n                    <CardFooter className=\"flex justify-end p-6 pt-0\">\r\n                        <Button\r\n                            onClick={handleGenerate}\r\n                            disabled={!isFormValid}\r\n                            className={`bg-zinc-900 dark:bg-zinc-100 text-white dark:text-zinc-900 hover:bg-zinc-800 dark:hover:bg-zinc-200 transition-all duration-200 hover:scale-[1.02] shadow-lg disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 disabled:bg-zinc-900 dark:disabled:bg-zinc-100 ${generateButtonClassName || \"\"}`}\r\n                        >\r\n                            Generate Coupon\r\n                        </Button>\r\n                    </CardFooter>\r\n                </Card>\r\n            )}\r\n        </div>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/coupon.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/coupon-demo.tsx",
      "content": "\r\n\"use client\"\r\n\r\nimport {CouponGenerator} from \"@/registry/billingsdk/coupon\"\r\n\r\nfunction generateRandomCode(length = 8) {\r\n  const chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\r\n  let result = \"\"\r\n  for (let i = 0; i < length; i++) {\r\n    result += chars.charAt(Math.floor(Math.random() * chars.length))\r\n  }\r\n  return result\r\n}\r\n\r\nexport function CouponDemo() {\r\n  const handleGenerate = (couponData: {\r\n    code: string\r\n    discount: number\r\n    rule: string\r\n    startDate?: string\r\n    endDate?: string\r\n  }) => {\r\n    console.log(\"Generated Coupon:\", couponData)\r\n  }\r\n\r\n  const handleCopy = (code: string) => {\r\n    console.log(\"Copied Coupon Code:\", code)\r\n    navigator.clipboard.writeText(code)\r\n  }\r\n\r\n  const handleShare = (code: string) => {\r\n    console.log(\"Sharing Coupon Code:\", code)\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-center items-center p-4 bg-background\">\r\n      <CouponGenerator\r\n        companyName=\"Dodopayments\"\r\n        applicableOptions={[\r\n          { label: \"For new users only\", value: \"new-users\" },\r\n          { label: \"For existing users only\", value: \"existing-users\" },\r\n          { label: \"For all users\", value: \"all-users\" },\r\n          { label: \"Premium subscribers\", value: \"premium-subscribers\" },\r\n        ]}\r\n        onGenerate={handleGenerate}\r\n        onCopy={handleCopy}\r\n        onShare={handleShare}\r\n        defaultCode={generateRandomCode()} \r\n      />\r\n    </div>\r\n  )\r\n}",
      "type": "registry:component",
      "target": "components/coupon-demo.tsx"
    }
  ]
}