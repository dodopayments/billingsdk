{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-meter-bar",
  "type": "registry:block",
  "title": "Usage Meter Bar",
  "description": "Per-model LLM usage with token counts, cache reads, and API cost",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card",
    "table",
    "utils",
    "badge"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-meter-bar.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { motion } from \"framer-motion\"\r\nimport { Card, CardContent } from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\n\r\nexport interface UsageMeterBarProps {\r\n  title: string\r\n  currentUsage: number\r\n  maxUsage: number\r\n  unit: string\r\n  description?: string\r\n  animation?: \"on\" | \"off\"\r\n}\r\n\r\nexport function UsageMeterBar({ title, currentUsage, maxUsage, unit, description, animation = \"on\" }: UsageMeterBarProps) {\r\n  const [animatedUsage, setAnimatedUsage] = useState(0)\r\n  const percentage = Math.min((currentUsage / maxUsage) * 100, 100)\r\n  const isAnimationOn = animation !== \"off\"\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setAnimatedUsage(currentUsage)\r\n    }, 100)\r\n    return () => clearTimeout(timer)\r\n  }, [currentUsage])\r\n\r\n  const getStatusColor = () => {\r\n    if (percentage >= 90) return \"bg-destructive\"\r\n    if (percentage >= 70) return \"bg-secondary\"\r\n    return \"bg-primary\"\r\n  }\r\n\r\n  const getStatusText = () => {\r\n    if (percentage >= 90) return \"Critical\"\r\n    if (percentage >= 70) return \"Warning\"\r\n    return \"Good\"\r\n  }\r\n\r\n  // Create segments for the wave-like meter\r\n  const segments = Array.from({ length: 20 }, (_, i) => {\r\n    const segmentPercentage = ((i + 1) / 20) * 100\r\n    const isActive = segmentPercentage <= percentage\r\n    const height = Math.sin((i / 20) * Math.PI * 2) * 8 + 24 // Wave pattern\r\n\r\n    return {\r\n      isActive,\r\n      height,\r\n      delay: i * 50, // Staggered animation\r\n    }\r\n  })\r\n\r\n  return (\r\n    <Card className=\"w-full max-w-sm sm:max-w-md lg:max-w-lg bg-card border-border shadow-lg\">\r\n      <CardContent className=\"p-3 sm:p-4\">\r\n        {/* Compact header info in single row */}\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <div className=\"flex items-center gap-2\">\r\n            <h3 className=\"text-sm sm:text-base font-semibold text-card-foreground\">{title}</h3>\r\n            <Badge\r\n              variant={percentage >= 90 ? \"destructive\" : percentage >= 70 ? \"secondary\" : \"default\"}\r\n              className=\"text-xs\"\r\n            >\r\n              {getStatusText()}\r\n            </Badge>\r\n          </div>\r\n          <div className=\"text-right\">\r\n            <span className=\"text-sm sm:text-base font-bold text-card-foreground\">\r\n              {animatedUsage.toLocaleString()}\r\n            </span>\r\n            <span className=\"text-xs text-muted-foreground ml-1\">\r\n              / {maxUsage.toLocaleString()} {unit}\r\n            </span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Wave-like Usage Meter - more compact */}\r\n        <div className=\"relative\">\r\n          <div className=\"flex items-end justify-center gap-0.5 sm:gap-1 h-6 sm:h-8 bg-transparent rounded-md p-1 overflow-hidden\">\r\n            {segments.map((segment, index) => (\r\n              <motion.div\r\n                key={index}\r\n                className={`\r\n                  flex-1 rounded-sm\r\n                  ${segment.isActive ? getStatusColor() : \"bg-muted/50\"}\r\n                `}\r\n                initial={{ scaleY: 0.3, height: `${segment.height * 0.3}px` }}\r\n                animate={\r\n                  isAnimationOn\r\n                    ? {\r\n                        scaleY: segment.isActive ? [0.3, 1, 0.7, 1] : 0.3,\r\n                        height: segment.isActive\r\n                          ? [\r\n                              `${segment.height * 0.3}px`,\r\n                              `${segment.height * 0.5}px`,\r\n                              `${segment.height * 0.4}px`,\r\n                              `${segment.height * 0.5}px`,\r\n                            ]\r\n                          : `${segment.height * 0.3}px`,\r\n                      }\r\n                    : {\r\n                        scaleY: segment.isActive ? 1 : 0.3,\r\n                        height: segment.isActive\r\n                          ? `${segment.height * 0.5}px`\r\n                          : `${segment.height * 0.3}px`,\r\n                      }\r\n                }\r\n                transition={{\r\n                  duration: isAnimationOn ? 2 : 0,\r\n                  repeat: isAnimationOn && segment.isActive ? Number.POSITIVE_INFINITY : 0,\r\n                  repeatType: \"reverse\",\r\n                  ease: \"easeInOut\",\r\n                  delay: isAnimationOn ? segment.delay / 1000 : 0,\r\n                }}\r\n              />\r\n            ))}\r\n          </div>\r\n\r\n          <motion.div\r\n            className=\"absolute inset-0 bg-transparent rounded-md\"\r\n            initial={{ x: \"-100%\" }}\r\n            animate={{ x: `${percentage - 100}%` }}\r\n            transition={{ duration: 1, ease: \"easeOut\" }}\r\n          />\r\n        </div>\r\n\r\n        {/* Compact usage info */}\r\n        <div className=\"flex justify-between items-center mt-2 text-xs sm:text-sm text-muted-foreground\">\r\n          <span>{percentage.toFixed(1)}% used</span>\r\n          <span>\r\n            {(maxUsage - currentUsage).toLocaleString()} {unit} remaining\r\n          </span>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/usage-meter-bar.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-meter-bar-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UsageMeterBar } from \"@/components/billingsdk/usage-meter-bar\";\r\n\r\nexport default function UsageMeterBarDemo() {\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 mx-auto w-full\">\r\n      <UsageMeterBar\r\n            title=\"Storage\"\r\n            currentUsage={45.2}\r\n            maxUsage={100}\r\n            unit=\"GB\"\r\n            description=\"Cloud storage capacity\"\r\n            animation=\"off\"\r\n          />\r\n    </div>\r\n\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/usage-meter-bar-demo.tsx"
    }
  ]
}