{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-forecast",
  "type": "registry:block",
  "title": "Usage Forecast",
  "description": "A smart usage forecasting component with trend analysis and cost projections",
  "dependencies": [
    "motion"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-forecast.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle,\n} from \"@/components/ui/card\"\nimport { Button } from \"@/components/ui/button\"\nimport { motion } from \"motion/react\"\nimport { useState } from \"react\"\n\nexport interface HistoricalUsage {\n    date: string\n    usage: number\n    cost?: number\n    isProjected?: boolean\n}\n\nexport interface UsageMetric {\n    name: string\n    currentUsage: number\n    limit: number\n    unitCost: number\n    currency?: string\n    historicalData: HistoricalUsage[]\n    unitName?: string\n}\n\nexport interface ForecastAlert {\n    type: \"warning\" | \"critical\" | \"info\"\n    message: string\n    suggestedAction?: string\n    costImpact?: number\n}\n\nexport interface UsageForecastProps {\n    metrics?: UsageMetric[]\n    forecastDays?: number\n    className?: string\n    size?: \"sm\" | \"md\" | \"lg\"\n    title?: string\n    description?: string\n    showCostProjection?: boolean\n    showChart?: boolean\n    alertThresholds?: number[]\n}\n\ninterface ForecastData {\n    projected: number\n    trend: \"up\" | \"down\" | \"stable\"\n    confidence: number\n    projectedCost: number\n    daysToLimit?: number\n    alerts: ForecastAlert[]\n}\n\nexport function UsageForecast({\n    metrics = [],\n    forecastDays = 30,\n    className,\n    size = \"md\",\n    title,\n    description,\n    showCostProjection = true,\n    showChart = true,\n    alertThresholds = [75, 90, 100],\n}: UsageForecastProps) {\n    const [selectedMetric, setSelectedMetric] = useState<number>(0)\n    \n    if (!metrics || !Array.isArray(metrics) || metrics.length === 0) {\n        return (\n            <Card className={cn(\"w-full\", className)}>\n                <CardContent className=\"flex items-center justify-center py-8\">\n                    <p className=\"text-muted-foreground text-sm\">No metrics data available</p>\n                </CardContent>\n            </Card>\n        )\n    }\n\n    const calculateTrend = (data: HistoricalUsage[]): number => {\n        if (data.length < 2) return 0\n        \n        const sortedData = [...data].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n        const recent = sortedData.slice(-7)\n        const older = sortedData.slice(-14, -7)\n        \n        if (recent.length === 0 || older.length === 0) return 0\n        \n        const recentAvg = recent.reduce((sum, d) => sum + d.usage, 0) / recent.length\n        const olderAvg = older.reduce((sum, d) => sum + d.usage, 0) / older.length\n        \n        if (olderAvg === 0 || !isFinite(olderAvg)) return 0\n        \n        const trendValue = ((recentAvg - olderAvg) / olderAvg) * 100\n        return isFinite(trendValue) ? trendValue : 0\n    }\n\n    const forecastMetric = (metric: UsageMetric): ForecastData => {\n        const trend = calculateTrend(metric.historicalData)\n        const dailyGrowth = isFinite(trend) ? trend / 100 / 7 : 0\n        const projected = Math.max(0, metric.currentUsage * (1 + dailyGrowth * forecastDays))\n        const projectedCost = projected * metric.unitCost\n        \n        const alerts: ForecastAlert[] = []\n        const projectedPercentage = metric.limit > 0 ? (projected / metric.limit) * 100 : 0\n\n        const applicableThresholds = alertThresholds.filter(threshold => projectedPercentage >= threshold)\n        const highestThreshold = Math.max(...applicableThresholds)\n        \n        if (applicableThresholds.length > 0 && metric.limit > 0) {\n            const type = highestThreshold >= 100 ? \"critical\" : highestThreshold >= 90 ? \"warning\" : \"info\"\n            const overage = Math.max(0, projected - metric.limit)\n            const overageCost = overage * metric.unitCost\n            \n            alerts.push({\n                type,\n                message: highestThreshold >= 100 \n                    ? `Projected to exceed limit by ${Math.round(overage).toLocaleString()} ${metric.unitName || 'units'}`\n                    : `Projected to reach ${Math.round(projectedPercentage)}% of limit`,\n                costImpact: highestThreshold >= 100 ? overageCost : 0,\n                suggestedAction: highestThreshold >= 100 \n                    ? \"Consider upgrading plan or optimizing usage\"\n                    : \"Monitor usage closely\"\n            })\n        }\n\n        const daysToLimit = (dailyGrowth > 0 && metric.currentUsage > 0 && metric.limit > metric.currentUsage) \n            ? Math.ceil((metric.limit - metric.currentUsage) / (metric.currentUsage * dailyGrowth))\n            : undefined\n\n        return {\n            projected,\n            trend: Math.abs(trend) < 2 ? \"stable\" : trend > 0 ? \"up\" : \"down\",\n            confidence: Math.min(100, Math.max(20, 100 - Math.abs(trend) * 2)),\n            projectedCost,\n            daysToLimit: daysToLimit && daysToLimit > 0 && daysToLimit < forecastDays * 2 ? daysToLimit : undefined,\n            alerts\n        }\n    }\n\n    const sizeConfig = {\n        sm: { text: \"text-xs\", title: \"text-sm\", spacing: \"p-3\", gap: \"gap-2\" },\n        md: { text: \"text-sm\", title: \"text-base\", spacing: \"p-4\", gap: \"gap-3\" },\n        lg: { text: \"text-base\", title: \"text-lg\", spacing: \"p-6\", gap: \"gap-4\" },\n    }\n\n    const config = sizeConfig[size]\n\n    const getTrendIcon = (trend: \"up\" | \"down\" | \"stable\") => {\n        const baseClasses = \"inline-flex items-center justify-center w-4 h-4 text-xs font-bold rounded-full border transition-colors duration-200\"\n        switch (trend) {\n            case \"up\": \n                return (\n                    <div className={cn(baseClasses, \"bg-red-50 text-red-600 border-red-200 dark:bg-red-950/30 dark:text-red-400 dark:border-red-800/50\")}>\n                        <svg className=\"w-2.5 h-2.5\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                            <path d=\"M8 2L14 8H10V14H6V8H2L8 2Z\" />\n                        </svg>\n                    </div>\n                )\n            case \"down\": \n                return (\n                    <div className={cn(baseClasses, \"bg-green-50 text-green-600 border-green-200 dark:bg-green-950/30 dark:text-green-400 dark:border-green-800/50\")}>\n                        <svg className=\"w-2.5 h-2.5\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                            <path d=\"M8 14L2 8H6V2H10V8H14L8 14Z\" />\n                        </svg>\n                    </div>\n                )\n            default: \n                return (\n                    <div className={cn(baseClasses, \"bg-muted text-muted-foreground border-border\")}>\n                        <svg className=\"w-2.5 h-2.5\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                            <rect x=\"2\" y=\"7\" width=\"12\" height=\"2\" />\n                        </svg>\n                    </div>\n                )\n        }\n    }\n\n    const generateChartData = (metric: UsageMetric, forecast: ForecastData) => {\n        const sortedData = [...metric.historicalData].sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n        const lastDate = new Date(sortedData[sortedData.length - 1]?.date || '2024-01-01')\n        \n        const chartData = [...sortedData.map(d => ({ ...d, isProjected: false }))]\n        \n        for (let i = 1; i <= forecastDays; i++) {\n            const futureDate = new Date(lastDate)\n            futureDate.setDate(lastDate.getDate() + i)\n            \n            const projectedUsage = metric.currentUsage + (forecast.projected - metric.currentUsage) * (i / forecastDays)\n            \n            chartData.push({\n                date: futureDate.toISOString().split('T')[0],\n                usage: projectedUsage,\n                cost: projectedUsage * metric.unitCost,\n                isProjected: true\n            })\n        }\n        \n        return chartData\n    }\n\n    const SimplifiedChart = ({ data, metric }: { data: Array<{ usage: number; isProjected?: boolean }>, metric: UsageMetric }) => {\n        if (data.length < 2) {\n            return (\n                <div className=\"flex items-center justify-center h-16 px-3 py-2 bg-muted/30 dark:bg-muted/20 border border-border rounded-md\">\n                    <span className=\"text-xs text-muted-foreground\">Insufficient data</span>\n                </div>\n            )\n        }\n        \n        const usageValues = data.map(d => d.usage).filter(usage => typeof usage === 'number' && isFinite(usage))\n        const maxUsage = usageValues.length > 0 ? Math.max(...usageValues, metric.limit, 0) : Math.max(metric.limit, 1)\n        const chartHeight = 48\n        const chartWidth = 240\n        \n        const bars = data.map((d, i) => {\n            const safeDataLength = Math.max(data.length, 1)\n            const x = safeDataLength > 1 ? (i / (safeDataLength - 1)) * chartWidth : chartWidth / 2\n            const barWidth = Math.max(2, Math.max(chartWidth / safeDataLength - 1, 1))\n            const safeUsage = typeof d.usage === 'number' && isFinite(d.usage) ? d.usage : 0\n            const height = Math.min(chartHeight - 4, Math.max(2, (safeUsage / maxUsage) * chartHeight))\n            const y = chartHeight - height\n            \n            return {\n                x: x - barWidth / 2,\n                y,\n                width: barWidth,\n                height,\n                isProjected: d.isProjected || false\n            }\n        })\n        \n        return (\n            <div className=\"relative w-full\">\n                <div className=\"flex items-end justify-between h-16 px-3 py-2 bg-muted/30 dark:bg-muted/20 border border-border rounded-md overflow-hidden\">\n                    {bars.slice(0, 20).map((bar, i) => (\n                        <motion.div\n                            key={i}\n                            className={cn(\n                                \"rounded-t-sm transition-colors duration-200\",\n                                bar.isProjected \n                                    ? \"bg-muted-foreground/30 dark:bg-muted-foreground/40\" \n                                    : \"bg-primary/80 dark:bg-primary/90\"\n                            )}\n                            style={{\n                                width: Math.max(3, bar.width),\n                                height: Math.max(2, bar.height)\n                            }}\n                            initial={{ height: 0, opacity: 0 }}\n                            animate={{ height: Math.max(2, bar.height), opacity: 1 }}\n                            transition={{ duration: 0.5, delay: i * 0.02 }}\n                        />\n                    ))}\n                </div>\n                \n                <div className=\"flex justify-between items-center mt-4 px-3\">\n                    <span className=\"text-xs text-muted-foreground font-medium\">Historical</span>\n                    <div className=\"flex-1 border-t border-dashed border-muted-foreground/30 mx-4 mt-0.5\" />\n                    <span className=\"text-xs text-muted-foreground font-medium\">Projected</span>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <Card className={cn(\"w-full\", className)}>\n            {(title || description) && (\n                <CardHeader className=\"space-y-1\">\n                    {title && (\n                        <CardTitle className={cn(\"font-medium leading-tight truncate\", config.title)}>\n                            {title}\n                        </CardTitle>\n                    )}\n                    {description && (\n                        <CardDescription className={cn(\"text-muted-foreground\", config.text)}>\n                            {description}\n                        </CardDescription>\n                    )}\n                </CardHeader>\n            )}\n            \n            <CardContent className={cn(\"grid grid-cols-1 gap-6\", config.spacing)}>\n                {metrics.map((metric, i) => {\n                    const forecast = forecastMetric(metric)\n                    const projectedPercentage = metric.limit > 0 ? (forecast.projected / metric.limit) * 100 : 0\n                    const chartData = generateChartData(metric, forecast)\n\n                    const isSelected = selectedMetric === i\n\n                    return (\n                        <motion.div \n                            key={metric.name || i} \n                            className={cn(\n                                \"space-y-4 bg-muted/20 rounded-xl border transition-all duration-300\", \n                                config.spacing,\n                                isSelected && \"border-primary bg-muted/30\"\n                            )}\n                            whileHover={{ scale: 1.01 }}\n                            whileTap={{ scale: 0.99 }}\n                        >\n                            <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-2\">\n                                    <span className={cn(\"font-medium truncate\", config.title)}>{metric.name}</span>\n                                    {getTrendIcon(forecast.trend)}\n                                </div>\n                                <div className=\"flex items-center gap-3 ml-4\">\n                                    {showChart && (\n                                        <Button\n                                            variant={isSelected ? \"default\" : \"outline\"}\n                                            size=\"sm\"\n                                            className={cn(\n                                                \"h-7 px-3 text-xs font-medium transition-all duration-200\",\n                                                isSelected && \"bg-primary text-primary-foreground shadow-sm\"\n                                            )}\n                                            onClick={(e) => {\n                                                e.stopPropagation()\n                                                setSelectedMetric(isSelected ? -1 : i)\n                                            }}\n                                        >\n                                            <svg className=\"w-3.5 h-3.5 mr-1.5\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                                <path d=\"M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\"/>\n                                                <path d=\"m8.93 6.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM9 4.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0z\"/>\n                                            </svg>\n                                            {isSelected ? \"Hide\" : \"Chart\"}\n                                        </Button>\n                                    )}\n                                    <span className={cn(\"text-muted-foreground font-mono text-xs\", config.text)}>\n                                        {Math.round(forecast.confidence)}% confidence\n                                    </span>\n                                </div>\n                            </div>\n\n                            <div className={cn(\"space-y-3\", config.gap)}>\n                                <div className=\"flex justify-between items-center\">\n                                    <span className={cn(\"text-muted-foreground\", config.text)}>Current</span>\n                                    <span className={cn(\"font-mono text-right\", config.text)}>\n                                        {metric.currentUsage.toLocaleString()} / {metric.limit.toLocaleString()}\n                                    </span>\n                                </div>\n                                \n                                <div className=\"flex justify-between items-center\">\n                                    <span className={cn(\"text-muted-foreground\", config.text)}>Projected ({forecastDays}d)</span>\n                                    <span className={cn(\"font-mono text-right\", config.text)}>\n                                        {Math.round(projectedPercentage)}% of limit\n                                    </span>\n                                </div>\n\n                                {showCostProjection && (\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className={cn(\"text-muted-foreground\", config.text)}>Est. Cost</span>\n                                        <div className=\"flex items-center gap-1\">\n                                            <span className=\"text-xs font-medium\">$</span>\n                                            <span className={cn(\"font-mono text-right\", config.text)}>\n                                                {forecast.projectedCost.toFixed(2)}\n                                            </span>\n                                        </div>\n                                    </div>\n                                )}\n\n                                {forecast.daysToLimit && (\n                                    <div className=\"flex justify-between items-center\">\n                                        <span className={cn(\"text-muted-foreground\", config.text)}>Days to limit</span>\n                                        <span className={cn(\"font-mono text-destructive dark:text-destructive text-right\", config.text)}>\n                                            ~{forecast.daysToLimit}\n                                        </span>\n                                    </div>\n                                )}\n                            </div>\n\n                            {showChart && isSelected && (\n                                <motion.div\n                                    className=\"bg-muted/30 dark:bg-muted/20 border border-border rounded-lg p-4 mt-4 shadow-sm\"\n                                    initial={{ opacity: 0, height: 0 }}\n                                    animate={{ opacity: 1, height: \"auto\" }}\n                                    exit={{ opacity: 0, height: 0 }}\n                                    transition={{ duration: 0.3, ease: \"easeOut\" }}\n                                >\n                                    <div className=\"flex items-center justify-center mb-4\">\n                                        <span className={cn(\"font-medium text-foreground\", config.text)}>Usage Trend</span>\n                                    </div>\n                                    <div className=\"flex justify-center p-2\">\n                                        <SimplifiedChart data={chartData} metric={metric} />\n                                    </div>\n                                    <div className=\"flex justify-center mt-3 pt-3 border-t border-border\">\n                                        <span className={cn(\"text-muted-foreground text-xs text-center\", config.text)}>Last 30 days → Next {forecastDays} days</span>\n                                    </div>\n                                </motion.div>\n                            )}\n\n                            {forecast.alerts.length > 0 && (\n                                <div className={cn(\"space-y-3 mt-4\", config.gap)}>\n                                    {forecast.alerts.slice(0, 2).map((alert, idx) => (\n                                        <div key={idx} className=\"flex items-start gap-3 p-3 bg-card border border-border rounded-lg\">\n                                            <svg className=\"w-4 h-4 text-destructive mt-0.5 flex-shrink-0\" viewBox=\"0 0 16 16\" fill=\"currentColor\">\n                                                <path d=\"M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z\"/>\n                                            </svg>\n                                            <div className=\"flex-1\">\n                                                <p className={cn(\"text-muted-foreground leading-relaxed\", config.text)}>{alert.message}</p>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                        </motion.div>\n                    )\n                })}\n            </CardContent>\n        </Card>\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/usage-forecast.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-forecast-demo.tsx",
      "content": "\"use client\"\n\nimport { UsageForecast } from \"@/components/billingsdk/usage-forecast\"\nimport type { UsageMetric } from \"@/components/billingsdk/usage-forecast\"\n\nconst generateHistoricalData = (baseUsage: number, days: number = 30, trendType: 'up' | 'down' | 'stable' = 'up') => {\n    const data = []\n    const baseDate = new Date(Date.UTC(2024, 0, 1)) // January 1, 2024 UTC\n    \n    for (let i = days - 1; i >= 0; i--) {\n        const date = new Date(baseDate.getTime())\n        date.setUTCDate(baseDate.getUTCDate() - i)\n        \n        const seedValue = (i * 37) % 100 / 100\n        let trendFactor = 0\n        let randomVariation = 0\n        \n        if (trendType === 'up') {\n            trendFactor = (days - i) / days * 0.4\n            randomVariation = (seedValue - 0.5) * 0.2\n        } else if (trendType === 'down') {\n            trendFactor = -((days - i) / days * 0.3)\n            randomVariation = (seedValue - 0.5) * 0.2\n        } else {\n            trendFactor = 0\n            randomVariation = (seedValue - 0.5) * 0.05\n        }\n        \n        const usage = Math.max(0, baseUsage * (1 + trendFactor + randomVariation))\n        \n        data.push({\n            date: date.toISOString().split('T')[0],\n            usage: Math.round(usage),\n            cost: usage * 0.01\n        })\n    }\n    return data\n}\n\nconst mockMetrics: UsageMetric[] = [\n    {\n        name: \"API Calls\",\n        currentUsage: 45000,\n        limit: 50000,\n        unitCost: 0.001,\n        currency: \"$\",\n        unitName: \"calls\",\n        historicalData: generateHistoricalData(35000, 30, 'up')\n    },\n    {\n        name: \"Storage\",\n        currentUsage: 750,\n        limit: 1000,\n        unitCost: 0.1,\n        currency: \"$\",\n        unitName: \"GB\",\n        historicalData: generateHistoricalData(900, 30, 'down')\n    },\n    {\n        name: \"Bandwidth\",\n        currentUsage: 2400,\n        limit: 5000,\n        unitCost: 0.05,\n        currency: \"$\",\n        unitName: \"GB\",\n        historicalData: generateHistoricalData(2400, 30, 'stable')\n    }\n]\n\nexport default function UsageForecastDemo() {\n    return (\n        <div className=\"space-y-6\">\n            <UsageForecast\n                metrics={mockMetrics}\n                title=\"Usage Forecast\"\n                description=\"Intelligent predictions based on your usage patterns\"\n                showCostProjection={true}\n                showChart={true}\n                forecastDays={30}\n            />\n        </div>\n    )\n}",
      "type": "registry:component",
      "target": "components/usage-forecast-demo.tsx"
    }
  ]
}