{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "billing-settings-2",
  "type": "registry:block",
  "title": "Billing Settings 2",
  "description": "A comprehensive billing settings component with tabs for general, payment methods, invoices, and usage limits",
  "dependencies": [],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "switch",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/billing-settings-2.tsx",
      "content": "'use client';\r\n\r\nimport { Button } from '@/components/ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Label } from '@/components/ui/label';\r\nimport {\r\n\tSelect,\r\n\tSelectContent,\r\n\tSelectItem,\r\n\tSelectTrigger,\r\n\tSelectValue,\r\n} from '@/components/ui/select';\r\nimport { Switch } from '@/components/ui/switch';\r\nimport { cn } from '@/lib/utils';\r\nimport { useState } from 'react';\r\n\r\n// Define types for our props\r\nexport interface FeatureToggle {\r\n\tid: string;\r\n\tlabel: string;\r\n\tdescription: string;\r\n\tenabled: boolean;\r\n\tonToggle: (enabled: boolean) => void;\r\n}\r\n\r\nexport interface InputField {\r\n\tid: string;\r\n\tname: string;\r\n\tvalue?: string;\r\n\tdefaultValue?: string;\r\n\tplaceholder: string;\r\n\tonChange: (value: string) => void;\r\n\tlabel: string;\r\n\thelperText?: string;\r\n\ttype?: 'text' | 'email' | 'tel' | 'url' | 'number';\r\n\trequired?: boolean;\r\n\tvalidation?: {\r\n\t\tminLength?: number;\r\n\t\tmaxLength?: number;\r\n\t\tpattern?: RegExp;\r\n\t\tcustomValidator?: (value: string) => string | null;\r\n\t};\r\n}\r\n\r\nexport interface ValidationError {\r\n\tfield: string;\r\n\tmessage: string;\r\n}\r\n\r\nexport interface BillingSettings2Props {\r\n\tclassName?: string;\r\n\ttitle?: string;\r\n\tfeatures?: FeatureToggle[];\r\n\tinputFields?: InputField[];\r\n\tonSave?: () => void;\r\n\tonCancel?: () => void;\r\n\tsaveButtonText?: string;\r\n\tcancelButtonText?: string;\r\n\tcurrencyOptions?: { value: string; label: string }[];\r\n\tdefaultCurrency?: string;\r\n\tonCurrencyChange?: (value: string) => void;\r\n\tenableValidation?: boolean;\r\n\tcurrencyRequired?: boolean;\r\n}\r\n\r\n// Validation helper functions\r\nconst validateEmail = (email: string): string | null => {\r\n\tconst emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n\tif (!emailRegex.test(email)) {\r\n\t\treturn \"Please enter a valid email address\";\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst validateRequired = (value: string, fieldName: string): string | null => {\r\n\tif (!value.trim()) {\r\n\t\treturn `${fieldName} is required`;\r\n\t}\r\n\treturn null;\r\n};\r\n\r\nconst validateField = (value: string, field: InputField): string | null => {\r\n\t// Check required validation\r\n\tif (field.required && !value.trim()) {\r\n\t\treturn `${field.label} is required`;\r\n\t}\r\n\r\n\t// Skip other validations if field is empty and not required\r\n\tif (!value.trim() && !field.required) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\t// Check email validation\r\n\tif (field.type === 'email') {\r\n\t\treturn validateEmail(value);\r\n\t}\r\n\r\n\t// Check custom validation\r\n\tif (field.validation?.customValidator) {\r\n\t\treturn field.validation.customValidator(value);\r\n\t}\r\n\r\n\t// Check pattern validation\r\n\tif (field.validation?.pattern && !field.validation.pattern.test(value)) {\r\n\t\treturn `Invalid ${field.label.toLowerCase()} format`;\r\n\t}\r\n\r\n\t// Check length validations\r\n\tif (field.validation?.minLength && value.length < field.validation.minLength) {\r\n\t\treturn `${field.label} must be at least ${field.validation.minLength} characters`;\r\n\t}\r\n\r\n\tif (field.validation?.maxLength && value.length > field.validation.maxLength) {\r\n\t\treturn `${field.label} must be no more than ${field.validation.maxLength} characters`;\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\nexport function BillingSettings2({\r\n\tclassName,\r\n\ttitle = \"Billing Settings\",\r\n\tfeatures = [\r\n\t\t{\r\n\t\t\tid: \"auto-renewal\",\r\n\t\t\tlabel: \"Auto-Renewal\",\r\n\t\t\tdescription: \"Automatically renew your subscription\",\r\n\t\t\tenabled: true,\r\n\t\t\tonToggle: () => {},\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"invoice-emails\",\r\n\t\t\tlabel: \"Invoice Emails\",\r\n\t\t\tdescription: \"Receive emails when invoices are generated\",\r\n\t\t\tenabled: true,\r\n\t\t\tonToggle: () => {},\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"promotional-emails\",\r\n\t\t\tlabel: \"Promotional Emails\",\r\n\t\t\tdescription: \"Receive occasional updates about new features and offers\",\r\n\t\t\tenabled: true,\r\n\t\t\tonToggle: () => {},\r\n\t\t},\r\n\t],\r\n\tinputFields = [\r\n\t\t{\r\n\t\t\tid: \"fullName\",\r\n\t\t\tname: \"fullName\",\r\n\t\t\tdefaultValue: \"\",\r\n\t\t\tplaceholder: \"John Doe\",\r\n\t\t\tonChange: () => {},\r\n\t\t\tlabel: \"Full Name\",\r\n\t\t\ttype: \"text\",\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"billingEmail\",\r\n\t\t\tname: \"billingEmail\",\r\n\t\t\tdefaultValue: \"\",\r\n\t\t\tplaceholder: \"user@example.com\",\r\n\t\t\tonChange: () => {},\r\n\t\t\tlabel: \"Billing Email\",\r\n\t\t\thelperText: \"Invoices will be sent to this email address\",\r\n\t\t\ttype: \"email\",\r\n\t\t\trequired: true,\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: \"taxId\",\r\n\t\t\tname: \"taxId\",\r\n\t\t\tdefaultValue: \"\",\r\n\t\t\tplaceholder: \"EU123456789\",\r\n\t\t\tonChange: () => {},\r\n\t\t\tlabel: \"Tax ID (Optional)\",\r\n\t\t\thelperText: \"For VAT or other tax purposes\",\r\n\t\t\ttype: \"text\",\r\n\t\t},\r\n\t],\r\n\tonSave = () => {},\r\n\tonCancel = () => {},\r\n\tsaveButtonText = \"Save Changes\",\r\n\tcancelButtonText = \"Cancel\",\r\n\tcurrencyOptions = [\r\n\t\t{ value: \"usd\", label: \"USD - US Dollar\" },\r\n\t\t{ value: \"inr\", label: \"INR - Indian Rupees\" },\r\n\t\t{ value: \"eur\", label: \"EUR - Euro\" },\r\n\t\t{ value: \"gbp\", label: \"GBP - British Pound\" },\r\n\t\t{ value: \"jpy\", label: \"JPY - Japanese Yen\" },\r\n\t\t{ value: \"aud\", label: \"AUD - Australian Dollar\" },\r\n\t\t{ value: \"cad\", label: \"CAD - Canadian Dollar\" },\r\n\t\t{ value: \"cny\", label: \"CNY - Chinese Yuan\" },\r\n\t\t{ value: \"sgd\", label: \"SGD - Singapore Dollar\" },\r\n\t\t{ value: \"chf\", label: \"CHF - Swiss Franc\" },\r\n\t\t{ value: \"zar\", label: \"ZAR - South African Rand\" },\r\n\t\t{ value: \"aed\", label: \"AED - UAE Dirham\" },\r\n\t],\r\n\tdefaultCurrency = \"usd\",\r\n\tonCurrencyChange = () => {},\r\n\tenableValidation = true,\r\n\tcurrencyRequired = true,\r\n}: BillingSettings2Props) {\r\n\tconst [validationErrors, setValidationErrors] = useState<ValidationError[]>([]);\r\n\tconst [currencyError, setCurrencyError] = useState<string | null>(null);\r\n\r\n\t// Validate all fields\r\n\tconst validateAllFields = (): boolean => {\r\n\t\tif (!enableValidation) return true;\r\n\r\n\t\tconst errors: ValidationError[] = [];\r\n\t\tlet hasCurrencyError = false;\r\n\r\n\t\t// Validate input fields\r\n\t\tinputFields.forEach(field => {\r\n\t\t\tconst value = field.value !== undefined ? field.value : field.defaultValue || \"\";\r\n\t\t\tconst error = validateField(value, field);\r\n\t\t\tif (error) {\r\n\t\t\t\terrors.push({ field: field.id, message: error });\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Validate currency if required\r\n\t\tif (currencyRequired && !defaultCurrency) {\r\n\t\t\tsetCurrencyError(\"Please select a currency\");\r\n\t\t\thasCurrencyError = true;\r\n\t\t} else {\r\n\t\t\tsetCurrencyError(null);\r\n\t\t}\r\n\r\n\t\tsetValidationErrors(errors);\r\n\t\treturn errors.length === 0 && !hasCurrencyError;\r\n\t};\r\n\r\n\t// Handle save with validation\r\n\tconst handleSave = () => {\r\n\t\tif (validateAllFields()) {\r\n\t\t\tonSave();\r\n\t\t}\r\n\t};\r\n\r\n\t// Get error for a specific field\r\n\tconst getFieldError = (fieldId: string): string | undefined => {\r\n\t\treturn validationErrors.find(error => error.field === fieldId)?.message;\r\n\t};\r\n\r\n\t// Clear validation error for a specific field\r\n\tconst clearFieldError = (fieldId: string) => {\r\n\t\tsetValidationErrors(prev => prev.filter(error => error.field !== fieldId));\r\n\t};\r\n\r\n\t// Clear currency error\r\n\tconst clearCurrencyError = () => {\r\n\t\tsetCurrencyError(null);\r\n\t};\r\n\r\n\t// Enhanced input change handler that clears validation errors\r\n\tconst handleInputChange = (fieldId: string, value: string, originalOnChange: (value: string) => void) => {\r\n\t\t// Clear the validation error for this field when user starts typing\r\n\t\tclearFieldError(fieldId);\r\n\t\t// Call the original onChange handler\r\n\t\toriginalOnChange(value);\r\n\t};\r\n\r\n\t// Enhanced currency change handler\r\n\tconst handleCurrencyChange = (value: string, originalOnChange: (value: string) => void) => {\r\n\t\t// Clear currency error when user makes a selection\r\n\t\tclearCurrencyError();\r\n\t\t// Call the original onChange handler\r\n\t\toriginalOnChange(value);\r\n\t};\r\n\treturn (\r\n\t\t<Card className={cn('mx-auto max-w-2xl', className)}>\r\n\t\t\t<CardHeader>\r\n\t\t\t\t<CardTitle className=\"text-lg\">{title}</CardTitle>\r\n\t\t\t</CardHeader>\r\n\t\t\t<CardContent className=\"space-y-6\">\r\n\t\t\t\t<p className=\"text-sm text-muted-foreground\">\r\n\t\t\t\t\tManage your billing preferences and settings\r\n\t\t\t\t</p>\r\n\r\n\t\t\t\t<div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n\t\t\t\t\t{inputFields.map((field) => {\r\n\t\t\t\t\t\tconst error = getFieldError(field.id);\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={field.id} className=\"space-y-2\">\r\n\t\t\t\t\t\t\t\t<Label htmlFor={field.id}>\r\n\t\t\t\t\t\t\t\t\t{field.label}\r\n\t\t\t\t\t\t\t\t\t{field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n\t\t\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\tid={field.id}\r\n\t\t\t\t\t\t\t\t\tname={field.name}\r\n\t\t\t\t\t\t\t\t\t{...(field.value !== undefined\r\n\t\t\t\t\t\t\t\t\t\t? { value: field.value }\r\n\t\t\t\t\t\t\t\t\t\t: { defaultValue: field.defaultValue })}\r\n\t\t\t\t\t\t\t\t\tplaceholder={field.placeholder}\r\n\t\t\t\t\t\t\t\t\tonChange={(e) => handleInputChange(field.id, e.target.value, field.onChange)}\r\n\t\t\t\t\t\t\t\t\ttype={field.type || \"text\"}\r\n\t\t\t\t\t\t\t\t\taria-describedby={field.helperText ? `${field.id}-help` : undefined}\r\n\t\t\t\t\t\t\t\t\tclassName={error ? \"border-red-500 focus:border-red-500\" : \"\"}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t{error ? (\r\n\t\t\t\t\t\t\t\t\t<p className=\"text-xs text-red-500\">\r\n\t\t\t\t\t\t\t\t\t\t{error}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t) : field.helperText ? (\r\n\t\t\t\t\t\t\t\t\t<p id={`${field.id}-help`} className=\"text-xs text-muted-foreground\">\r\n\t\t\t\t\t\t\t\t\t\t{field.helperText}\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t) : null}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\r\n\t\t\t\t\t<div className=\"space-y-2\">\r\n\t\t\t\t\t\t<Label id=\"currency-label\">\r\n\t\t\t\t\t\t\tCurrency\r\n\t\t\t\t\t\t\t{currencyRequired && <span className=\"text-red-500 ml-1\">*</span>}\r\n\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t\t<Select value={defaultCurrency} onValueChange={(value) => handleCurrencyChange(value, onCurrencyChange)}>\r\n\t\t\t\t\t\t\t<SelectTrigger\r\n\t\t\t\t\t\t\t\taria-labelledby=\"currency-label\"\r\n\t\t\t\t\t\t\t\tclassName={currencyError ? \"border-red-500 focus:border-red-500\" : \"\"}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t<SelectValue placeholder=\"Select currency\" />\r\n\t\t\t\t\t\t\t</SelectTrigger>\r\n\t\t\t\t\t\t\t<SelectContent>\r\n\t\t\t\t\t\t\t\t{currencyOptions.map((option) => (\r\n\t\t\t\t\t\t\t\t\t<SelectItem key={option.value} value={option.value}>\r\n\t\t\t\t\t\t\t\t\t\t{option.label}\r\n\t\t\t\t\t\t\t\t\t</SelectItem>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</SelectContent>\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t{currencyError && (\r\n\t\t\t\t\t\t\t<p className=\"text-xs text-red-500\">\r\n\t\t\t\t\t\t\t\t{currencyError}\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"space-y-4\">\r\n\t\t\t\t\t{features.map((feature) => (\r\n\t\t\t\t\t\t<div \r\n\t\t\t\t\t\t\tkey={feature.id} \r\n\t\t\t\t\t\t\tclassName=\"flex items-center justify-between rounded-lg border p-4\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<div className=\"font-medium\">{feature.label}</div>\r\n\t\t\t\t\t\t\t\t<div className=\"text-sm text-muted-foreground\">\r\n\t\t\t\t\t\t\t\t\t{feature.description}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<Switch \r\n\t\t\t\t\t\t\t\taria-label={feature.label}\r\n\t\t\t\t\t\t\t\tchecked={feature.enabled}\r\n\t\t\t\t\t\t\t\tonCheckedChange={feature.onToggle}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t))}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className=\"flex items-center justify-end gap-3 pt-2\">\r\n\t\t\t\t\t<Button variant=\"outline\" onClick={onCancel}>\r\n\t\t\t\t\t\t{cancelButtonText}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t\t<Button\r\n\t\t\t\t\t\tonClick={handleSave}\r\n\t\t\t\t\t\tdisabled={enableValidation && (validationErrors.length > 0 || !!currencyError)}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{saveButtonText}\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</div>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/billing-settings-2.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/billing-settings-2-demo.tsx",
      "content": "'use client';\r\n\r\nimport { BillingSettings2 } from '@/components/billingsdk/billing-settings-2';\r\nimport { useState } from 'react';\r\n\r\nexport function BillingSettings2Demo() {\r\n\tconst [inputValues, setInputValues] = useState({\r\n\t\tfullName: '',\r\n\t\tbillingEmail: '',\r\n\t\ttaxId: '',\r\n\t});\r\n\r\n\tconst [featureToggles, setFeatureToggles] = useState({\r\n\t\tautoRenewal: true,\r\n\t\tinvoiceEmails: true,\r\n\t\tpromotionalEmails: false,\r\n\t});\r\n\r\n\tconst [selectedCurrency, setSelectedCurrency] = useState('usd');\r\n\r\n\tconst handleInputChange = (field: string, value: string) => {\r\n\t\tsetInputValues(prev => ({\r\n\t\t\t...prev,\r\n\t\t\t[field]: value\r\n\t\t}));\r\n\t};\r\n\r\n\t// Wrapper functions for the component's enhanced handlers\r\n\tconst createInputChangeHandler = (field: string) => (value: string) => {\r\n\t\thandleInputChange(field, value);\r\n\t};\r\n\r\n\tconst createCurrencyChangeHandler = (setCurrency: (value: string) => void) => (value: string) => {\r\n\t\tsetCurrency(value);\r\n\t};\r\n\r\n\tconst handleFeatureToggle = (feature: string, enabled: boolean) => {\r\n\t\tsetFeatureToggles(prev => ({\r\n\t\t\t...prev,\r\n\t\t\t[feature]: enabled\r\n\t\t}));\r\n\t};\r\n\r\n\tconst handleSave = () => {\r\n\t\t// Validation is handled by the component, so if we reach here, validation passed\r\n\t\talert('Settings saved successfully!');\r\n\t\tconsole.log('Input values:', inputValues);\r\n\t\tconsole.log('Feature toggles:', featureToggles);\r\n\t\tconsole.log('Selected currency:', selectedCurrency);\r\n\t};\r\n\r\n\tconst handleCancel = () => {\r\n\t\talert('Changes cancelled!');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"p-6\">\r\n\t\t\t<BillingSettings2\r\n\t\t\t\ttitle=\"Custom Billing Settings\"\r\n\t\t\t\tinputFields={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"fullName\",\r\n\t\t\t\t\t\tname: \"fullName\",\r\n\t\t\t\t\t\tvalue: inputValues.fullName,\r\n\t\t\t\t\t\tplaceholder: \"Enter your full name\",\r\n\t\t\t\t\t\tonChange: createInputChangeHandler('fullName'),\r\n\t\t\t\t\t\tlabel: \"Full Name\",\r\n\t\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t\tvalidation: {\r\n\t\t\t\t\t\t\tminLength: 2,\r\n\t\t\t\t\t\t\tmaxLength: 50,\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"billingEmail\",\r\n\t\t\t\t\t\tname: \"billingEmail\",\r\n\t\t\t\t\t\tvalue: inputValues.billingEmail,\r\n\t\t\t\t\t\tplaceholder: \"user@example.com\",\r\n\t\t\t\t\t\tonChange: createInputChangeHandler('billingEmail'),\r\n\t\t\t\t\t\tlabel: \"Billing Email\",\r\n\t\t\t\t\t\thelperText: \"Invoices will be sent to this email address\",\r\n\t\t\t\t\t\ttype: \"email\",\r\n\t\t\t\t\t\trequired: true,\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"taxId\",\r\n\t\t\t\t\t\tname: \"taxId\",\r\n\t\t\t\t\t\tvalue: inputValues.taxId,\r\n\t\t\t\t\t\tplaceholder: \"EU123456789\",\r\n\t\t\t\t\t\tonChange: createInputChangeHandler('taxId'),\r\n\t\t\t\t\t\tlabel: \"Tax ID (Optional)\",\r\n\t\t\t\t\t\thelperText: \"For VAT or other tax purposes\",\r\n\t\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\t\tvalidation: {\r\n\t\t\t\t\t\t\tpattern: /^[A-Z]{2}\\d{8,12}$/,\r\n\t\t\t\t\t\t\tcustomValidator: (value: string) => {\r\n\t\t\t\t\t\t\t\tif (value && !/^[A-Z]{2}\\d{8,12}$/.test(value)) {\r\n\t\t\t\t\t\t\t\t\treturn \"Tax ID should be in format: XX followed by 8-12 digits (e.g., EU123456789)\";\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tfeatures={[\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"auto-renewal\",\r\n\t\t\t\t\t\tlabel: \"Auto-Renewal\",\r\n\t\t\t\t\t\tdescription: \"Automatically renew your subscription\",\r\n\t\t\t\t\t\tenabled: featureToggles.autoRenewal,\r\n\t\t\t\t\t\tonToggle: (enabled) => handleFeatureToggle('autoRenewal', enabled),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"invoice-emails\",\r\n\t\t\t\t\t\tlabel: \"Invoice Emails\",\r\n\t\t\t\t\t\tdescription: \"Receive emails when invoices are generated\",\r\n\t\t\t\t\t\tenabled: featureToggles.invoiceEmails,\r\n\t\t\t\t\t\tonToggle: (enabled) => handleFeatureToggle('invoiceEmails', enabled),\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tid: \"promotional-emails\",\r\n\t\t\t\t\t\tlabel: \"Promotional Emails\",\r\n\t\t\t\t\t\tdescription: \"Receive occasional updates about new features and offers\",\r\n\t\t\t\t\t\tenabled: featureToggles.promotionalEmails,\r\n\t\t\t\t\t\tonToggle: (enabled) => handleFeatureToggle('promotionalEmails', enabled),\r\n\t\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tcurrencyOptions={[\r\n\t\t\t\t\t{ value: \"usd\", label: \"USD - US Dollar\" },\r\n\t\t\t\t\t{ value: \"eur\", label: \"EUR - Euro\" },\r\n\t\t\t\t\t{ value: \"gbp\", label: \"GBP - British Pound\" },\r\n\t\t\t\t]}\r\n\t\t\t\tdefaultCurrency={selectedCurrency}\r\n\t\t\t\tonCurrencyChange={createCurrencyChangeHandler(setSelectedCurrency)}\r\n\t\t\t\tonSave={handleSave}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tsaveButtonText=\"Save Preferences\"\r\n\t\t\t\tcancelButtonText=\"Discard Changes\"\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}",
      "type": "registry:component",
      "target": "components/billing-settings-2-demo.tsx"
    }
  ]
}