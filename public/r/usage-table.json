{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-table",
  "type": "registry:block",
  "title": "Usage Table",
  "description": "A usage table component with resource consumption breakdown",
  "registryDependencies": [
    "table",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-table.tsx",
      "content": "\"use client\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Table, TableBody, TableCell, TableCaption, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\n\r\nexport interface UsageItem {\r\n    model: string\r\n    inputWithCache: number\r\n    inputWithoutCache: number\r\n    cacheRead: number\r\n    output: number\r\n    totalTokens: number\r\n    apiCost?: number\r\n    costToYou?: number\r\n}\r\n\r\ninterface UsageTableProps {\r\n    className?: string\r\n    title?: string\r\n    description?: string\r\n    usageHistory: UsageItem[]\r\n    showTotal?: boolean\r\n}\r\n\r\nexport function UsageTable({\r\n    className,\r\n    title,\r\n    description,\r\n    usageHistory,\r\n    showTotal = true, // Default to true\r\n}: UsageTableProps) {\r\n\r\n    // Calculate total row if showTotal is true\r\n    const totalRow = showTotal ? usageHistory.reduce((acc, item) => ({\r\n        inputWithCache: acc.inputWithCache + item.inputWithCache,\r\n        inputWithoutCache: acc.inputWithoutCache + item.inputWithoutCache,\r\n        cacheRead: acc.cacheRead + item.cacheRead,\r\n        output: acc.output + item.output,\r\n        totalTokens: acc.totalTokens + item.totalTokens,\r\n        apiCost: acc.apiCost + (item.apiCost || 0),\r\n        costToYou: acc.costToYou + (item.costToYou || 0),\r\n    }), {\r\n        inputWithCache: 0,\r\n        inputWithoutCache: 0,\r\n        cacheRead: 0,\r\n        output: 0,\r\n        totalTokens: 0,\r\n        apiCost: 0,\r\n        costToYou: 0,\r\n    }) : null\r\n\r\n    const formatNumber = (num: number) => {\r\n        return new Intl.NumberFormat().format(num)\r\n    }\r\n\r\n    const formatCurrency = (amount: number) => {\r\n        return `$${amount.toFixed(2)}`\r\n    }\r\n    const hasApiCost = usageHistory.some(item => item.apiCost)\r\n    const hasCostToYou = usageHistory.some(item => item.costToYou)\r\n\r\n    return (\r\n        <Card className={cn(\"w-full\", className)}>\r\n            <CardHeader>\r\n                {title && <CardTitle>{title}</CardTitle>}\r\n                {description && <CardDescription>{description}</CardDescription>}\r\n            </CardHeader>\r\n            <CardContent>\r\n                <div className=\"rounded-md border overflow-x-auto\">\r\n                    <Table>\r\n                        <TableCaption className=\"sr-only\">Model usage summary with token counts and costs</TableCaption>\r\n                        <TableHeader>\r\n                            <TableRow>\r\n                                <TableHead className=\"w-[140px]\">Model</TableHead>\r\n                                <TableHead className=\"text-right\">\r\n                                    <span className=\"hidden sm:inline\">Input (w/ Cache)</span>\r\n                                    <span className=\"sm:hidden\">w/ Cache</span>\r\n                                </TableHead>\r\n                                <TableHead className=\"text-right\">\r\n                                    <span className=\"hidden sm:inline\">Input (w/o Cache)</span>\r\n                                    <span className=\"sm:hidden\">w/o Cache</span>\r\n                                </TableHead>\r\n                                <TableHead className=\"text-right\">\r\n                                    <span className=\"hidden sm:inline\">Cache Read</span>\r\n                                    <span className=\"sm:hidden\">Cache</span>\r\n                                </TableHead>\r\n                                <TableHead className=\"text-right\">Output</TableHead>\r\n                                <TableHead className=\"text-right\">\r\n                                    <span className=\"hidden sm:inline\">Total Tokens</span>\r\n                                    <span className=\"sm:hidden\">Total</span>\r\n                                </TableHead>\r\n                                {hasApiCost && (\r\n                                    <TableHead className=\"text-right\">\r\n                                        <span className=\"hidden sm:inline\">API Cost</span>\r\n                                        <span className=\"sm:hidden\">API</span>\r\n                                    </TableHead>\r\n                                )}\r\n                                {hasCostToYou && (\r\n                                    <TableHead className=\"text-right\">\r\n                                        <span className=\"hidden sm:inline\">Cost to You</span>\r\n                                        <span className=\"sm:hidden\">Cost</span>\r\n                                    </TableHead>\r\n                                )}\r\n                            </TableRow>\r\n                        </TableHeader>\r\n                        <TableBody>\r\n                            {usageHistory.length === 0 && (\r\n                                <TableRow>\r\n                                    <TableCell colSpan={8} className=\"h-24 text-center text-muted-foreground\">\r\n                                        No usage data available\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            )}\r\n                            {usageHistory.map((item, index) => (\r\n                                <TableRow key={item.model || index}>\r\n                                    <TableCell className=\"font-medium\">{item.model}</TableCell>\r\n                                    <TableCell className=\"text-right\">{formatNumber(item.inputWithCache)}</TableCell>\r\n                                    <TableCell className=\"text-right\">{formatNumber(item.inputWithoutCache)}</TableCell>\r\n                                    <TableCell className=\"text-right\">{formatNumber(item.cacheRead)}</TableCell>\r\n                                    <TableCell className=\"text-right\">{formatNumber(item.output)}</TableCell>\r\n                                    <TableCell className=\"text-right\">{formatNumber(item.totalTokens)}</TableCell>\r\n                                    {hasApiCost && (\r\n                                        <TableCell className=\"text-right\">{formatCurrency(item.apiCost || 0)}</TableCell>\r\n                                    )}\r\n                                    {hasCostToYou && (\r\n                                        <TableCell className=\"text-right\">{formatCurrency(item.costToYou || 0)}</TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                            ))}\r\n                            {showTotal && totalRow && (\r\n                                <TableRow className=\"bg-muted/50 hover:bg-muted/50\">\r\n                                    <TableCell className=\"font-semibold\">Total</TableCell>\r\n                                    <TableCell className=\"text-right font-semibold\">{formatNumber(totalRow.inputWithCache)}</TableCell>\r\n                                    <TableCell className=\"text-right font-semibold\">{formatNumber(totalRow.inputWithoutCache)}</TableCell>\r\n                                    <TableCell className=\"text-right font-semibold\">{formatNumber(totalRow.cacheRead)}</TableCell>\r\n                                    <TableCell className=\"text-right font-semibold\">{formatNumber(totalRow.output)}</TableCell>\r\n                                    <TableCell className=\"text-right font-semibold\">{formatNumber(totalRow.totalTokens)}</TableCell>\r\n                                    {hasApiCost && (\r\n                                        <TableCell className=\"text-right font-semibold\">{formatCurrency(totalRow.apiCost || 0)}</TableCell>\r\n                                    )}\r\n                                    {hasCostToYou && (\r\n                                        <TableCell className=\"text-right font-semibold\">{formatCurrency(totalRow.costToYou || 0)}</TableCell>\r\n                                    )}\r\n                                </TableRow>\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/usage-table.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-table-demo.tsx",
      "content": "import { UsageTable, type UsageItem } from '@/registry/billingsdk/usage-table';\r\n\r\nexport default function UsageTableDemo() {\r\n  const usageHistory: UsageItem[] = [\r\n    {\r\n      model: 'gpt-5',\r\n      inputWithCache: 0,\r\n      inputWithoutCache: 518131,\r\n      cacheRead: 1646080,\r\n      output: 103271,\r\n      totalTokens: 2267482,\r\n    },\r\n    {\r\n      model: 'claude-3.5-sonnet',\r\n      inputWithCache: 176177,\r\n      inputWithoutCache: 28413,\r\n      cacheRead: 434612,\r\n      output: 8326,\r\n      totalTokens: 647528,\r\n      costToYou: 1.00\r\n    },\r\n    {\r\n      model: 'gemini-2.0-flash-exp',\r\n      inputWithCache: 176100,\r\n      inputWithoutCache: 28432,\r\n      cacheRead: 434612,\r\n      output: 8326,\r\n      totalTokens: 647528,\r\n      apiCost: 1,\r\n      costToYou: 0\r\n    },\r\n    {\r\n      model: 'gemini-2.5-pro',\r\n      inputWithCache: 176177,\r\n      inputWithoutCache: 28413,\r\n      cacheRead: 434612,\r\n      output: 7000,\r\n      totalTokens: 647528,\r\n      apiCost: 1,\r\n      costToYou: 0\r\n    },\r\n    {\r\n      model: 'claude-4-sonnet',\r\n      inputWithCache: 68415,\r\n      inputWithoutCache: 902,\r\n      cacheRead: 864450,\r\n      output: 12769,\r\n      totalTokens: 946536,\r\n      apiCost: 0.71,\r\n      costToYou: 0.71\r\n    },\r\n    {\r\n      model: 'claude-3.7-sonnet',\r\n      inputWithCache: 68415,\r\n      inputWithoutCache: 902,\r\n      cacheRead: 864450,\r\n      output: 12769,\r\n      totalTokens: 946536,\r\n      apiCost: 0.71,\r\n    },\r\n    {\r\n      model: 'auto',\r\n      inputWithCache: 84551,\r\n      inputWithoutCache: 0,\r\n      cacheRead: 284876,\r\n      output: 9458,\r\n      totalTokens: 378885,\r\n      apiCost: 0.23,\r\n      costToYou: 0\r\n    },\r\n    {\r\n      model: 'sonic',\r\n      inputWithCache: 0,\r\n      inputWithoutCache: 149484,\r\n      cacheRead: 4354855,\r\n      output: 23569,\r\n      totalTokens: 4527908,\r\n      costToYou: 2\r\n    }\r\n  ];\r\n\r\n\r\n  return (\r\n      <UsageTable \r\n        title=\"Usage Summary\"\r\n        usageHistory={usageHistory}\r\n        showTotal={true}\r\n        description=\"Per-model LLM usage with token counts, cache reads, and API cost.\"\r\n      />\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/usage-table-demo.tsx"
    }
  ]
}