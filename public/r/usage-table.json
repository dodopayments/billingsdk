{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-table",
  "type": "registry:block",
  "title": "Usage Table",
  "description": "Per-model LLM usage with token counts, cache reads, and API cost",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "table",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-table.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport {  Card,  CardContent,  CardDescription,  CardHeader,  CardTitle} from \"@/components/ui/card\"\nimport {  Table,  TableBody,  TableCell,  TableCaption,  TableHead,  TableHeader,  TableRow} from \"@/components/ui/table\"\n\nexport interface UsageItem {\n    model: string\n    inputWithCache: number\n    inputWithoutCache: number\n    cacheRead: number\n    output: number\n    totalTokens: number\n    apiCost?: number\n    costToYou?: number\n}\n\ninterface UsageTableProps {\n    className?: string\n    title?: string\n    description?: string\n    usageHistory: UsageItem[]\n    showTotal?: boolean\n}\n\nexport function UsageTable({\n    className,\n    title,\n    description,\n    usageHistory,\n    showTotal = true, // Default to true\n}: UsageTableProps) {\n\n    // Calculate total row if showTotal is true\n    const totalRow = showTotal ? usageHistory.reduce((acc, item) => ({\n        inputWithCache: acc.inputWithCache + item.inputWithCache,\n        inputWithoutCache: acc.inputWithoutCache + item.inputWithoutCache,\n        cacheRead: acc.cacheRead + item.cacheRead,\n        output: acc.output + item.output,\n        totalTokens: acc.totalTokens + item.totalTokens,\n        apiCost: acc.apiCost + (item.apiCost || 0),\n        costToYou: acc.costToYou + (item.costToYou || 0),\n    }), {\n        inputWithCache: 0,\n        inputWithoutCache: 0,\n        cacheRead: 0,\n        output: 0,\n        totalTokens: 0,\n        apiCost: 0,\n        costToYou: 0,\n    }) : null\n\n    const formatNumber = (num: number) => {\n        return new Intl.NumberFormat().format(num)\n    }\n\n    const formatCurrency = (amount: number) => {\n        return `$${amount.toFixed(2)}`\n    }\n    const hasApiCost = usageHistory.some(item => item.apiCost)\n    const hasCostToYou = usageHistory.some(item => item.costToYou)\n\n    return (\n        <Card className={cn(\"w-full gap-1 py-3 md:py-6\", className)}>\n            <CardHeader className=\"space-y-2 pb-2 md:pb-4 px-3 md:px-6\">\n                {title && (\n                <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg font-medium text-foreground flex items-center gap-2\">\n                        {title}\n                    </CardTitle>\n                </div>\n                )}\n                {description && (\n                    <CardDescription className=\"text-sm font-light text-muted-foreground leading-relaxed\">\n                        {description}\n                    </CardDescription>\n                )}\n            </CardHeader>\n            <CardContent className=\"px-3 md:px-6\">\n                <div className=\"overflow-x-auto border rounded-lg\">\n                    <Table>\n                        <TableCaption className=\"sr-only\">Model usage summary with token counts and costs</TableCaption>\n                        <TableHeader>\n                            <TableRow className=\"border-muted-foreground/30 bg-muted/50 hover:bg-muted/50\">\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-left whitespace-pre-wrap\">MODEL</TableHead>\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    INPUT (W/ CACHE WRITE)\n                                </TableHead>\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    INPUT (W/O CACHE WRITE)\n                                </TableHead>\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    CACHE READ\n                                </TableHead>\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    OUTPUT\n                                </TableHead>\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    TOTAL TOKENS\n                                </TableHead>\n                                {hasApiCost && (\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    API COST\n                                </TableHead>\n                                )}\n                                {hasCostToYou && (\n                                <TableHead className=\"text-muted-foreground text-xs font-semibold text-right whitespace-pre-wrap\">\n                                    COST TO YOU\n                                </TableHead>\n                                )}\n                            </TableRow>\n                        </TableHeader>\n                        <TableBody className=\"overflow-auto\">\n                            {usageHistory.length === 0 && (\n                                <TableRow className=\"border-muted-foreground/10\">\n                                    <TableCell colSpan={8} className=\"h-24 text-center text-muted-foreground pl-6 pr-6\">\n                                        No usage data available\n                                    </TableCell>\n                                </TableRow>\n                            )}\n                            {usageHistory.map((item, index) => (\n                                <TableRow key={item.model || index} className=\"\">\n                                    <TableCell className=\"font-mono text-foreground\">\n                                        {item.model}\n                                    </TableCell>\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatNumber(item.inputWithCache)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatNumber(item.inputWithoutCache)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatNumber(item.cacheRead)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatNumber(item.output)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatNumber(item.totalTokens)}\n                                    </TableCell>\n                                    {hasApiCost && (\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatCurrency(item.apiCost || 0)}\n                                    </TableCell>\n                                    )}\n                                    {hasCostToYou && (\n                                    <TableCell className=\"text-right text-foreground font-mono\">\n                                        {formatCurrency(item.costToYou || 0)}\n                                    </TableCell>\n                                    )}\n                                </TableRow>\n                            ))}\n                            {showTotal && totalRow && (\n                                <TableRow className=\"font-medium bg-muted/50 hover:bg-muted/50\">\n                                    <TableCell className=\"font-mono  font-semibold\">\n                                        Total\n                                    </TableCell>\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatNumber(totalRow.inputWithCache)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatNumber(totalRow.inputWithoutCache)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatNumber(totalRow.cacheRead)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatNumber(totalRow.output)}\n                                    </TableCell>\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatNumber(totalRow.totalTokens)}\n                                    </TableCell>\n                                    {hasApiCost && (\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatCurrency(totalRow.apiCost || 0)}\n                                    </TableCell>\n                                    )}\n                                    {hasCostToYou && (\n                                    <TableCell className=\"text-right  font-mono font-semibold\">\n                                        {formatCurrency(totalRow.costToYou || 0)}\n                                    </TableCell>\n                                    )}\n                                </TableRow>\n                            )}\n                        </TableBody>\n                    </Table>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}",
      "type": "registry:component",
      "target": "components/billingsdk/usage-table.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-table-demo.tsx",
      "content": "import { UsageTable, type UsageItem } from '@/registry/billingsdk/usage-table';\n\nexport default function UsageTableDemo() {\n  const usageHistory: UsageItem[] = [\n    {\n      model: 'gpt-5',\n      inputWithCache: 0,\n      inputWithoutCache: 518131,\n      cacheRead: 1646080,\n      output: 103271,\n      totalTokens: 2267482,\n    },\n    {\n      model: 'claude-3.5-sonnet',\n      inputWithCache: 176177,\n      inputWithoutCache: 28413,\n      cacheRead: 434612,\n      output: 8326,\n      totalTokens: 647528,\n      costToYou: 1.00\n    },\n    {\n      model: 'gemini-2.0-flash-exp',\n      inputWithCache: 176100,\n      inputWithoutCache: 28432,\n      cacheRead: 434612,\n      output: 8326,\n      totalTokens: 647528,\n      apiCost: 1,\n      costToYou: 0\n    },\n    {\n      model: 'gemini-2.5-pro',\n      inputWithCache: 176177,\n      inputWithoutCache: 28413,\n      cacheRead: 434612,\n      output: 7000,\n      totalTokens: 647528,\n      apiCost: 1,\n      costToYou: 0\n    },\n    {\n      model: 'claude-4-sonnet',\n      inputWithCache: 68415,\n      inputWithoutCache: 902,\n      cacheRead: 864450,\n      output: 12769,\n      totalTokens: 946536,\n      apiCost: 0.71,\n      costToYou: 0.71\n    },\n    {\n      model: 'claude-3.7-sonnet',\n      inputWithCache: 68415,\n      inputWithoutCache: 902,\n      cacheRead: 864450,\n      output: 12769,\n      totalTokens: 946536,\n      apiCost: 0.71,\n    },\n    {\n      model: 'auto',\n      inputWithCache: 84551,\n      inputWithoutCache: 0,\n      cacheRead: 284876,\n      output: 9458,\n      totalTokens: 378885,\n      apiCost: 0.23,\n      costToYou: 0\n    },\n    {\n      model: 'sonic',\n      inputWithCache: 0,\n      inputWithoutCache: 149484,\n      cacheRead: 4354855,\n      output: 23569,\n      totalTokens: 4527908,\n      costToYou: 2\n    }\n  ];\n\n\n  return (\n      <UsageTable \n        title=\"Usage Summary\"\n        usageHistory={usageHistory}\n        showTotal={true}\n        description=\"Per-model LLM usage with token counts, cache reads, and API cost.\"\n      />\n  );\n}",
      "type": "registry:component",
      "target": "components/usage-table-demo.tsx"
    }
  ]
}