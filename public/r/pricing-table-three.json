{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-three",
  "type": "registry:block",
  "title": "Pricing Table Three",
  "description": "A pricing table component with a feature table",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "radio-group",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-three.tsx",
      "content": "'use client'\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Check } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { type Plan } from \"@/lib/billingsdk-config\"\r\nimport { useState } from \"react\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\nimport { AnimatePresence, motion } from \"motion/react\"\r\n\r\nconst sectionVariants = cva(\"mt-10 max-w-7xl mx-auto\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"mt-6\",\r\n      medium: \"mt-8\",\r\n      large: \"mt-10\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"small\",\r\n  },\r\n})\r\n\r\nconst toggleContainerVariants = cva(\r\n  \"bg-muted flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        small: \"h-9 text-base\",\r\n        medium: \"h-10 text-lg\",\r\n        large: \"h-11 text-lg\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"large\",\r\n    },\r\n  }\r\n)\r\n\r\nconst labelPaddingVariants = cva(\"px-7\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"px-5\",\r\n      medium: \"px-6\",\r\n      large: \"px-7\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nconst cardTitleVariants = cva(\"text-xl\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"text-lg\",\r\n      medium: \"text-xl\",\r\n      large: \"text-xl\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nconst cardDescriptionVariants = cva(\"text-sm\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"text-xs\",\r\n      medium: \"text-sm\",\r\n      large: \"text-sm\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nconst priceTextVariants = cva(\"text-4xl font-medium\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"text-3xl\",\r\n      medium: \"text-4xl\",\r\n      large: \"text-4xl\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nconst featureIconVariants = cva(\"w-4 h-4\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"w-3 h-3\",\r\n      medium: \"w-4 h-4\",\r\n      large: \"w-4 h-4\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nconst footerWrapperVariants = cva(\r\n  \"flex items-center justify-between bg-muted/50 p-6 border-t border-border\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        small: \"p-4\",\r\n        medium: \"p-5\",\r\n        large: \"p-6\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"large\",\r\n    },\r\n  }\r\n)\r\n\r\nconst footerTextVariants = cva(\"text-lg font-medium text-card-foreground text-left w-full my-auto\", {\r\n  variants: {\r\n    variant: {\r\n      small: \"text-base\",\r\n      medium: \"text-lg\",\r\n      large: \"text-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    variant: \"large\",\r\n  },\r\n})\r\n\r\nexport interface PricingTableProps extends VariantProps<typeof sectionVariants> {\r\n  className?: string\r\n  plans: Plan[]\r\n  onPlanSelect?: (planId: string) => void\r\n  showFooter?: boolean\r\n  footerText?: string\r\n  footerButtonText?: string\r\n  onFooterButtonClick?: () => void\r\n}\r\n\r\nexport function PricingTableThree({ className, plans, onPlanSelect, showFooter, footerText, footerButtonText, onFooterButtonClick, variant }: PricingTableProps) {\r\n  const [isAnnually, setIsAnnually] = useState(false);\r\n\r\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\r\n    const monthly = parseFloat(monthlyPrice);\r\n    const yearly = parseFloat(yearlyPrice);\r\n\r\n    if (\r\n      monthlyPrice.toLowerCase() === \"custom\" ||\r\n      yearlyPrice.toLowerCase() === \"custom\" ||\r\n      isNaN(monthly) ||\r\n      isNaN(yearly) ||\r\n      monthly === 0\r\n    ) {\r\n      return 0;\r\n    }\r\n\r\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\r\n    return Math.round(discount);\r\n  }\r\n\r\n  const yearlyPriceDiscount = plans.length\r\n    ? Math.max(\r\n      ...plans.map((plan) =>\r\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\r\n      )\r\n    )\r\n    : 0;\r\n\r\n  return (\r\n    <div className={cn(sectionVariants({ variant }), className)}>\r\n      {/* Header Section with Toggle */}\r\n      <div className=\"flex flex-col justify-between md:gap-10 gap-4 md:flex-row mb-8 items-center md:items-start\">\r\n        <div className={cn(toggleContainerVariants({ variant }))}>\r\n          <RadioGroup\r\n            defaultValue=\"monthly\"\r\n            className=\"h-full grid-cols-2\"\r\n            onValueChange={(value) => {\r\n              setIsAnnually(value === \"annually\");\r\n            }}\r\n          >\r\n            <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n              <RadioGroupItem\r\n                value=\"monthly\"\r\n                id=\"monthly\"\r\n                className=\"peer sr-only\"\r\n              />\r\n              <Label\r\n                htmlFor=\"monthly\"\r\n                className={cn(\r\n                  \"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center font-semibold\",\r\n                  labelPaddingVariants({ variant })\r\n                )}\r\n              >\r\n                Monthly\r\n              </Label>\r\n            </div>\r\n            <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n              <RadioGroupItem\r\n                value=\"annually\"\r\n                id=\"annually\"\r\n                className=\"peer sr-only\"\r\n              />\r\n              <Label\r\n                htmlFor=\"annually\"\r\n                className={cn(\r\n                  \"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 font-semibold\",\r\n                  labelPaddingVariants({ variant })\r\n                )}\r\n              >\r\n                Yearly\r\n              </Label>\r\n            </div>\r\n          </RadioGroup>\r\n        </div>\r\n        <div className=\"flex justify-center\">\r\n          {yearlyPriceDiscount > 0 && (\r\n            <span className=\"text-xs mt-2 text-muted-foreground\">\r\n              Save upto {yearlyPriceDiscount}% with yearly plan\r\n            </span>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={cn(\r\n        \"grid gap-4 md:gap-0\",\r\n        plans.length === 1 && \"grid-cols-1 max-w-md mx-auto\",\r\n        plans.length === 2 && \"grid-cols-1 md:grid-cols-2 max-w-4xl mx-auto\",\r\n        plans.length === 3 && \"grid-cols-1 md:grid-cols-3\",\r\n        plans.length === 4 && \"grid-cols-1 md:grid-cols-2 lg:grid-cols-4\",\r\n        plans.length >= 5 && \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\"\r\n      )}>\r\n        {plans.map((plan) => (\r\n          <Card key={plan.id} className={cn(\r\n            \"border rounded-xl md:border-none md:rounded-none text-card-foreground flex flex-col relative transition-all duration-200 shadow-sm md:shadow-none\",\r\n            plan.highlight === true\r\n              ? \"bg-muted/30 md:-mt-8 shadow-lg z-10 md:border-t md:rounded-md border-border\"\r\n              : \"bg-card\"\r\n          )}>\r\n            {plan.badge && (\r\n              <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-secondary text-secondary-foreground px-3 py-1 text-xs\">\r\n                {plan.badge}\r\n              </Badge>\r\n            )}\r\n            <CardHeader className=\"pb-4\">\r\n              <div className=\"space-y-2\">\r\n                <h3 className={cn(cardTitleVariants({ variant }), \"font-semibold text-left\")}>{plan.title}</h3>\r\n                <p className={cn(cardDescriptionVariants({ variant }), \"w-full text-left text-muted-foreground\")}>{plan.description}</p>\r\n              </div>\r\n              <div className=\"space-y-1 text-left\">\r\n                <AnimatePresence mode=\"wait\">\r\n                  {isAnnually ? (\r\n                    <motion.div\r\n                      key=\"yearly\"\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      exit={{ opacity: 0, y: -10 }}\r\n                      transition={{ duration: 0.3 }}\r\n                    >\r\n                      <span className={cn(priceTextVariants({ variant }), \"text-left\")}>\r\n                        {parseFloat(plan.yearlyPrice) >= 0 && (\r\n                          <>\r\n                            {plan.currency}\r\n                          </>\r\n                        )}\r\n                        {plan.yearlyPrice}\r\n                        {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\r\n                          <span className=\"text-xs ml-2 underline\">\r\n                            {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\r\n                          </span>\r\n                        )}\r\n                      </span>\r\n                      <p className=\"text-muted-foreground\">Per year</p>\r\n                    </motion.div>\r\n                  ) : (\r\n                    <motion.div\r\n                      key=\"monthly\"\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      exit={{ opacity: 0, y: -10 }}\r\n                      transition={{ duration: 0.3 }}\r\n                    >\r\n                      <span className={cn(priceTextVariants({ variant }), \"text-left\")}>\r\n                        {parseFloat(plan.monthlyPrice) >= 0 && (\r\n                          <>\r\n                            {plan.currency}\r\n                          </>\r\n                        )}\r\n                        {plan.monthlyPrice}\r\n                      </span>\r\n                      <p className=\"text-muted-foreground\">Per month</p>\r\n                    </motion.div>\r\n                  )}\r\n                </AnimatePresence>\r\n              </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-6 flex-1 flex flex-col\">\r\n              <div className=\"space-y-4 flex-1\">\r\n                {plan.features.map((feature, index) => (\r\n                  <div key={index} className=\"flex items-center gap-3\">\r\n                    {feature.icon === \"check\" ? (\r\n                      <div className=\"w-2 h-2 bg-primary rounded-sm\"></div>\r\n                    ) : (\r\n                      <div className={cn(featureIconVariants({ variant }), feature.iconColor || \"text-muted-foreground\")}>\r\n                        <Check className={cn(featureIconVariants({ variant }))} />\r\n                      </div>\r\n                    )}\r\n                    <span className=\"text-sm\">{feature.name}</span>\r\n                    <span className=\"ml-auto text-sm text-muted-foreground\">Included</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <Button\r\n                className={cn(\r\n                  \"w-full mt-auto hover:cursor-pointer\",\r\n                  plan.highlight === true\r\n                    ? \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 transition duration-300 ease-[cubic-bezier(0.4,0.36,0,1)] before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay\"\r\n                    : \"bg-secondary hover:bg-secondary/80 text-secondary-foreground\"\r\n                )}\r\n                onClick={() => onPlanSelect?.(plan.id)}\r\n              >\r\n                {plan.buttonText}\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Footer Section */}\r\n      {showFooter !== false && (\r\n        <div className={cn(\r\n          footerWrapperVariants({ variant }),\r\n          plans.length === 1 && \"max-w-md mx-auto\",\r\n          plans.length === 2 && \"max-w-4xl mx-auto\"\r\n        )}>\r\n          <div className=\"flex flex-col md:flex-row gap-4 justify-between w-full\">\r\n\r\n              <p className={cn(footerTextVariants({ variant }))}>{footerText || \"Pre-negotiated discounts are available to early-stage startups and nonprofits.\"}</p>\r\n            <Button\r\n              className=\"bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6\"\r\n              onClick={onFooterButtonClick}\r\n            >\r\n              {footerButtonText || \"Apply now\"}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-three.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-three-demo.tsx",
      "content": "'use client'\r\n\r\nimport { PricingTableThree } from '@/components/billingsdk/pricing-table-three';\r\nimport { plans } from '@/lib/billingsdk-config';\r\n\r\nexport function PricingTableThreeDemo() {\r\n\r\n    return (\r\n        <PricingTableThree \r\n            plans={plans}\r\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\r\n            className={\"w-full max-w-4xl mx-auto\"}\r\n            variant=\"small\"\r\n            showFooter={true}\r\n            footerText=\"Pre-negotiated discounts are available to early-stage startups and nonprofits.\"\r\n            footerButtonText=\"Apply now\"\r\n            onFooterButtonClick={() => console.log('Footer button clicked')}\r\n        />\r\n    );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/pricing-table-three-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}