{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details",
  "type": "registry:block",
  "title": "Payment Details",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Calendar, Shield, Check, CreditCard } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { useTheme } from \"@/contexts/theme-context\"\r\nimport { getThemeStyles } from \"@/lib/themes\"\r\n\r\n/**\r\n * Detects the card type based on the card number\r\n * @param cardNumber - The card number to analyze\r\n * @returns The detected card type (visa, mastercard, amex, rupay, diners, or unknown)\r\n * @note This is a best-effort detection based on known BIN ranges\r\n */\r\nconst detectCardType = (cardNumber: string): 'visa' | 'mastercard' | 'amex' | 'rupay' | 'diners' | 'discover' | 'unknown' => {\r\n  const number = cardNumber.replace(/\\s/g, \"\")\r\n\r\n  // Order matters: check more specific patterns first\r\n  if (/^4/.test(number)) return \"visa\"\r\n  if (/^3[47]/.test(number)) return \"amex\"\r\n  // Diners Club with expanded prefixes\r\n  if (/^3(?:0[0-5]|09|095|6|8)/.test(number)) return \"diners\"\r\n  // Mastercard with expanded range (51-55 and 2221-2720)\r\n  if (/^5[1-5]/.test(number) || /^222[1-9]/.test(number) || /^22[3-9]\\d/.test(number) || /^2[3-6]\\d{2}/.test(number) || /^27[0-1]\\d/.test(number) || /^2720/.test(number)) return \"mastercard\"\r\n  // Discover with expanded prefixes\r\n  if (/^6011/.test(number) || /^65/.test(number) || /^64[4-9]/.test(number) || /^622(?:12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9[0-1]\\d|92[0-5])/.test(number)) return \"discover\"\r\n  // More specific RuPay BIN ranges (best effort)\r\n  if (/^60/.test(number) || /^81/.test(number) || /^82/.test(number) || /^508/.test(number)) return \"rupay\"\r\n\r\n  return \"unknown\"\r\n}\r\n\r\n/**\r\n * Formats a card number by adding spaces every 4 digits\r\n * @param value - The raw card number input\r\n * @returns The formatted card number with spaces\r\n */\r\nconst formatCardNumber = (value: string): string => {\r\n  const number = value.replace(/\\s/g, \"\").replace(/[^0-9]/gi, \"\")\r\n  const matches = number.match(/\\d{4,16}/g)\r\n  const match = (matches && matches[0]) || \"\"\r\n  const parts = []\r\n\r\n  for (let i = 0, len = match.length; i < len; i += 4) {\r\n    parts.push(match.substring(i, i + 4))\r\n  }\r\n\r\n  if (parts.length) {\r\n    return parts.join(\" \")\r\n  } else {\r\n    return number\r\n  }\r\n}\r\n\r\n/**\r\n * Formats an expiry date in MM/YY format\r\n * @param value - The raw expiry date input\r\n * @returns The formatted expiry date (MM/YY)\r\n */\r\nconst formatExpiryDate = (value: string): string => {\r\n  const number = value.replace(/\\D/g, \"\")\r\n  if (number.length >= 2) {\r\n    return number.substring(0, 2) + \"/\" + number.substring(2, 4)\r\n  }\r\n  return number\r\n}\r\n\r\n/**\r\n * Validates a card number using the Luhn algorithm\r\n * @param cardNumber - The card number to validate\r\n * @returns Boolean indicating if the card number is valid\r\n */\r\nconst validateLuhn = (cardNumber: string): boolean => {\r\n  const number = cardNumber.replace(/\\s/g, \"\")\r\n  if (!number || !/^\\d+$/.test(number)) return false\r\n  \r\n  let sum = 0\r\n  let shouldDouble = false\r\n  \r\n  // Loop through values starting from the rightmost digit\r\n  for (let i = number.length - 1; i >= 0; i--) {\r\n    let digit = parseInt(number.charAt(i))\r\n    \r\n    if (shouldDouble) {\r\n      digit *= 2\r\n      if (digit > 9) digit -= 9\r\n    }\r\n    \r\n    sum += digit\r\n    shouldDouble = !shouldDouble\r\n  }\r\n  \r\n  return sum % 10 === 0\r\n}\r\n\r\n/**\r\n * Validates the payment form data\r\n * @param data - The form data to validate\r\n * @param validators - Optional validation configuration\r\n * @returns Object containing validation errors\r\n */\r\nconst validateForm = (data: PaymentFormData, validators?: ValidationConfig): Partial<PaymentFormData> => {\r\n  const errors: Partial<PaymentFormData> = {}\r\n  const cardType = detectCardType(data.cardNumber || \"\")\r\n\r\n  if (!data.nameOnCard?.trim()) errors.nameOnCard = \"Name is required\"\r\n  \r\n  // Card number validation with Luhn algorithm\r\n  const strippedCardNumber = data.cardNumber?.replace(/\\s/g, \"\") || \"\"\r\n  if (!strippedCardNumber || strippedCardNumber.length < 13 || !validateLuhn(strippedCardNumber)) {\r\n    errors.cardNumber = \"Valid card number is required\"\r\n  }\r\n  \r\n  // Expiry date validation\r\n  if (!data.validTill || !/^\\d{2}\\/\\d{2}$/.test(data.validTill)) {\r\n    errors.validTill = \"Valid expiry date is required (MM/YY)\"\r\n  } else {\r\n    const [month, year] = data.validTill.split(\"/\")\r\n    const expiryMonth = parseInt(month)\r\n    const expiryYear = 2000 + parseInt(year)\r\n    \r\n    const currentDate = new Date()\r\n    const currentMonth = currentDate.getMonth() + 1 // getMonth() returns 0-11\r\n    const currentYear = currentDate.getFullYear()\r\n    \r\n    if (expiryMonth < 1 || expiryMonth > 12) {\r\n      errors.validTill = \"Invalid expiry month\"\r\n    } else {\r\n      // Create date for last day of expiry month\r\n      const expiryDate = new Date(expiryYear, expiryMonth, 0) // Day 0 gives last day of previous month\r\n      expiryDate.setHours(23, 59, 59, 999) // Set to last moment of the day\r\n      \r\n      if (expiryDate < currentDate) {\r\n        errors.validTill = \"Card has expired\"\r\n      }\r\n    }\r\n  }\r\n  \r\n  // CVV validation based on card type\r\n  const requiredCvvLength = cardType === \"amex\" ? 4 : 3\r\n  if (!data.cvv || data.cvv.length !== requiredCvvLength) {\r\n    errors.cvv = `Valid ${requiredCvvLength}-digit CVV is required`\r\n  }\r\n  \r\n  if (!data.firstName?.trim()) errors.firstName = \"First name is required\"\r\n  if (!data.middleLastName?.trim()) errors.middleLastName = \"Last name is required\"\r\n  if (!data.billingAddress?.trim()) errors.billingAddress = \"Billing address is required\"\r\n  // PIN code validation - configurable based on country\r\n  const pinCodePattern = validators?.pinCode || /^\\d{6}$/\r\n  if (!data.pinCode || !pinCodePattern.test(data.pinCode)) {\r\n    errors.pinCode = validators?.pinCodeErrorMessage || \"Invalid postal code\"\r\n  }\r\n  \r\n  // Contact number validation - configurable based on country\r\n  const contactNumberPattern = validators?.contactNumber || /^\\d{10}$/\r\n  if (!data.contactNumber || !contactNumberPattern.test(data.contactNumber)) {\r\n    errors.contactNumber = validators?.contactNumberErrorMessage || \"Invalid phone number\"\r\n  }\r\n\r\n  return errors\r\n}\r\n\r\nconst CardLogo = ({ type }: { type: string }) => {\r\n  switch (type) {\r\n    case \"visa\":\r\n      return (\r\n        <div className=\"flex items-center justify-center w-10 h-6 bg-blue-600 rounded text-white text-xs font-bold\">\r\n          VISA\r\n        </div>\r\n      )\r\n    case \"mastercard\":\r\n      return (\r\n        <div className=\"flex items-center\">\r\n          <div className=\"w-5 h-5 bg-red-500 rounded-full\"></div>\r\n          <div className=\"w-5 h-5 bg-orange-400 rounded-full -ml-2\"></div>\r\n        </div>\r\n      )\r\n    case \"amex\":\r\n      return (\r\n        <div className=\"flex items-center justify-center w-10 h-6 bg-blue-500 rounded text-white text-xs font-bold\">\r\n          AMEX\r\n        </div>\r\n      )\r\n    case \"rupay\":\r\n      return (\r\n        <div className=\"flex items-center justify-center w-10 h-6 bg-green-600 rounded text-white text-xs font-bold\">\r\n          RuPay\r\n        </div>\r\n      )\r\n    case \"discover\":\r\n      return (\r\n        <div className=\"flex items-center justify-center w-10 h-6 bg-orange-600 rounded text-white text-xs font-bold\">\r\n          DISC\r\n        </div>\r\n      )\r\n    default:\r\n      return <CreditCard className=\"w-5 h-5 text-muted-foreground\" />\r\n  }\r\n}\r\n\r\n/**\r\n * Payment form data interface\r\n */\r\nexport interface PaymentFormData {\r\n  /** Name as it appears on the card */\r\n  nameOnCard?: string\r\n  /** Card number (will be formatted automatically) */\r\n  cardNumber?: string\r\n  /** Expiry date in MM/YY format */\r\n  validTill?: string\r\n  /** Card verification value (CVV) */\r\n  cvv?: string\r\n  /** Customer's first name */\r\n  firstName?: string\r\n  /** Customer's middle and last name */\r\n  middleLastName?: string\r\n  /** Customer's country */\r\n  country?: string\r\n  /** Customer's state */\r\n  state?: string\r\n  /** Customer's city */\r\n  city?: string\r\n  /** Customer's billing address */\r\n  billingAddress?: string\r\n  /** Customer's PIN code */\r\n  pinCode?: string\r\n  /** Customer's phone number */\r\n  contactNumber?: string\r\n  /** General form error message */\r\n  general?: string\r\n}\r\n\r\n/**\r\n * Validation configuration interface\r\n */\r\nexport interface ValidationConfig {\r\n  /** Custom PIN code validation regex */\r\n  pinCode?: RegExp\r\n  /** Custom PIN code error message */\r\n  pinCodeErrorMessage?: string\r\n  /** Custom contact number validation regex */\r\n  contactNumber?: RegExp\r\n  /** Custom contact number error message */\r\n  contactNumberErrorMessage?: string\r\n  /** Country code for phone validation */\r\n  countryCode?: string\r\n}\r\n\r\n/**\r\n * Payment form component props\r\n */\r\nexport interface PaymentFormProps {\r\n  /** Additional CSS classes for styling */\r\n  className?: string\r\n  /** Main title for the payment form */\r\n  title?: string\r\n  /** Description text below the title */\r\n  description?: string\r\n  /** Initial form data */\r\n  initialData?: Partial<PaymentFormData>\r\n  /** Validation configuration */\r\n  validators?: ValidationConfig\r\n  /** Callback when form is submitted */\r\n  onSubmit?: (data: PaymentFormData) => void | Promise<void>\r\n  /** Callback when discard button is clicked */\r\n  onDiscard?: () => void\r\n  /** Text for submit button */\r\n  submitButtonText?: string\r\n  /** Text for discard button */\r\n  discardButtonText?: string\r\n  /** External loading state */\r\n  isLoading?: boolean\r\n  /** Show success confirmation modal */\r\n  showConfirmation?: boolean\r\n  /** Title for confirmation modal */\r\n  confirmationTitle?: string\r\n  /** Message for confirmation modal */\r\n  confirmationMessage?: string\r\n  /** Callback when confirmation is closed */\r\n  onConfirmationClose?: () => void\r\n  /** List of countries for dropdown */\r\n  countries?: string[]\r\n  /** List of states for dropdown */\r\n  states?: string[]\r\n  /** List of cities for dropdown */\r\n  cities?: string[]\r\n}\r\n\r\n/**\r\n * PaymentDetails component - A comprehensive payment form with card details and billing information\r\n * \r\n * Features:\r\n * - Card type detection (Visa, Mastercard, Amex, RuPay, Diners)\r\n * - Real-time input formatting and validation\r\n * - Responsive design with mobile support\r\n * - Accessibility features (ARIA labels, keyboard navigation)\r\n * - Customizable confirmation modal\r\n * - Support for multiple themes\r\n * - Country, state, and city selection\r\n * \r\n * @param props - PaymentFormProps object\r\n * @returns JSX element containing the payment details form\r\n */\r\nexport function PaymentDetails({\r\n  className,\r\n  title = \"Payment Details\",\r\n  description = \"Enter your payment information to complete the transaction.\",\r\n  initialData = {},\r\n  validators,\r\n  onSubmit,\r\n  onDiscard,\r\n  submitButtonText = \"Save Changes\",\r\n  discardButtonText = \"Discard\",\r\n  isLoading = false,\r\n  showConfirmation = false,\r\n  confirmationTitle = \"Payment Details Saved!\",\r\n  confirmationMessage = \"Your payment information has been securely saved and updated.\",\r\n  onConfirmationClose,\r\n  countries = [\"India\", \"United States\", \"United Kingdom\", \"Canada\", \"Australia\"],\r\n  states = [\"Bihar\", \"Karnataka\", \"Maharashtra\"],\r\n  cities = [\"Patna\", \"Bangalore\", \"Mumbai\"],\r\n}: PaymentFormProps) {\r\n  const { currentTheme, previewDarkMode } = useTheme()\r\n  const themeStyles = getThemeStyles(currentTheme, previewDarkMode)\r\n  \r\n  // Initialize with empty strings, allowing initialData to override if provided\r\n  const [formData, setFormData] = useState<PaymentFormData>({\r\n    nameOnCard: \"\",\r\n    cardNumber: \"\",\r\n    validTill: \"\",\r\n    cvv: \"\",\r\n    firstName: \"\",\r\n    middleLastName: \"\",\r\n    country: \"\",\r\n    state: \"\",\r\n    city: \"\",\r\n    billingAddress: \"\",\r\n    pinCode: \"\",\r\n    contactNumber: \"\",\r\n    ...initialData,\r\n  })\r\n\r\n  const [errors, setErrors] = useState<Partial<PaymentFormData>>({})\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [cardType, setCardType] = useState(detectCardType(formData.cardNumber || \"\"))\r\n\r\n  const handleInputChange = (field: keyof PaymentFormData, value: string) => {\r\n    let formattedValue = value\r\n\r\n    // Type guard function to check if a field is a specific key\r\n    const isField = <K extends keyof PaymentFormData>(f: keyof PaymentFormData, k: K): f is K => f === k\r\n\r\n    if (isField(field, \"cardNumber\")) {\r\n      formattedValue = formatCardNumber(value)\r\n      setCardType(detectCardType(formattedValue))\r\n    } else if (isField(field, \"cvv\")) {\r\n      // Limit CVV length based on card type\r\n      const maxLength = cardType === \"amex\" ? 4 : 3\r\n      formattedValue = value.slice(0, maxLength)\r\n    } else if (isField(field, \"validTill\")) {\r\n      formattedValue = formatExpiryDate(value)\r\n    } else if (isField(field, \"pinCode\")) {\r\n      formattedValue = value.replace(/\\D/g, \"\").substring(0, 6)\r\n    } else if (isField(field, \"contactNumber\")) {\r\n      formattedValue = value.replace(/\\D/g, \"\").substring(0, 10)\r\n    }\r\n\r\n    setFormData((prev) => ({ ...prev, [field]: formattedValue }))\r\n\r\n    // Clear error when user starts typing\r\n    if (errors[field]) {\r\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    const formErrors = validateForm(formData, validators)\r\n\r\n    if (Object.keys(formErrors).length > 0) {\r\n      setErrors(formErrors)\r\n      return\r\n    }\r\n\r\n    setIsSubmitting(true)\r\n\r\n    try {\r\n      await onSubmit?.(formData)\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error)\r\n      // Set user-facing error message\r\n      setErrors(prev => ({\r\n        ...prev,\r\n        general: \"Payment submission failed. Please try again.\"\r\n      }))\r\n      // Could also send to monitoring service if integrated\r\n      // monitoringService.captureException(error)\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div \r\n        className={cn(\"w-full max-w-xl rounded-3xl p-6 shadow-sm relative\", className)}\r\n        style={themeStyles}\r\n      >\r\n        <div className=\"mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-foreground mb-2 font-sans\">{title}</h1>\r\n        <p className=\"text-muted-foreground font-sans\">{description}</p>\r\n      </div>\r\n        {/* Card Details Section */}\r\n        <div className=\"mb-6 p-6 rounded-2xl border border-border bg-card/50\">\r\n          <h2 className=\"text-2xl font-semibold text-foreground mb-5 font-sans\">Card Details</h2>\r\n\r\n          <div className=\"space-y-4\">\r\n            {/* Name on Card and Valid Till */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"md:col-span-2\">\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Name On Card <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={formData.nameOnCard || \"\"}\r\n                  onChange={(e) => handleInputChange(\"nameOnCard\", e.target.value)}\r\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                    errors.nameOnCard ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                  }`}\r\n                />\r\n                {errors.nameOnCard && <p className=\"text-destructive text-sm mt-1\">{errors.nameOnCard}</p>}\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Valid Till <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Calendar className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"MM/YY\"\r\n                    value={formData.validTill || \"\"}\r\n                    onChange={(e) => handleInputChange(\"validTill\", e.target.value)}\r\n                    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                      errors.validTill ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                    }`}\r\n                  />\r\n                </div>\r\n                {errors.validTill && <p className=\"text-destructive text-sm mt-1\">{errors.validTill}</p>}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Card Number and CVV */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div className=\"md:col-span-2\">\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Card Number <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center\">\r\n                    <CardLogo type={cardType} />\r\n                  </div>\r\n                  <input\r\n                    type=\"text\"\r\n                    placeholder=\"1234 5678 9012 3456\"\r\n                    value={formData.cardNumber || \"\"}\r\n                    onChange={(e) => handleInputChange(\"cardNumber\", e.target.value)}\r\n                    className={`w-full pl-20 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                      errors.cardNumber ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                    }`}\r\n                  />\r\n                </div>\r\n                {errors.cardNumber && <p className=\"text-destructive text-sm mt-1\">{errors.cardNumber}</p>}\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  CVV <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <div className=\"relative\">\r\n                  <Shield className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\r\n                  <input\r\n                    type=\"password\"\r\n                    placeholder=\"123\"\r\n                    value={formData.cvv || \"\"}\r\n                    onChange={(e) => handleInputChange(\"cvv\", e.target.value)}\r\n                    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                      errors.cvv ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                    }`}\r\n                  />\r\n                </div>\r\n                {errors.cvv && <p className=\"text-destructive text-sm mt-1\">{errors.cvv}</p>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Divider between sections */}\r\n        <div className=\"border-t border-border my-6\"></div>\r\n\r\n        {/* Billing Details Section */}\r\n        <div className=\"mb-6 p-6 rounded-2xl border border-border bg-card/50\">\r\n          <h2 className=\"text-2xl font-semibold text-foreground mb-5 font-sans\">Billing Details</h2>\r\n\r\n          <div className=\"space-y-4\">\r\n            {/* First Name and Middle & Last Name */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  First Name <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={formData.firstName || \"\"}\r\n                  onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\r\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                    errors.firstName ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                  }`}\r\n                />\r\n                {errors.firstName && <p className=\"text-destructive text-sm mt-1\">{errors.firstName}</p>}\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Middle & Last Name <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={formData.middleLastName || \"\"}\r\n                  onChange={(e) => handleInputChange(\"middleLastName\", e.target.value)}\r\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                    errors.middleLastName ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                  }`}\r\n                />\r\n                {errors.middleLastName && <p className=\"text-destructive text-sm mt-1\">{errors.middleLastName}</p>}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Country, State and City */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">Country</label>\r\n                <select\r\n                  value={formData.country || \"\"}\r\n                  onChange={(e) => handleInputChange(\"country\", e.target.value)}\r\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\r\n                >\r\n                  {countries.map((country) => (\r\n                    <option key={country} value={country}>\r\n                      {country}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">State</label>\r\n                <select\r\n                  value={formData.state || \"\"}\r\n                  onChange={(e) => handleInputChange(\"state\", e.target.value)}\r\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\r\n                >\r\n                  {states.map((state) => (\r\n                    <option key={state} value={state}>\r\n                      {state}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">City</label>\r\n                <select\r\n                  value={formData.city || \"\"}\r\n                  onChange={(e) => handleInputChange(\"city\", e.target.value)}\r\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\r\n                >\r\n                  {cities.map((city) => (\r\n                    <option key={city} value={city}>\r\n                      {city}\r\n                    </option>\r\n                  ))}\r\n                </select>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Billing Address */}\r\n            <div>\r\n              <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                Billing Address <span className=\"text-destructive\">*</span>\r\n              </label>\r\n              <textarea\r\n                value={formData.billingAddress || \"\"}\r\n                onChange={(e) => handleInputChange(\"billingAddress\", e.target.value)}\r\n                rows={3}\r\n                className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border resize-none font-sans ${\r\n                  errors.billingAddress ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                }`}\r\n              />\r\n              {errors.billingAddress && <p className=\"text-destructive text-sm mt-1\">{errors.billingAddress}</p>}\r\n            </div>\r\n\r\n            {/* Pin Code and Contact Number */}\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Pin Code <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"123456\"\r\n                  value={formData.pinCode || \"\"}\r\n                  onChange={(e) => handleInputChange(\"pinCode\", e.target.value)}\r\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                    errors.pinCode ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                  }`}\r\n                />\r\n                {errors.pinCode && <p className=\"text-destructive text-sm mt-1\">{errors.pinCode}</p>}\r\n              </div>\r\n              <div>\r\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\r\n                  Phone Number <span className=\"text-destructive\">*</span>\r\n                </label>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"9876543210\"\r\n                  value={formData.contactNumber || \"\"}\r\n                  onChange={(e) => handleInputChange(\"contactNumber\", e.target.value)}\r\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\r\n                    errors.contactNumber ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\r\n                  }`}\r\n                />\r\n                {errors.contactNumber && <p className=\"text-destructive text-sm mt-1\">{errors.contactNumber}</p>}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Display general error message */}\r\n        {errors.general && (\r\n          <div className=\"p-4 mb-6 bg-destructive/10 border border-destructive rounded-xl text-destructive\">\r\n            {errors.general}\r\n          </div>\r\n        )}\r\n        \r\n        {/* Action Buttons */}\r\n        <div className=\"flex justify-end gap-4\">\r\n          <button \r\n            className=\"px-6 py-3 text-muted-foreground font-medium rounded-xl border border-border bg-background hover:bg-muted transition-all duration-200 hover:border-border/80 font-sans\"\r\n            onClick={onDiscard}\r\n            disabled={isSubmitting || isLoading}\r\n          >\r\n            {discardButtonText}\r\n          </button>\r\n          <button\r\n            onClick={handleSubmit}\r\n            disabled={isSubmitting || isLoading}\r\n            className={`px-6 py-3 font-medium rounded-xl transition-all duration-300 shadow-sm hover:shadow-lg font-sans flex items-center gap-2 transform hover:scale-105 active:scale-95 ${\r\n              isSubmitting || isLoading \r\n                ? \"bg-primary text-primary-foreground cursor-not-allowed opacity-70\" \r\n                : \"bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-primary/25\"\r\n            }`}\r\n          >\r\n            {isSubmitting || isLoading ? (\r\n              <>\r\n                <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin\"></div>\r\n                Saving...\r\n              </>\r\n            ) : (\r\n              submitButtonText\r\n            )}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {showConfirmation && (\r\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 animate-in fade-in duration-300\">\r\n          <div className=\"bg-background border border-border rounded-2xl p-8 max-w-md mx-4 animate-in zoom-in-95 duration-300 shadow-lg\">\r\n            <div className=\"text-center\">\r\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n                <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\r\n              </div>\r\n              <h3 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">{confirmationTitle}</h3>\r\n              <p className=\"text-muted-foreground font-sans\">{confirmationMessage}</p>\r\n              <button \r\n                onClick={onConfirmationClose}\r\n                className=\"mt-4 px-6 py-2 bg-primary text-primary-foreground rounded-xl font-medium hover:bg-primary/90 transition-all duration-200 transform hover:scale-105 active:scale-95\"\r\n              >\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-details.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-demo.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react'\r\nimport { PaymentDetails, type PaymentFormData } from '@/components/billingsdk/payment-details'\r\n\r\nexport function PaymentDetailsDemo() {\r\n  const [showConfirmation, setShowConfirmation] = useState(false)\r\n\r\n  const handleSubmit = async (_data: PaymentFormData) => {\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1500))\r\n    setShowConfirmation(true)\r\n    \r\n    // Auto-hide confirmation after 3 seconds\r\n    setTimeout(() => {\r\n      setShowConfirmation(false)\r\n    }, 3000)\r\n  }\r\n\r\n  const handleDiscard = () => {\r\n    console.log('Form discarded')\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-center\">\r\n      <PaymentDetails\r\n        title=\"Payment Details\"\r\n        description=\"Enter your payment information to complete the transaction.\"\r\n        onSubmit={handleSubmit}\r\n        onDiscard={handleDiscard}\r\n        showConfirmation={showConfirmation}\r\n        onConfirmationClose={() => setShowConfirmation(false)}\r\n        countries={[\"India\", \"United States\", \"United Kingdom\", \"Canada\", \"Australia\"]}\r\n        states={[\"Bihar\", \"Karnataka\", \"Maharashtra\"]}\r\n        cities={[\"Patna\", \"Bangalore\", \"Mumbai\"]}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/payment-details-demo.tsx"
    }
  ]
}