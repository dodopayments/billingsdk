{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details",
  "type": "registry:block",
  "title": "Payment Details",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Calendar, Shield, Check, CreditCard } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { useTheme } from \"@/contexts/theme-context\"\nimport { getThemeStyles } from \"@/lib/themes\"\n\n/**\n * Detects the card type based on the card number\n * @param cardNumber - The card number to analyze\n * @returns The detected card type (visa, mastercard, amex, rupay, diners, or unknown)\n * @note This is a best-effort detection based on known BIN ranges\n */\nconst detectCardType = (cardNumber: string): 'visa' | 'mastercard' | 'amex' | 'rupay' | 'diners' | 'discover' | 'unknown' => {\n  const number = cardNumber.replace(/\\s/g, \"\")\n\n  // Order matters: check more specific patterns first\n  if (/^4/.test(number)) return \"visa\"\n  if (/^3[47]/.test(number)) return \"amex\"\n  // Diners Club with expanded prefixes\n  if (/^3(?:0[0-5]|09|095|6|8)/.test(number)) return \"diners\"\n  // Mastercard with expanded range (51-55 and 2221-2720)\n  if (/^5[1-5]/.test(number) || /^222[1-9]/.test(number) || /^22[3-9]\\d/.test(number) || /^2[3-6]\\d{2}/.test(number) || /^27[0-1]\\d/.test(number) || /^2720/.test(number)) return \"mastercard\"\n  // Discover with expanded prefixes\n  if (/^6011/.test(number) || /^65/.test(number) || /^64[4-9]/.test(number) || /^622(?:12[6-9]|1[3-9]\\d|[2-8]\\d{2}|9[0-1]\\d|92[0-5])/.test(number)) return \"discover\"\n  // More specific RuPay BIN ranges (best effort)\n  if (/^60/.test(number) || /^81/.test(number) || /^82/.test(number) || /^508/.test(number)) return \"rupay\"\n\n  return \"unknown\"\n}\n\n/**\n * Formats a card number by adding spaces every 4 digits\n * @param value - The raw card number input\n * @returns The formatted card number with spaces\n */\nconst formatCardNumber = (value: string): string => {\n  const number = value.replace(/\\s/g, \"\").replace(/[^0-9]/gi, \"\")\n  const matches = number.match(/\\d{4,16}/g)\n  const match = (matches && matches[0]) || \"\"\n  const parts = []\n\n  for (let i = 0, len = match.length; i < len; i += 4) {\n    parts.push(match.substring(i, i + 4))\n  }\n\n  if (parts.length) {\n    return parts.join(\" \")\n  } else {\n    return number\n  }\n}\n\n/**\n * Formats an expiry date in MM/YY format\n * @param value - The raw expiry date input\n * @returns The formatted expiry date (MM/YY)\n */\nconst formatExpiryDate = (value: string): string => {\n  const number = value.replace(/\\D/g, \"\")\n  if (number.length >= 2) {\n    return number.substring(0, 2) + \"/\" + number.substring(2, 4)\n  }\n  return number\n}\n\n/**\n * Validates a card number using the Luhn algorithm\n * @param cardNumber - The card number to validate\n * @returns Boolean indicating if the card number is valid\n */\nconst validateLuhn = (cardNumber: string): boolean => {\n  const number = cardNumber.replace(/\\s/g, \"\")\n  if (!number || !/^\\d+$/.test(number)) return false\n  \n  let sum = 0\n  let shouldDouble = false\n  \n  // Loop through values starting from the rightmost digit\n  for (let i = number.length - 1; i >= 0; i--) {\n    let digit = parseInt(number.charAt(i))\n    \n    if (shouldDouble) {\n      digit *= 2\n      if (digit > 9) digit -= 9\n    }\n    \n    sum += digit\n    shouldDouble = !shouldDouble\n  }\n  \n  return sum % 10 === 0\n}\n\n/**\n * Validates the payment form data\n * @param data - The form data to validate\n * @param validators - Optional validation configuration\n * @returns Object containing validation errors\n */\nconst validateForm = (data: PaymentFormData, validators?: ValidationConfig): Partial<PaymentFormData> => {\n  const errors: Partial<PaymentFormData> = {}\n  const cardType = detectCardType(data.cardNumber || \"\")\n\n  if (!data.nameOnCard?.trim()) errors.nameOnCard = \"Name is required\"\n  \n  // Card number validation with Luhn algorithm\n  const strippedCardNumber = data.cardNumber?.replace(/\\s/g, \"\") || \"\"\n  if (!strippedCardNumber || strippedCardNumber.length < 13 || !validateLuhn(strippedCardNumber)) {\n    errors.cardNumber = \"Valid card number is required\"\n  }\n  \n  // Expiry date validation\n  if (!data.validTill || !/^\\d{2}\\/\\d{2}$/.test(data.validTill)) {\n    errors.validTill = \"Valid expiry date is required (MM/YY)\"\n  } else {\n    const [month, year] = data.validTill.split(\"/\")\n    const expiryMonth = parseInt(month)\n    const expiryYear = 2000 + parseInt(year)\n    \n    const currentDate = new Date()\n    const currentMonth = currentDate.getMonth() + 1 // getMonth() returns 0-11\n    const currentYear = currentDate.getFullYear()\n    \n    if (expiryMonth < 1 || expiryMonth > 12) {\n      errors.validTill = \"Invalid expiry month\"\n    } else {\n      // Create date for last day of expiry month\n      const expiryDate = new Date(expiryYear, expiryMonth, 0) // Day 0 gives last day of previous month\n      expiryDate.setHours(23, 59, 59, 999) // Set to last moment of the day\n      \n      if (expiryDate < currentDate) {\n        errors.validTill = \"Card has expired\"\n      }\n    }\n  }\n  \n  // CVV validation based on card type\n  const requiredCvvLength = cardType === \"amex\" ? 4 : 3\n  if (!data.cvv || data.cvv.length !== requiredCvvLength) {\n    errors.cvv = `Valid ${requiredCvvLength}-digit CVV is required`\n  }\n  \n  if (!data.firstName?.trim()) errors.firstName = \"First name is required\"\n  if (!data.middleLastName?.trim()) errors.middleLastName = \"Last name is required\"\n  if (!data.billingAddress?.trim()) errors.billingAddress = \"Billing address is required\"\n  // PIN code validation - configurable based on country\n  const pinCodePattern = validators?.pinCode || /^\\d{6}$/\n  if (!data.pinCode || !pinCodePattern.test(data.pinCode)) {\n    errors.pinCode = validators?.pinCodeErrorMessage || \"Invalid postal code\"\n  }\n  \n  // Contact number validation - configurable based on country\n  const contactNumberPattern = validators?.contactNumber || /^\\d{10}$/\n  if (!data.contactNumber || !contactNumberPattern.test(data.contactNumber)) {\n    errors.contactNumber = validators?.contactNumberErrorMessage || \"Invalid phone number\"\n  }\n\n  return errors\n}\n\nconst CardLogo = ({ type }: { type: string }) => {\n  switch (type) {\n    case \"visa\":\n      return (\n        <div className=\"flex items-center justify-center w-10 h-6 bg-blue-600 rounded text-white text-xs font-bold\">\n          VISA\n        </div>\n      )\n    case \"mastercard\":\n      return (\n        <div className=\"flex items-center\">\n          <div className=\"w-5 h-5 bg-red-500 rounded-full\"></div>\n          <div className=\"w-5 h-5 bg-orange-400 rounded-full -ml-2\"></div>\n        </div>\n      )\n    case \"amex\":\n      return (\n        <div className=\"flex items-center justify-center w-10 h-6 bg-blue-500 rounded text-white text-xs font-bold\">\n          AMEX\n        </div>\n      )\n    case \"rupay\":\n      return (\n        <div className=\"flex items-center justify-center w-10 h-6 bg-green-600 rounded text-white text-xs font-bold\">\n          RuPay\n        </div>\n      )\n    case \"discover\":\n      return (\n        <div className=\"flex items-center justify-center w-10 h-6 bg-orange-600 rounded text-white text-xs font-bold\">\n          DISC\n        </div>\n      )\n    default:\n      return <CreditCard className=\"w-5 h-5 text-muted-foreground\" />\n  }\n}\n\n/**\n * Payment form data interface\n */\nexport interface PaymentFormData {\n  /** Name as it appears on the card */\n  nameOnCard?: string\n  /** Card number (will be formatted automatically) */\n  cardNumber?: string\n  /** Expiry date in MM/YY format */\n  validTill?: string\n  /** Card verification value (CVV) */\n  cvv?: string\n  /** Customer's first name */\n  firstName?: string\n  /** Customer's middle and last name */\n  middleLastName?: string\n  /** Customer's country */\n  country?: string\n  /** Customer's state */\n  state?: string\n  /** Customer's city */\n  city?: string\n  /** Customer's billing address */\n  billingAddress?: string\n  /** Customer's PIN code */\n  pinCode?: string\n  /** Customer's phone number */\n  contactNumber?: string\n  /** General form error message */\n  general?: string\n}\n\n/**\n * Validation configuration interface\n */\nexport interface ValidationConfig {\n  /** Custom PIN code validation regex */\n  pinCode?: RegExp\n  /** Custom PIN code error message */\n  pinCodeErrorMessage?: string\n  /** Custom contact number validation regex */\n  contactNumber?: RegExp\n  /** Custom contact number error message */\n  contactNumberErrorMessage?: string\n  /** Country code for phone validation */\n  countryCode?: string\n}\n\n/**\n * Payment form component props\n */\nexport interface PaymentFormProps {\n  /** Additional CSS classes for styling */\n  className?: string\n  /** Main title for the payment form */\n  title?: string\n  /** Description text below the title */\n  description?: string\n  /** Initial form data */\n  initialData?: Partial<PaymentFormData>\n  /** Validation configuration */\n  validators?: ValidationConfig\n  /** Callback when form is submitted */\n  onSubmit?: (data: PaymentFormData) => void | Promise<void>\n  /** Callback when discard button is clicked */\n  onDiscard?: () => void\n  /** Text for submit button */\n  submitButtonText?: string\n  /** Text for discard button */\n  discardButtonText?: string\n  /** External loading state */\n  isLoading?: boolean\n  /** Show success confirmation modal */\n  showConfirmation?: boolean\n  /** Title for confirmation modal */\n  confirmationTitle?: string\n  /** Message for confirmation modal */\n  confirmationMessage?: string\n  /** Callback when confirmation is closed */\n  onConfirmationClose?: () => void\n  /** List of countries for dropdown */\n  countries?: string[]\n  /** List of states for dropdown */\n  states?: string[]\n  /** List of cities for dropdown */\n  cities?: string[]\n}\n\n/**\n * PaymentDetails component - A comprehensive payment form with card details and billing information\n * \n * Features:\n * - Card type detection (Visa, Mastercard, Amex, RuPay, Diners)\n * - Real-time input formatting and validation\n * - Responsive design with mobile support\n * - Accessibility features (ARIA labels, keyboard navigation)\n * - Customizable confirmation modal\n * - Support for multiple themes\n * - Country, state, and city selection\n * \n * @param props - PaymentFormProps object\n * @returns JSX element containing the payment details form\n */\nexport function PaymentDetails({\n  className,\n  title = \"Payment Details\",\n  description = \"Enter your payment information to complete the transaction.\",\n  initialData = {},\n  validators,\n  onSubmit,\n  onDiscard,\n  submitButtonText = \"Save Changes\",\n  discardButtonText = \"Discard\",\n  isLoading = false,\n  showConfirmation = false,\n  confirmationTitle = \"Payment Details Saved!\",\n  confirmationMessage = \"Your payment information has been securely saved and updated.\",\n  onConfirmationClose,\n  countries = [\"India\", \"United States\", \"United Kingdom\", \"Canada\", \"Australia\"],\n  states = [\"Bihar\", \"Karnataka\", \"Maharashtra\"],\n  cities = [\"Patna\", \"Bangalore\", \"Mumbai\"],\n}: PaymentFormProps) {\n  const { currentTheme, previewDarkMode } = useTheme()\n  const themeStyles = getThemeStyles(currentTheme, previewDarkMode)\n  \n  // Initialize with empty strings, allowing initialData to override if provided\n  const [formData, setFormData] = useState<PaymentFormData>({\n    nameOnCard: \"\",\n    cardNumber: \"\",\n    validTill: \"\",\n    cvv: \"\",\n    firstName: \"\",\n    middleLastName: \"\",\n    country: \"\",\n    state: \"\",\n    city: \"\",\n    billingAddress: \"\",\n    pinCode: \"\",\n    contactNumber: \"\",\n    ...initialData,\n  })\n\n  const [errors, setErrors] = useState<Partial<PaymentFormData>>({})\n  const [isSubmitting, setIsSubmitting] = useState(false)\n  const [cardType, setCardType] = useState(detectCardType(formData.cardNumber || \"\"))\n\n  const handleInputChange = (field: keyof PaymentFormData, value: string) => {\n    let formattedValue = value\n\n    // Type guard function to check if a field is a specific key\n    const isField = <K extends keyof PaymentFormData>(f: keyof PaymentFormData, k: K): f is K => f === k\n\n    if (isField(field, \"cardNumber\")) {\n      formattedValue = formatCardNumber(value)\n      setCardType(detectCardType(formattedValue))\n    } else if (isField(field, \"cvv\")) {\n      // Limit CVV length based on card type\n      const maxLength = cardType === \"amex\" ? 4 : 3\n      formattedValue = value.slice(0, maxLength)\n    } else if (isField(field, \"validTill\")) {\n      formattedValue = formatExpiryDate(value)\n    } else if (isField(field, \"pinCode\")) {\n      formattedValue = value.replace(/\\D/g, \"\").substring(0, 6)\n    } else if (isField(field, \"contactNumber\")) {\n      formattedValue = value.replace(/\\D/g, \"\").substring(0, 10)\n    }\n\n    setFormData((prev) => ({ ...prev, [field]: formattedValue }))\n\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors((prev) => ({ ...prev, [field]: \"\" }))\n    }\n  }\n\n  const handleSubmit = async () => {\n    const formErrors = validateForm(formData, validators)\n\n    if (Object.keys(formErrors).length > 0) {\n      setErrors(formErrors)\n      return\n    }\n\n    setIsSubmitting(true)\n\n    try {\n      await onSubmit?.(formData)\n    } catch (error) {\n      console.error(\"Error submitting form:\", error)\n      // Set user-facing error message\n      setErrors(prev => ({\n        ...prev,\n        general: \"Payment submission failed. Please try again.\"\n      }))\n      // Could also send to monitoring service if integrated\n      // monitoringService.captureException(error)\n    } finally {\n      setIsSubmitting(false)\n    }\n  }\n\n  return (\n    <>\n      <div \n        className={cn(\"w-full max-w-xl rounded-3xl p-6 shadow-sm relative\", className)}\n        style={themeStyles}\n      >\n        <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-foreground mb-2 font-sans\">{title}</h1>\n        <p className=\"text-muted-foreground font-sans\">{description}</p>\n      </div>\n        {/* Card Details Section */}\n        <div className=\"mb-6 p-6 rounded-2xl border border-border bg-card/50\">\n          <h2 className=\"text-2xl font-semibold text-foreground mb-5 font-sans\">Card Details</h2>\n\n          <div className=\"space-y-4\">\n            {/* Name on Card and Valid Till */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Name On Card <span className=\"text-destructive\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.nameOnCard || \"\"}\n                  onChange={(e) => handleInputChange(\"nameOnCard\", e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                    errors.nameOnCard ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                  }`}\n                />\n                {errors.nameOnCard && <p className=\"text-destructive text-sm mt-1\">{errors.nameOnCard}</p>}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Valid Till <span className=\"text-destructive\">*</span>\n                </label>\n                <div className=\"relative\">\n                  <Calendar className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"MM/YY\"\n                    value={formData.validTill || \"\"}\n                    onChange={(e) => handleInputChange(\"validTill\", e.target.value)}\n                    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                      errors.validTill ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                    }`}\n                  />\n                </div>\n                {errors.validTill && <p className=\"text-destructive text-sm mt-1\">{errors.validTill}</p>}\n              </div>\n            </div>\n\n            {/* Card Number and CVV */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Card Number <span className=\"text-destructive\">*</span>\n                </label>\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center\">\n                    <CardLogo type={cardType} />\n                  </div>\n                  <input\n                    type=\"text\"\n                    placeholder=\"1234 5678 9012 3456\"\n                    value={formData.cardNumber || \"\"}\n                    onChange={(e) => handleInputChange(\"cardNumber\", e.target.value)}\n                    className={`w-full pl-20 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                      errors.cardNumber ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                    }`}\n                  />\n                </div>\n                {errors.cardNumber && <p className=\"text-destructive text-sm mt-1\">{errors.cardNumber}</p>}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  CVV <span className=\"text-destructive\">*</span>\n                </label>\n                <div className=\"relative\">\n                  <Shield className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n                  <input\n                    type=\"password\"\n                    placeholder=\"123\"\n                    value={formData.cvv || \"\"}\n                    onChange={(e) => handleInputChange(\"cvv\", e.target.value)}\n                    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                      errors.cvv ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                    }`}\n                  />\n                </div>\n                {errors.cvv && <p className=\"text-destructive text-sm mt-1\">{errors.cvv}</p>}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Divider between sections */}\n        <div className=\"border-t border-border my-6\"></div>\n\n        {/* Billing Details Section */}\n        <div className=\"mb-6 p-6 rounded-2xl border border-border bg-card/50\">\n          <h2 className=\"text-2xl font-semibold text-foreground mb-5 font-sans\">Billing Details</h2>\n\n          <div className=\"space-y-4\">\n            {/* First Name and Middle & Last Name */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  First Name <span className=\"text-destructive\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.firstName || \"\"}\n                  onChange={(e) => handleInputChange(\"firstName\", e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                    errors.firstName ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                  }`}\n                />\n                {errors.firstName && <p className=\"text-destructive text-sm mt-1\">{errors.firstName}</p>}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Middle & Last Name <span className=\"text-destructive\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  value={formData.middleLastName || \"\"}\n                  onChange={(e) => handleInputChange(\"middleLastName\", e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                    errors.middleLastName ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                  }`}\n                />\n                {errors.middleLastName && <p className=\"text-destructive text-sm mt-1\">{errors.middleLastName}</p>}\n              </div>\n            </div>\n\n            {/* Country, State and City */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">Country</label>\n                <select\n                  value={formData.country || \"\"}\n                  onChange={(e) => handleInputChange(\"country\", e.target.value)}\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\n                >\n                  {countries.map((country) => (\n                    <option key={country} value={country}>\n                      {country}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">State</label>\n                <select\n                  value={formData.state || \"\"}\n                  onChange={(e) => handleInputChange(\"state\", e.target.value)}\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\n                >\n                  {states.map((state) => (\n                    <option key={state} value={state}>\n                      {state}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">City</label>\n                <select\n                  value={formData.city || \"\"}\n                  onChange={(e) => handleInputChange(\"city\", e.target.value)}\n                  className=\"w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans\"\n                >\n                  {cities.map((city) => (\n                    <option key={city} value={city}>\n                      {city}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Billing Address */}\n            <div>\n              <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                Billing Address <span className=\"text-destructive\">*</span>\n              </label>\n              <textarea\n                value={formData.billingAddress || \"\"}\n                onChange={(e) => handleInputChange(\"billingAddress\", e.target.value)}\n                rows={3}\n                className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border resize-none font-sans ${\n                  errors.billingAddress ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                }`}\n              />\n              {errors.billingAddress && <p className=\"text-destructive text-sm mt-1\">{errors.billingAddress}</p>}\n            </div>\n\n            {/* Pin Code and Contact Number */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Pin Code <span className=\"text-destructive\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"123456\"\n                  value={formData.pinCode || \"\"}\n                  onChange={(e) => handleInputChange(\"pinCode\", e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                    errors.pinCode ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                  }`}\n                />\n                {errors.pinCode && <p className=\"text-destructive text-sm mt-1\">{errors.pinCode}</p>}\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-muted-foreground mb-2\">\n                  Phone Number <span className=\"text-destructive\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  placeholder=\"9876543210\"\n                  value={formData.contactNumber || \"\"}\n                  onChange={(e) => handleInputChange(\"contactNumber\", e.target.value)}\n                  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${\n                    errors.contactNumber ? \"border-destructive focus:ring-destructive/20\" : \"border-border\"\n                  }`}\n                />\n                {errors.contactNumber && <p className=\"text-destructive text-sm mt-1\">{errors.contactNumber}</p>}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Display general error message */}\n        {errors.general && (\n          <div className=\"p-4 mb-6 bg-destructive/10 border border-destructive rounded-xl text-destructive\">\n            {errors.general}\n          </div>\n        )}\n        \n        {/* Action Buttons */}\n        <div className=\"flex justify-end gap-4\">\n          <button \n            className=\"px-6 py-3 text-muted-foreground font-medium rounded-xl border border-border bg-background hover:bg-muted transition-all duration-200 hover:border-border/80 font-sans\"\n            onClick={onDiscard}\n            disabled={isSubmitting || isLoading}\n          >\n            {discardButtonText}\n          </button>\n          <button\n            onClick={handleSubmit}\n            disabled={isSubmitting || isLoading}\n            className={`px-6 py-3 font-medium rounded-xl transition-all duration-300 shadow-sm hover:shadow-lg font-sans flex items-center gap-2 transform hover:scale-105 active:scale-95 ${\n              isSubmitting || isLoading \n                ? \"bg-primary text-primary-foreground cursor-not-allowed opacity-70\" \n                : \"bg-primary text-primary-foreground hover:bg-primary/90 hover:shadow-primary/25\"\n            }`}\n          >\n            {isSubmitting || isLoading ? (\n              <>\n                <div className=\"w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full animate-spin\"></div>\n                Saving...\n              </>\n            ) : (\n              submitButtonText\n            )}\n          </button>\n        </div>\n      </div>\n\n      {showConfirmation && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 animate-in fade-in duration-300\">\n          <div className=\"bg-background border border-border rounded-2xl p-8 max-w-md mx-4 animate-in zoom-in-95 duration-300 shadow-lg\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n              </div>\n              <h3 className=\"text-xl font-semibold text-foreground mb-2 font-sans\">{confirmationTitle}</h3>\n              <p className=\"text-muted-foreground font-sans\">{confirmationMessage}</p>\n              <button \n                onClick={onConfirmationClose}\n                className=\"mt-4 px-6 py-2 bg-primary text-primary-foreground rounded-xl font-medium hover:bg-primary/90 transition-all duration-200 transform hover:scale-105 active:scale-95\"\n              >\n                Close\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-details.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-demo.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { PaymentDetails, type PaymentFormData } from '@/components/billingsdk/payment-details'\n\nexport function PaymentDetailsDemo() {\n  const [showConfirmation, setShowConfirmation] = useState(false)\n\n  const handleSubmit = async (_data: PaymentFormData) => {\n    // Simulate API call\n    await new Promise((resolve) => setTimeout(resolve, 1500))\n    setShowConfirmation(true)\n    \n    // Auto-hide confirmation after 3 seconds\n    setTimeout(() => {\n      setShowConfirmation(false)\n    }, 3000)\n  }\n\n  const handleDiscard = () => {\n    console.log('Form discarded')\n  }\n\n  return (\n    <div className=\"w-full flex justify-center\">\n      <PaymentDetails\n        title=\"Payment Details\"\n        description=\"Enter your payment information to complete the transaction.\"\n        onSubmit={handleSubmit}\n        onDiscard={handleDiscard}\n        showConfirmation={showConfirmation}\n        onConfirmationClose={() => setShowConfirmation(false)}\n        countries={[\"India\", \"United States\", \"United Kingdom\", \"Canada\", \"Australia\"]}\n        states={[\"Bihar\", \"Karnataka\", \"Maharashtra\"]}\n        cities={[\"Patna\", \"Bangalore\", \"Mumbai\"]}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/payment-details-demo.tsx"
    }
  ]
}