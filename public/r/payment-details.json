{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-details",
  "type": "registry:block",
  "title": "Payment Details",
  "description": "A comprehensive payment details form component with card details, billing information, and country selection",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-details.tsx",
// --- handleSubmit (updated finally block) ---
const handleSubmit = async () => {
  const formErrors = validateForm(formData, validators)

  if (Object.keys(formErrors).length > 0) {
    setErrors(formErrors)
    return
  }

  setIsSubmitting(true)

  try {
    await onSubmit?.(formData)
  } catch (error) {
    console.error("Error submitting form:", error)
    // Set user-facing error message
    setErrors(prev => ({
      ...prev,
      general: "Payment submission failed. Please try again."
    }))
    // Could also send to monitoring service if integrated
    // monitoringService.captureException(error)
  } finally {
    setIsSubmitting(false)
    // Zeroize sensitive CVV from memory
    setFormData((prev) => ({ ...prev, cvv: "" }))
  }
}
// --- end handleSubmit ---

// --- Name On Card input (added autoComplete) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Name On Card <span className="text-destructive">*</span>
</label>
<input
  type="text"
  value={formData.nameOnCard || ""}
  onChange={(e) => handleInputChange("nameOnCard", e.target.value)}
  autoComplete="cc-name"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
    errors.nameOnCard ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
/>
{errors.nameOnCard && <p className="text-destructive text-sm mt-1">{errors.nameOnCard}</p>}
// --- end Name On Card ---

// --- Valid Till input (added autoComplete & inputMode) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Valid Till <span className="text-destructive">*</span>
</label>
<div className="relative">
  <Calendar className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5" />
  <input
    type="text"
    placeholder="MM/YY"
    value={formData.validTill || ""}
    onChange={(e) => handleInputChange("validTill", e.target.value)}
    autoComplete="cc-exp"
    inputMode="numeric"
    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
      errors.validTill ? "border-destructive focus:ring-destructive/20" : "border-border"
    }`}
  />
</div>
{errors.validTill && <p className="text-destructive text-sm mt-1">{errors.validTill}</p>}
// --- end Valid Till ---

// --- Card Number input (added autoComplete & inputMode) ---
<div className="relative">
  <div className="absolute left-4 top-1/2 transform -translate-y-1/2 flex items-center">
    <CardLogo type={cardType} />
  </div>
  <input
    type="text"
    placeholder="1234 5678 9012 3456"
    value={formData.cardNumber || ""}
    onChange={(e) => handleInputChange("cardNumber", e.target.value)}
    autoComplete="cc-number"
    inputMode="numeric"
    className={`w-full pl-20 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
      errors.cardNumber ? "border-destructive focus:ring-destructive/20" : "border-border"
    }`}
  />
</div>
{errors.cardNumber && <p className="text-destructive text-sm mt-1">{errors.cardNumber}</p>}
// --- end Card Number ---

// --- CVV input (added autoComplete & inputMode) ---
<div className="relative">
  <Shield className="absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5" />
  <input
    type="password"
    placeholder="123"
    value={formData.cvv || ""}
    onChange={(e) => handleInputChange("cvv", e.target.value)}
    autoComplete="cc-csc"
    inputMode="numeric"
    className={`w-full pl-12 pr-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
      errors.cvv ? "border-destructive focus:ring-destructive/20" : "border-border"
    }`}
  />
</div>
{errors.cvv && <p className="text-destructive text-sm mt-1">{errors.cvv}</p>}
// --- end CVV ---

// --- First Name input (added autoComplete) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  First Name <span className="text-destructive">*</span>
</label>
<input
  type="text"
  value={formData.firstName || ""}
  onChange={(e) => handleInputChange("firstName", e.target.value)}
  autoComplete="given-name"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
    errors.firstName ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
/>
{errors.firstName && <p className="text-destructive text-sm mt-1">{errors.firstName}</p>}
// --- end First Name ---

// --- Middle & Last Name input (added autoComplete) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Middle & Last Name <span className="text-destructive">*</span>
</label>
<input
  type="text"
  value={formData.middleLastName || ""}
  onChange={(e) => handleInputChange("middleLastName", e.target.value)}
  autoComplete="additional-name family-name"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
    errors.middleLastName ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
/>
{errors.middleLastName && <p className="text-destructive text-sm mt-1">{errors.middleLastName}</p>}
// --- end Middle & Last Name ---

// --- Country / State / City selects (added autoComplete tokens) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">Country</label>
<select
  value={formData.country || ""}
  onChange={(e) => handleInputChange("country", e.target.value)}
  autoComplete="country-name"
  className="w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans"
>
  {countries.map((country) => (
    <option key={country} value={country}>
      {country}
    </option>
  ))}
</select>

<label className="block text-sm font-medium text-muted-foreground mb-2">State</label>
<select
  value={formData.state || ""}
  onChange={(e) => handleInputChange("state", e.target.value)}
  autoComplete="address-level1"
  className="w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans"
>
  {states.map((state) => (
    <option key={state} value={state}>
      {state}
    </option>
  ))}
</select>

<label className="block text-sm font-medium text-muted-foreground mb-2">City</label>
<select
  value={formData.city || ""}
  onChange={(e) => handleInputChange("city", e.target.value)}
  autoComplete="address-level2"
  className="w-full px-4 py-3 border border-border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border custom-select appearance-none font-sans"
>
  {cities.map((city) => (
    <option key={city} value={city}>
      {city}
    </option>
  ))}
</select>
// --- end Country / State / City ---

// --- Billing Address textarea (added autoComplete) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Billing Address <span className="text-destructive">*</span>
</label>
<textarea
  value={formData.billingAddress || ""}
  onChange={(e) => handleInputChange("billingAddress", e.target.value)}
  rows={3}
  autoComplete="address-line1"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border resize-none font-sans ${
    errors.billingAddress ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
></textarea>
{errors.billingAddress && <p className="text-destructive text-sm mt-1">{errors.billingAddress}</p>}
// --- end Billing Address ---

// --- Pin Code input (added autoComplete & inputMode) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Pin Code <span className="text-destructive">*</span>
</label>
<input
  type="text"
  placeholder="123456"
  value={formData.pinCode || ""}
  onChange={(e) => handleInputChange("pinCode", e.target.value)}
  autoComplete="postal-code"
  inputMode="numeric"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
    errors.pinCode ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
/>
{errors.pinCode && <p className="text-destructive text-sm mt-1">{errors.pinCode}</p>}
// --- end Pin Code ---

// --- Contact Number input (added autoComplete & inputMode) ---
<label className="block text-sm font-medium text-muted-foreground mb-2">
  Phone Number <span className="text-destructive">*</span>
</label>
<input
  type="text"
  placeholder="9876543210"
  value={formData.contactNumber || ""}
  onChange={(e) => handleInputChange("contactNumber", e.target.value)}
  autoComplete="tel"
  inputMode="tel"
  className={`w-full px-4 py-3 border rounded-xl bg-background text-foreground font-medium focus:ring-2 focus:ring-ring focus:border-ring transition-all duration-200 hover:border-border font-sans ${
    errors.contactNumber ? "border-destructive focus:ring-destructive/20" : "border-border"
  }`}
/>
{errors.contactNumber && <p className="text-destructive text-sm mt-1">{errors.contactNumber}</p>}
// --- end Contact Number ---
      "type": "registry:component",
      "target": "components/billingsdk/payment-details.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-details-demo.tsx",
      "content": "'use client'\r\n\r\nimport { useState } from 'react'\r\nimport { PaymentDetails, type PaymentFormData } from '@/components/billingsdk/payment-details'\r\n\r\nexport function PaymentDetailsDemo() {\r\n  const [showConfirmation, setShowConfirmation] = useState(false)\r\n\r\n  const handleSubmit = async (_data: PaymentFormData) => {\r\n    // Simulate API call\r\n    await new Promise((resolve) => setTimeout(resolve, 1500))\r\n    setShowConfirmation(true)\r\n    \r\n    // Auto-hide confirmation after 3 seconds\r\n    setTimeout(() => {\r\n      setShowConfirmation(false)\r\n    }, 3000)\r\n  }\r\n\r\n  const handleDiscard = () => {\r\n    console.log('Form discarded')\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-full flex justify-center\">\r\n      <PaymentDetails\r\n        title=\"Payment Details\"\r\n        description=\"Enter your payment information to complete the transaction.\"\r\n        onSubmit={handleSubmit}\r\n        onDiscard={handleDiscard}\r\n        showConfirmation={showConfirmation}\r\n        onConfirmationClose={() => setShowConfirmation(false)}\r\n        countries={[\"India\", \"United States\", \"United Kingdom\", \"Canada\", \"Australia\"]}\r\n        states={[\"Bihar\", \"Karnataka\", \"Maharashtra\"]}\r\n        cities={[\"Patna\", \"Bangalore\", \"Mumbai\"]}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/payment-details-demo.tsx"
    }
  ]
}