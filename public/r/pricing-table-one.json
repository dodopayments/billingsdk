{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-one",
  "type": "registry:block",
  "title": "Pricing Table One",
  "description": "A pricing table component",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "switch",
    "radio-group",
    "label",
    "separator",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-one.tsx",
      "content": "\"use client\";\r\n\r\nimport { Check, Zap } from \"lucide-react\";\r\nimport { useState, useId } from \"react\";\r\nimport { motion, AnimatePresence } from \"motion/react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\r\nimport { Separator } from \"@/components/ui/separator\";\r\nimport { type Plan } from \"@/lib/billingsdk-config\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst sectionVariants = cva(\"py-32\", {\r\n  variants: {\r\n    size: {\r\n      small: \"py-6 md:py-12\",\r\n      medium: \"py-10 md:py-20\",\r\n      large: \"py-16 md:py-32\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-b from-background to-muted/20 relative overflow-hidden\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"medium\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst titleVariants = cva(\"text-pretty text-left font-bold\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-3xl lg:text-4xl\",\r\n      medium: \"text-4xl lg:text-5xl\",\r\n      large: \"text-4xl lg:text-6xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-center bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent p-1\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst descriptionVariants = cva(\"text-muted-foreground max-w-3xl\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-base lg:text-lg\",\r\n      medium: \"text-lg lg:text-xl\",\r\n      large: \"lg:text-xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"text-left\",\r\n      classic: \"text-center mx-auto\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst cardVariants = cva(\r\n  \"flex w-full flex-col rounded-lg border text-left h-full transition-all duration-300\",\r\n  {\r\n    variants: {\r\n      size: {\r\n        small: \"p-4\",\r\n        medium: \"p-5\",\r\n        large: \"p-6\",\r\n      },\r\n      theme: {\r\n        minimal: \"\",\r\n        classic: \"hover:shadow-xl backdrop-blur-sm bg-card/50 border-border/50\",\r\n      },\r\n      highlight: {\r\n        true: \"\",\r\n        false: \"\",\r\n      },\r\n    },\r\n    compoundVariants: [\r\n      {\r\n        theme: \"classic\",\r\n        highlight: true,\r\n        className: \"ring-2 ring-primary/20 border-primary/30 bg-gradient-to-b from-primary/5 to-transparent relative overflow-hidden\",\r\n      },\r\n      {\r\n        theme: \"minimal\",\r\n        highlight: true,\r\n        className: \"bg-muted\",\r\n      },\r\n    ],\r\n    defaultVariants: {\r\n      size: \"large\",\r\n      theme: \"minimal\",\r\n      highlight: false,\r\n    },\r\n  }\r\n);\r\n\r\nconst priceTextVariants = cva(\"font-medium\", {\r\n  variants: {\r\n    size: {\r\n      small: \"text-3xl\",\r\n      medium: \"text-4xl\",\r\n      large: \"text-4xl\",\r\n    },\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"text-5xl font-extrabold bg-gradient-to-r from-foreground to-muted-foreground bg-clip-text text-transparent\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst featureIconVariants = cva(\"\", {\r\n  variants: {\r\n    size: {\r\n      small: \"size-3\",\r\n      medium: \"size-4\",\r\n      large: \"size-4\",\r\n    },\r\n    theme: {\r\n      minimal: \"text-primary\",\r\n      classic: \"text-emerald-500\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"large\",\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst highlightBadgeVariants = cva(\"mb-8 block w-fit\", {\r\n  variants: {\r\n    theme: {\r\n      minimal: \"\",\r\n      classic: \"bg-gradient-to-r from-primary to-primary/80 text-primary-foreground border-primary/20 shadow-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst toggleVariants = cva(\"flex h-11 w-fit shrink-0 items-center rounded-md p-1 text-lg\", {\r\n  variants: {\r\n    theme: {\r\n      minimal: \"bg-muted\",\r\n      classic: \"bg-muted/50 backdrop-blur-sm border border-border/50 shadow-lg\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    theme: \"minimal\",\r\n  },\r\n});\r\n\r\nconst buttonVariants = cva(\r\n  \"gap-2 whitespace-nowrap focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 transition-all duration-300\",\r\n  {\r\n    variants: {\r\n      theme: {\r\n        minimal: \"shadow hover:bg-primary/90 h-9 py-2 group bg-primary text-primary-foreground ring-primary before:from-primary-foreground/20 after:from-primary-foreground/10 relative isolate inline-flex w-full items-center justify-center overflow-hidden rounded-md px-3 text-left text-sm font-medium ring-1 before:pointer-events-none before:absolute before:inset-0 before:-z-10 before:rounded-md before:bg-gradient-to-b before:opacity-80 before:transition-opacity before:duration-300 before:ease-[cubic-bezier(0.4,0.36,0,1)] after:pointer-events-none after:absolute after:inset-0 after:-z-10 after:rounded-md after:bg-gradient-to-b after:to-transparent after:mix-blend-overlay hover:cursor-pointer\",\r\n        classic: \"relative overflow-hidden bg-gradient-to-r from-primary to-primary/80 text-primary-foreground font-semibold py-3 px-6 rounded-lg hover:shadow-xl active:scale-95 border border-primary/20\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      theme: \"minimal\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface PricingTableOneProps extends VariantProps<typeof sectionVariants> {\r\n  className?: string;\r\n  plans: Plan[];\r\n  title?: string;\r\n  description?: string;\r\n  onPlanSelect?: (planId: string) => void;\r\n}\r\n\r\nexport function PricingTableOne({ \r\n  className, \r\n  plans, \r\n  title, \r\n  description, \r\n  onPlanSelect, \r\n  size,\r\n  theme = \"minimal\"\r\n}: PricingTableOneProps) {\r\n  const [isAnnually, setIsAnnually] = useState(false);\r\n  const uniqueId = useId(); // Generate unique ID automatically\r\n\r\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\r\n    const monthly = parseFloat(monthlyPrice);\r\n    const yearly = parseFloat(yearlyPrice);\r\n\r\n    if (\r\n      monthlyPrice.toLowerCase() === \"custom\" ||\r\n      yearlyPrice.toLowerCase() === \"custom\" ||\r\n      isNaN(monthly) ||\r\n      isNaN(yearly) ||\r\n      monthly === 0\r\n    ) {\r\n      return 0;\r\n    }\r\n\r\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\r\n    return Math.round(discount);\r\n  }\r\n\r\n  const yearlyPriceDiscount = plans.length\r\n    ? Math.max(\r\n      ...plans.map((plan) =>\r\n        calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\r\n      )\r\n    )\r\n    : 0;\r\n\r\n  return (\r\n    <section className={cn(sectionVariants({ size, theme }), className)}>\r\n      {/* Classic theme background elements */}\r\n      {theme === \"classic\" && (\r\n        <>\r\n          <div className=\"absolute inset-0 bg-grid-pattern opacity-5\" />\r\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-primary/5 rounded-full blur-3xl\" />\r\n          <div className=\"absolute top-1/4 right-1/4 w-64 h-64 bg-secondary/5 rounded-full blur-2xl\" />\r\n        </>\r\n      )}\r\n      \r\n      <div className={cn(\"container relative\", \"p-0 md:p-[1rem]\")}>\r\n        <div className=\"mx-auto flex max-w-7xl flex-col gap-6\">\r\n          <div className={cn(\"flex flex-col gap-4\", theme === \"classic\" && \"text-center\")}>\r\n            <h2 className={cn(titleVariants({ size, theme }))}>\r\n              {title || \"Pricing\"}\r\n            </h2>\r\n          </div>\r\n\r\n          <div className={cn(\r\n            \"flex flex-col justify-between gap-5 md:gap-10\",\r\n            theme === \"classic\" ? \"md:flex-col md:items-center\" : \"md:flex-row\"\r\n          )}>\r\n            <p className={cn(descriptionVariants({ size, theme }))}>\r\n              {description || \"Transparent pricing with no hidden fees. Upgrade or downgrade anytime.\"}\r\n            </p>\r\n            <div className={cn(toggleVariants({ theme }), theme === \"classic\" && \"mx-auto\")}>\r\n              <RadioGroup\r\n                defaultValue=\"monthly\"\r\n                className=\"h-full grid-cols-2\"\r\n                onValueChange={(value) => {\r\n                  setIsAnnually(value === \"annually\");\r\n                }}\r\n              >\r\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n                  <RadioGroupItem\r\n                    value=\"monthly\"\r\n                    id={`${uniqueId}-monthly`}\r\n                    className=\"peer sr-only\"\r\n                  />\r\n                  <Label\r\n                    htmlFor={`${uniqueId}-monthly`}\r\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center px-2 md:px-7 font-semibold transition-all hover:text-foreground\"\r\n                  >\r\n                    Monthly\r\n                  </Label>\r\n                </div>\r\n                <div className='has-[button[data-state=\"checked\"]]:bg-background h-full rounded-md transition-all'>\r\n                  <RadioGroupItem\r\n                    value=\"annually\"\r\n                    id={`${uniqueId}-annually`}\r\n                    className=\"peer sr-only\"\r\n                  />\r\n                  <Label\r\n                    htmlFor={`${uniqueId}-annually`}\r\n                    className=\"text-muted-foreground peer-data-[state=checked]:text-primary flex h-full cursor-pointer items-center justify-center gap-1 px-2 md:px-7 font-semibold transition-all hover:text-foreground\"\r\n                  >\r\n                    Yearly\r\n                    {yearlyPriceDiscount > 0 && (\r\n                      <span className=\"ml-1 rounded bg-primary/10 px-2 py-0.5 text-xs text-primary border border-primary/20 font-medium\">\r\n                        Save {yearlyPriceDiscount}%\r\n                      </span>\r\n                    )}\r\n                  </Label>\r\n                </div>\r\n              </RadioGroup>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex w-full flex-col items-stretch gap-6 md:flex-row md:items-stretch\">\r\n            {plans.map((plan, index) => (\r\n              <motion.div\r\n                key={plan.id}\r\n                layout\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ duration: 0.3, delay: index * 0.1 }}\r\n                className={cn(\r\n                  cardVariants({ \r\n                    size, \r\n                    theme, \r\n                    highlight: plan.highlight \r\n                  })\r\n                )}\r\n              >\r\n                {/* Classic theme highlight effect */}\r\n                {theme === \"classic\" && plan.highlight && (\r\n                  <>\r\n                    <div className=\"absolute -top-px left-1/2 -translate-x-1/2 w-32 h-px bg-gradient-to-r from-transparent via-primary to-transparent\" />\r\n                    <div className=\"absolute top-4 right-4\">\r\n                      <Badge className={highlightBadgeVariants({ theme })}>\r\n                        Most Popular\r\n                      </Badge>\r\n                    </div>\r\n                  </>\r\n                )}\r\n                \r\n                <Badge className={cn(\r\n                  theme === \"classic\" && !plan.highlight \r\n                    ? \"bg-muted text-muted-foreground border-border/50 mb-8\" \r\n                    : highlightBadgeVariants({ theme })\r\n                )}>\r\n                  {plan.title}\r\n                </Badge>\r\n                \r\n                <AnimatePresence mode=\"wait\">\r\n                  <motion.div\r\n                    key={isAnnually ? \"year\" : \"month\"}\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -10 }}\r\n                    transition={{ duration: 0.2 }}\r\n                  >\r\n                    {isAnnually ? (\r\n                      <>\r\n                        <span className={cn(\"my-auto\", priceTextVariants({ size, theme }))}>\r\n                          {parseFloat(plan.yearlyPrice) >= 0 && (\r\n                            <>\r\n                              {plan.currency}\r\n                            </>\r\n                          )}\r\n                          {plan.yearlyPrice}\r\n                          {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice) > 0 && (\r\n                            <span className={cn(\r\n                              \"text-xs ml-2\",\r\n                              theme === \"classic\" ? \"text-emerald-500 font-semibold\" : \"underline\"\r\n                            )}>\r\n                              {calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)}% off\r\n                            </span>\r\n                          )}\r\n                        </span>\r\n                        <p className=\"text-muted-foreground\">per year</p>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <span className={cn(priceTextVariants({ size, theme }))}>\r\n                          {parseFloat(plan.monthlyPrice) >= 0 && (\r\n                            <>\r\n                              {plan.currency}\r\n                            </>\r\n                          )}\r\n                          {plan.monthlyPrice}\r\n                        </span>\r\n                        <p className=\"text-muted-foreground\">per month</p>\r\n                      </>\r\n                    )}\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n\r\n                <Separator className={cn(\r\n                  \"my-6\",\r\n                  theme === \"classic\" && \"bg-gradient-to-r from-transparent via-border to-transparent\"\r\n                )} />\r\n                \r\n                <div className=\"flex h-full flex-col justify-between gap-10\">\r\n                  <ul className=\"text-muted-foreground space-y-4\">\r\n                    {plan.features.map((feature, featureIndex) => (\r\n                      <motion.li \r\n                        key={featureIndex} \r\n                        className=\"flex items-center gap-3\"\r\n                        initial={{ opacity: 0, x: -10 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ duration: 0.3, delay: featureIndex * 0.05 }}\r\n                      >\r\n                        <Check className={cn(featureIconVariants({ size, theme }))} />\r\n                        <span className={cn(\r\n                          theme === \"classic\" && \"text-foreground/90\"\r\n                        )}>\r\n                          {feature.name}\r\n                        </span>\r\n                      </motion.li>\r\n                    ))}\r\n                  </ul>\r\n\r\n                  <Button\r\n                    className={buttonVariants({ theme })}\r\n                    onClick={() => onPlanSelect?.(plan.id)}\r\n                    aria-label={`Select ${plan.title} plan`}\r\n                  >\r\n                    {theme === \"classic\" && plan.highlight && (\r\n                      <Zap className=\"w-4 h-4 mr-1\" />\r\n                    )}\r\n                    {plan.buttonText}\r\n                    {theme === \"classic\" && (\r\n                      <div className=\"absolute inset-0 bg-gradient-to-r from-white/0 via-white/10 to-white/0 translate-x-[-100%] hover:translate-x-[100%] transition-transform duration-700\" />\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-one.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-one-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { PricingTableOne } from \"@/components/billingsdk/pricing-table-one\"\r\nimport { plans } from \"@/lib/billingsdk-config\"\r\n\r\nexport function PricingTableOneDemo() {\r\n    return <>\r\n        <PricingTableOne plans={plans}\r\n            title=\"Pricing\"\r\n            description=\"Choose the plan that's right for you\"\r\n            onPlanSelect={(planId) => console.log('Selected plan:', planId)}\r\n            size=\"small\" // small, medium, large\r\n            theme=\"classic\" // minimal or classic\r\n            className=\"w-full\"\r\n        />\r\n    </>\r\n}",
      "type": "registry:component",
      "target": "components/pricing-table-one-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}