{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "pricing-table-five",
  "type": "registry:block",
  "title": "Pricing Table Five",
  "description": "A modern pricing table component with contact us plan",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "badge",
    "switch",
    "radio-group",
    "label",
    "separator",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/pricing-table-five.tsx",
      "content": "\"use client\"\n\nimport { useState } from \"react\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Check, Phone } from \"lucide-react\"\nimport { type Plan } from \"@/lib/billingsdk-config\"\nimport { cn } from \"@/lib/utils\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { cva } from \"class-variance-authority\"\nimport { AnimatePresence, motion } from \"motion/react\"\n\nexport interface PricingTableFiveProps {\n  plans: Plan[]\n  title: string\n  description: string\n  onPlanSelect: (planId: string) => void\n  className?: string\n  variant?: \"default\" | \"minimal\"\n}\n\n\nconst switchScaleVariants = cva(\"transition-all\", {\n  variants: {\n    size: {\n      small: \"scale-90\",\n      medium: \"scale-95\",\n      large: \"\",\n    },\n    theme: {\n      minimal: \"\",\n      classic: \"data-[state=checked]:bg-primary\",\n    },\n  },\n  defaultVariants: {\n    size: \"large\",\n    theme: \"minimal\",\n  },\n});\n\n\nconst contactCardVariants = cva(\"border-border shadow-sm w-full md:!w-[30%]\", {\n  variants: {\n    variant: {\n      default: \"bg-primary text-primary-foreground\",\n      minimal: \"bg-card text-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst contactIconContainerVariants = cva(\"w-12 h-12 rounded-lg flex items-center justify-center mx-auto\", {\n  variants: {\n    variant: {\n      default: \"bg-primary\",\n      minimal: \"bg-card\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\n\nconst contactIconVariants = cva(\"w-9 h-9\", {\n  variants: {\n    variant: {\n      default: \"text-primary-foreground\",\n      minimal: \"text-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst contactTitleVariants = cva(\"text-2xl font-bold mb-3\", {\n  variants: {\n    variant: {\n      default: \"text-primary-foreground\",\n      minimal: \"text-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\n\nconst contactDescriptionVariants = cva(\"text-sm leading-relaxed\", {\n  variants: {\n    variant: {\n      default: \"text-primary-foreground\",\n      minimal: \"text-muted-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst contactButtonVariants = cva(\"w-full\", {\n  variants: {\n    variant: {\n      default: \"bg-primary-foreground text-foreground hover:bg-primary-foreground/50\",\n      minimal: \"bg-primary text-primary-foreground hover:bg-primary/60\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nconst contactFooterVariants = cva(\"text-xs\", {\n  variants: {\n    variant: {\n      default: \"text-primary-foreground\",\n      minimal: \"text-muted-foreground\",\n    },\n  },\n  defaultVariants: {\n    variant: \"default\",\n  },\n});\n\nexport function PricingTableFive({ plans, title, description, onPlanSelect,className,variant=\"default\" }: PricingTableFiveProps) {\n  const [isAnnual, setIsAnnual] = useState(false)\n\n\n  function calculateDiscount(monthlyPrice: string, yearlyPrice: string): number {\n    const monthly = parseFloat(monthlyPrice);\n    const yearly = parseFloat(yearlyPrice);\n\n    if (\n      monthlyPrice.toLowerCase() === \"custom\" ||\n      yearlyPrice.toLowerCase() === \"custom\" ||\n      isNaN(monthly) ||\n      isNaN(yearly) ||\n      monthly === 0\n    ) {\n      return 0;\n    }\n\n    const discount = ((monthly * 12 - yearly) / (monthly * 12)) * 100;\n    return Math.round(discount);\n  }\n\n\n  const yearlyPriceDiscount = plans.length\n  ? Math.max(\n    ...plans.map((plan) =>\n      calculateDiscount(plan.monthlyPrice, plan.yearlyPrice)\n    )\n  )\n  : 0;\n\n  const regularPlans = plans.slice(0, -1);\n  const contactUsPlan = plans[plans.length - 1];\n  return (\n    <div className={cn(className,\"w-full\")}>\n      <div className=\"text-center mb-12\">\n        <h1 className=\"text-4xl font-bold text-foreground mb-4 text-balance\">{title}</h1>\n        <p className=\"text-lg text-muted-foreground mb-8 text-pretty\">\n          {description}\n        </p>\n\n        {/* Billing Toggle */}\n        <div className=\"flex items-center justify-center gap-4 mb-4\">\n          <span className={`text-sm font-medium ${!isAnnual ? \"text-foreground\" : \"text-muted-foreground\"}`}>MONTHLY</span>\n          <Switch\n            checked={isAnnual}\n            onCheckedChange={setIsAnnual}\n            className={cn(switchScaleVariants({ size: \"large\", theme: \"minimal\" }))}\n          />\n          <span className={`text-sm font-medium ${isAnnual ? \"text-foreground\" : \"text-muted-foreground\"}`}>ANNUAL</span>\n        <div className=\"flex justify-center\">\n          {yearlyPriceDiscount > 0 && (\n            <motion.span\n              className={cn(\n                \"text-xs  text-emerald-500 font-medium bg-emerald-500/10 px-2 py-1 rounded-md\"\n              )}\n              initial={{ opacity: 0 }}\n              whileInView={{ opacity: 1 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n            >\n              Save {yearlyPriceDiscount}%\n            </motion.span>\n          )}\n        </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col md:!flex-row justify-between gap-4\">\n        <div className=\"flex flex-col gap-5 w-full md:!w-[70%]\">\n          {regularPlans.map((plan) => (\n              <Card key={plan.id} className=\"relative bg-card border border-border shadow-sm  py-4\">\n                {plan.highlight && (\n                  <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-primary text-primary-foreground px-4 py-1\">\n                    {plan.badge}\n                  </Badge>\n                )}\n                <CardContent className=\"w-full flex flex-col md:!flex-row md:!justify-between gap-6\">\n                      <div className=\"flex flex-col justify-center gap-2\">\n                        <CardTitle className=\"w-fit text-sm px-2 py-1 font-medium text-foreground uppercase border  border-border rounded-md\">{plan.title}</CardTitle>\n                        <AnimatePresence mode=\"wait\">\n                        {isAnnual ? (\n                          <motion.div\n                            key=\"yearly\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0, y: -10 }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            <span className=\"text-4xl font-bold text-foreground\">${plan.yearlyPrice}</span>\n                            <span className=\"text-foreground\">/{isAnnual ? \"Year\" : \"Month\"}</span>\n                          </motion.div>\n                        ) : (\n                          <motion.div\n                            key=\"monthly\"\n                            initial={{ opacity: 0, y: 10 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            exit={{ opacity: 0, y: -10 }}\n                            transition={{ duration: 0.3 }}\n                          >\n                            <span className=\"text-4xl font-bold text-foreground\">${plan.monthlyPrice}</span>\n                            <span className=\"text-foreground\">/{isAnnual ? \"Year\" : \"Month\"}</span>\n                          </motion.div>\n                        )}\n                      </AnimatePresence>\n                        <Button onClick={() => onPlanSelect(plan.id)} className=\"w-full bg-primary text-primary-foreground hover:bg-primary/60\">{plan.buttonText}</Button>\n                      </div>\n                      <div className=\"grid gap-4\">\n                        {plan.features.map((feature, index) => (\n                          <div key={index} className=\"flex items-center gap-3\">\n                            <div className=\"flex-shrink-0 w-5 h-5 rounded-full border-2 border-muted-foreground flex items-center justify-center\">\n                              <Check className=\"w-3 h-3 text-muted-foreground\" />\n                            </div>\n                            <span className=\"text-sm text-muted-foreground\">{feature.name}</span>\n                          </div>\n                        ))}\n                      </div>\n                </CardContent>\n              </Card>\n          ))}\n        </div>\n\n        {/* Contact Us Card */}\n        <Card className={cn(contactCardVariants({ variant }))} >\n          <CardContent className=\"p-8 text-center space-y-6\">\n            <div className={cn(contactIconContainerVariants({ variant }))}>\n              <Phone className={cn(contactIconVariants({ variant }))} />\n            </div>\n            <div>\n              <h3 className={cn(contactTitleVariants({ variant }))}>{contactUsPlan.title}</h3>\n              <p className={cn(contactDescriptionVariants({ variant }))}>\n                {contactUsPlan.description}\n              </p>\n            </div>\n            <Button onClick={() => onPlanSelect(plans[plans.length - 1].id)} variant=\"secondary\" className={cn(contactButtonVariants({ variant }))}>\n              {contactUsPlan.buttonText}\n            </Button>\n            <p className={cn(contactFooterVariants({ variant }))}>{contactUsPlan.description}</p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/pricing-table-five.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/pricing-table-five-demo.tsx",
      "content": "\"use client\"\n\nimport { PricingTableFive } from \"@/components/billingsdk/pricing-table-five\"\nimport { plans } from \"@/lib/billingsdk-config\"\n\nexport function PricingTableFiveDemo() {\n  return (\n    <PricingTableFive\n      plans={plans}\n      onPlanSelect={(planId: string) => console.log(\"Selected plan:\", planId)}\n      title=\"Budget-friendly pricing alternatives\"\n      description=\"Get started free or upgrade to share your impact for all completed tasks with multiple people\"\n    />\n  )\n}\n",
      "type": "registry:component",
      "target": "components/pricing-table-five-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}