{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-success-dialog",
  "type": "registry:block",
  "title": "Payment Success Dialog",
  "description": "A success confirmation dialog after payment with confetti",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-success-dialog.tsx",
      "content": "'use client';\n\nimport { forwardRef, useEffect, useImperativeHandle, useMemo, useState } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { CheckCircle2 } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useTheme } from \"@/contexts/theme-context\";\nimport { getThemeStyles } from \"@/lib/themes\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\nexport interface PaymentSuccessDialogProps {\n  title?: string;\n  subtitle?: string;\n  currencySymbol?: string;\n  price: string;\n  productName: string;\n  proceedButtonText?: string;\n  backButtonText?: string;\n  onProceed?: () => void;\n  onBack?: () => void;\n  className?: string;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport interface PaymentSuccessDialogRef {\n  open: () => void;\n  close: () => void;\n}\n\ntype ConfettiPiece = {\n  id: number;\n  x: number;\n  xEnd: number;\n  delay: number;\n  rotation: number;\n  size: number;\n  colorVar: string; // CSS var name like --primary, --accent\n};\n\nexport const PaymentSuccessDialog = forwardRef<PaymentSuccessDialogRef, PaymentSuccessDialogProps>(function PaymentSuccessDialog({\n  title = \"Congratulations!\",\n  subtitle = \"Your payment was successful.\",\n  currencySymbol = \"$\",\n  price,\n  productName,\n  proceedButtonText = \"Proceed\",\n  backButtonText = \"Back\",\n  onProceed,\n  onBack,\n  className,\n  open,\n  onOpenChange,\n}, ref) {\n  const isControlled = open !== undefined;\n  const [internalOpen, setInternalOpen] = useState(false);\n  const openState = isControlled ? (open as boolean) : internalOpen;\n  const setOpenState = (value: boolean) => {\n    if (isControlled) {\n      onOpenChange?.(value);\n    } else {\n      setInternalOpen(value);\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    open: () => setOpenState(true),\n    close: () => setOpenState(false),\n  }), [isControlled, onOpenChange]);\n  const [confettiActive, setConfettiActive] = useState(false);\n  const { currentTheme, previewDarkMode } = useTheme();\n  const themeStyles = getThemeStyles(currentTheme, previewDarkMode);\n\n  useEffect(() => {\n    if (openState) {\n      setConfettiActive(true);\n      const t = setTimeout(() => setConfettiActive(false), 2200);\n      return () => clearTimeout(t);\n    }\n    setConfettiActive(false);\n  }, [openState]);\n\n  const confetti: ConfettiPiece[] = useMemo(() => {\n    const pieces: ConfettiPiece[] = [];\n    const colors = [\"--primary\", \"--accent\", \"--secondary\"];\n    for (let i = 0; i < 42; i++) {\n      const startX = Math.random() * 100;\n      const drift = (Math.random() - 0.5) * 24; // -12% to +12%\n      pieces.push({\n        id: i,\n        x: startX,\n        xEnd: Math.max(0, Math.min(100, startX + drift)),\n        delay: Math.random() * 0.4,\n        rotation: Math.random() * 360,\n        size: 6 + Math.round(Math.random() * 6),\n        colorVar: colors[i % colors.length],\n      });\n    }\n    return pieces;\n  }, []);\n\n  return (\n    <Dialog open={openState} onOpenChange={setOpenState}>\n      <DialogContent\n        className={cn(\n          \"w-[95%] sm:max-w-[560px] p-0 overflow-hidden text-foreground\",\n          className\n        )}\n        style={themeStyles}\n      >\n        <div className=\"relative\">\n          <div className=\"p-7 flex flex-col items-center text-center gap-5\">\n            <div className=\"relative\">\n              <motion.div\n                className=\"absolute inset-0 -z-10 mx-auto size-20 rounded-full blur-xl\"\n                style={{ background: \"var(--primary)\", opacity: 0.12 }}\n                initial={{ scale: 0.9, opacity: 0 }}\n                animate={{ scale: 1, opacity: 0.12 }}\n                transition={{ duration: 0.5, ease: \"easeOut\" }}\n              />\n              <div className=\"relative\">\n                <div className=\"size-16 rounded-full bg-primary/10 flex items-center justify-center border border-primary/30 shadow-sm\">\n                  <CheckCircle2 className=\"size-10 text-primary\" />\n                </div>\n                <motion.span\n                  className=\"absolute inset-0 rounded-full border-2 border-primary/30\"\n                  initial={{ scale: 0.9, opacity: 0.5 }}\n                  animate={{ scale: 1.25, opacity: 0 }}\n                  transition={{ duration: 1.2, repeat: Infinity, ease: \"easeOut\" }}\n                />\n                <motion.span\n                  className=\"absolute inset-0 rounded-full border-2 border-accent/30\"\n                  initial={{ scale: 0.9, opacity: 0.5 }}\n                  animate={{ scale: 1.6, opacity: 0 }}\n                  transition={{ duration: 1.6, repeat: Infinity, ease: \"easeOut\", delay: 0.2 }}\n                />\n              </div>\n            </div>\n\n            <DialogHeader className=\"text-center\">\n              <DialogTitle className=\"text-2xl font-semibold\">\n                {title}\n              </DialogTitle>\n            </DialogHeader>\n            <p className=\"text-sm text-muted-foreground max-w-[38ch]\">{subtitle}</p>\n\n            <div className=\"flex flex-col items-center gap-1\">\n              <motion.div\n                className=\"text-4xl font-semibold tracking-tight\"\n                initial={{ y: 6, opacity: 0 }}\n                animate={{ y: 0, opacity: 1 }}\n                transition={{ type: \"spring\", stiffness: 280, damping: 22 }}\n              >\n                {currencySymbol}\n                {price}\n              </motion.div>\n              <div className=\"text-xs text-muted-foreground\">Paid for {productName}</div>\n            </div>\n\n            <DialogFooter className=\"w-full flex-col sm:flex-col gap-3 mt-1\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => {\n                  onBack?.();\n                  setOpenState(false);\n                }}\n              >\n                {backButtonText}\n              </Button>\n              <Button\n                className=\"w-full\"\n                onClick={() => {\n                  onProceed?.();\n                  setOpenState(false);\n                }}\n              >\n                {proceedButtonText}\n              </Button>\n            </DialogFooter>\n          </div>\n\n          <AnimatePresence>\n            {confettiActive && (\n              <motion.div\n                className=\"pointer-events-none absolute inset-0\"\n                initial={{ opacity: 0 }}\n                animate={{ opacity: 1 }}\n                exit={{ opacity: 0 }}\n              >\n                {confetti.map((c) => (\n                  <motion.span\n                    key={c.id}\n                    className=\"absolute block rounded-[2px]\"\n                    style={{\n                      left: `${c.x}%`,\n                      top: \"-16px\",\n                      width: c.size,\n                      height: c.size * 0.6,\n                      backgroundColor: `var(${c.colorVar})`,\n                    }}\n                    initial={{ y: -20, rotate: c.rotation }}\n                    animate={{ y: 360 + Math.random() * 80, x: `${c.xEnd}%`, rotate: c.rotation + 720 }}\n                    transition={{ duration: 1.8 + Math.random() * 0.8, delay: c.delay, ease: \"easeOut\" }}\n                  />\n                ))}\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n});\n\n\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-success-dialog.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-success-dialog-demo.tsx",
      "content": "'use client';\n\nimport { useState } from \"react\";\nimport { PaymentSuccessDialog } from \"@/components/billingsdk/payment-success-dialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport function PaymentSuccessDialogDemo() {\n  const [, setLastAction] = useState<string>(\"\");\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Card className=\"border-muted/40\">\n      <CardContent className=\"p-6 flex flex-col gap-4\">\n        <div className=\"text-sm text-muted-foreground\">\n          Click the button to preview the success dialog.\n        </div>\n        <button className=\"px-3 py-2 rounded-md border text-sm\" onClick={() => setOpen(true)}>Simulate Payment Success</button>\n        <PaymentSuccessDialog\n          open={open}\n          onOpenChange={setOpen}\n          price=\"29\"\n          currencySymbol=\"$\"\n          productName=\"Pro Plan (Monthly)\"\n          proceedButtonText=\"Go to Dashboard\"\n          backButtonText=\"Back to Pricing\"\n          onProceed={() => setLastAction(\"proceed\")}\n          onBack={() => setLastAction(\"back\")}\n        />\n      </CardContent>\n    </Card>\n  );\n}\n\n\n",
      "type": "registry:component",
      "target": "components/payment-success-dialog-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\n    id: string\n    title: string\n    description: string\n    highlight?: boolean\n    type?: 'monthly' | 'yearly'\n    currency?: string\n    monthlyPrice: string\n    yearlyPrice: string\n    buttonText: string\n    badge?: string\n    features: {\n        name: string\n        icon: string\n        iconColor?: string\n    }[]\n}\n\nexport interface CurrentPlan {\n    plan: Plan\n    type: 'monthly' | 'yearly' | 'custom'\n    price?: string\n    nextBillingDate: string\n    paymentMethod: string\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\n}\n\nexport const plans: Plan[] = [\n    {\n        id: 'starter',\n        title: 'Starter',\n        description: 'For developers testing out Liveblocks locally.',\n        currency: '$',\n        monthlyPrice: '0',\n        yearlyPrice: '0',\n        buttonText: 'Start today for free',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'pro',\n        title: 'Pro',\n        description: 'For companies adding collaboration in production.',\n        currency: '$',\n        monthlyPrice: '20',\n        yearlyPrice: '199',\n        buttonText: 'Sign up',\n        badge: 'Most popular',\n        highlight: true,\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    },\n    {\n        id: 'enterprise',\n        title: 'Enterprise',\n        description: 'For organizations that need more support and compliance features.',\n        currency: '$',\n        monthlyPrice: 'Custom',\n        yearlyPrice: 'Custom',\n        buttonText: 'Contact sales',\n        features: [\n            {\n                name: 'Presence',\n                icon: \"check\",\n                iconColor: 'text-green-500'\n            },\n            {\n                name: 'Comments',\n                icon: \"check\",\n                iconColor: 'text-orange-500'\n            },\n            {\n                name: 'Notifications',\n                icon: \"check\",\n                iconColor: 'text-teal-500'\n            },\n            {\n                name: 'Text Editor',\n                icon: \"check\",\n                iconColor: 'text-blue-500'\n            },\n            {\n                name: 'Sync Datastore',\n                icon: \"check\",\n                iconColor: 'text-zinc-500'\n            }\n        ],\n    }\n];\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}