{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "payment-timeline-card",
  "type": "registry:block",
  "title": "Payment Timeline Card",
  "description": "A payment timeline card component for tracking payment history",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "button",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/payment-timeline-card.tsx",
      "content": "\"use client\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  CreditCard,\n  CheckCircle2,\n  XCircle,\n  Clock,\n  AlertCircle,\n  Calendar,\n  Download,\n  ExternalLink,\n  TrendingUp,\n  ArrowUpRight,\n  Zap,\n} from \"lucide-react\"\n\nexport interface PaymentTimelineItem {\n  id: string\n  date: string\n  amount: string\n  description: string\n  status: \"completed\" | \"failed\" | \"pending\" | \"refunded\" | \"cancelled\"\n  paymentMethod?: string\n  transactionId?: string\n  receiptUrl?: string\n  type?: \"payment\" | \"refund\" | \"chargeback\" | \"adjustment\"\n}\n\ninterface PaymentTimelineCardProps {\n  className?: string\n  title?: string\n  description?: string\n  payments: PaymentTimelineItem[]\n  onDownloadReceipt?: (paymentId: string) => void\n  onViewDetails?: (paymentId: string) => void\n  showPaymentMethod?: boolean\n  showTransactionId?: boolean\n  maxItems?: number\n}\n\nexport function PaymentTimelineCard({\n  className,\n  title = \"Payment Timeline\",\n  description = \"Track your payment history and transaction details.\",\n  payments,\n  onDownloadReceipt,\n  onViewDetails,\n  showPaymentMethod = true,\n  showTransactionId = false,\n  maxItems,\n}: PaymentTimelineCardProps) {\n  if (!payments) return null\n\n  const displayedPayments = maxItems ? payments.slice(0, maxItems) : payments\n\n  const getStatusIcon = (status: PaymentTimelineItem[\"status\"]) => {\n    switch (status) {\n      case \"completed\":\n        return <CheckCircle2 className=\"h-4 w-4 text-emerald-400\" />\n      case \"failed\":\n        return <XCircle className=\"h-4 w-4 text-red-400\" />\n      case \"pending\":\n        return <Clock className=\"h-4 w-4 text-amber-400\" />\n      case \"refunded\":\n        return <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n      case \"cancelled\":\n        return <XCircle className=\"h-4 w-4 text-gray-400\" />\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-400\" />\n    }\n  }\n\n  const getStatusBadge = (status: PaymentTimelineItem[\"status\"]) => {\n    switch (status) {\n      case \"completed\":\n        return (\n          <Badge className=\"bg-gradient-to-r from-emerald-500 to-emerald-600 text-white border-0 shadow-lg shadow-emerald-500/25 hover:shadow-emerald-500/40 transition-all duration-300\">\n            <Zap className=\"h-3 w-3 mr-1\" />\n            Completed\n          </Badge>\n        )\n      case \"failed\":\n        return (\n          <Badge className=\"bg-gradient-to-r from-red-500 to-red-600 text-white border-0 shadow-lg shadow-red-500/25\">\n            Failed\n          </Badge>\n        )\n      case \"pending\":\n        return (\n          <Badge className=\"bg-gradient-to-r from-amber-500 to-orange-500 text-white border-0 shadow-lg shadow-amber-500/25 animate-pulse\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Pending\n          </Badge>\n        )\n      case \"refunded\":\n        return (\n          <Badge className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white border-0 shadow-lg shadow-blue-500/25\">\n            Refunded\n          </Badge>\n        )\n      case \"cancelled\":\n        return <Badge className=\"bg-gradient-to-r from-gray-500 to-gray-600 text-white border-0\">Cancelled</Badge>\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>\n    }\n  }\n\n  const getTypeIcon = (type: PaymentTimelineItem[\"type\"]) => {\n    switch (type) {\n      case \"refund\":\n        return <AlertCircle className=\"h-4 w-4 text-blue-400\" />\n      case \"chargeback\":\n        return <XCircle className=\"h-4 w-4 text-red-400\" />\n      case \"adjustment\":\n        return <Calendar className=\"h-4 w-4 text-purple-400\" />\n      default:\n        return <TrendingUp className=\"h-4 w-4 text-emerald-400\" />\n    }\n  }\n\n  const getStatusGlow = (status: PaymentTimelineItem[\"status\"]) => {\n    switch (status) {\n      case \"completed\":\n        return \"shadow-emerald-500/20\"\n      case \"failed\":\n        return \"shadow-red-500/20\"\n      case \"pending\":\n        return \"shadow-amber-500/20\"\n      case \"refunded\":\n        return \"shadow-blue-500/20\"\n      default:\n        return \"shadow-gray-500/10\"\n    }\n  }\n\n  return (\n    <Card\n      className={cn(\n        \"w-full bg-gradient-to-br from-background via-background to-muted/30 border-0 shadow-2xl shadow-black/5\",\n        className,\n      )}\n    >\n      {(title || description) && (\n        <CardHeader className=\"space-y-3 pb-6\">\n          {title && (\n            <CardTitle className=\"font-bold leading-tight flex items-center gap-3 text-2xl bg-gradient-to-r from-foreground to-foreground/70 bg-clip-text text-transparent\">\n              <div className=\"p-2 rounded-xl bg-gradient-to-br from-primary/20 to-primary/10 border border-primary/20\">\n                <CreditCard className=\"h-5 w-5 text-primary\" />\n              </div>\n              {title}\n            </CardTitle>\n          )}\n          {description && (\n            <CardDescription className=\"text-muted-foreground/80 text-base\">{description}</CardDescription>\n          )}\n        </CardHeader>\n      )}\n      <CardContent className=\"space-y-0 px-6 pb-6\">\n        {displayedPayments.length === 0 ? (\n          <div className=\"py-12 text-center\">\n            <div className=\"p-4 rounded-2xl bg-gradient-to-br from-muted/50 to-muted/30 border border-muted/50 inline-block mb-4\">\n              <CreditCard className=\"h-12 w-12 text-muted-foreground/50\" />\n            </div>\n            <p className=\"text-muted-foreground font-medium\">No payments yet</p>\n            <p className=\"text-sm text-muted-foreground/60 mt-1\">Your payment history will appear here</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {displayedPayments.map((payment, index) => (\n              <div\n                key={payment.id}\n                className={cn(\n                  \"group relative overflow-hidden rounded-2xl border border-border/50 bg-gradient-to-r from-card via-card to-card/50 p-6 transition-all duration-500 hover:scale-[1.02] hover:shadow-xl hover:border-primary/20\",\n                  getStatusGlow(payment.status),\n                )}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500\" />\n\n                <div\n                  className={cn(\n                    \"absolute left-0 top-0 bottom-0 w-1 rounded-r-full transition-all duration-300\",\n                    payment.status === \"completed\" && \"bg-gradient-to-b from-emerald-400 to-emerald-600\",\n                    payment.status === \"failed\" && \"bg-gradient-to-b from-red-400 to-red-600\",\n                    payment.status === \"pending\" && \"bg-gradient-to-b from-amber-400 to-orange-500\",\n                    payment.status === \"refunded\" && \"bg-gradient-to-b from-blue-400 to-blue-600\",\n                    payment.status === \"cancelled\" && \"bg-gradient-to-b from-gray-400 to-gray-600\",\n                  )}\n                />\n\n                <div className=\"relative flex items-start justify-between gap-6\">\n                  <div className=\"flex items-start gap-4 flex-1 min-w-0\">\n                    {/* Status icon  */}\n                    <div\n                      className={cn(\n                        \"flex-shrink-0 p-3 rounded-xl border transition-all duration-300 group-hover:scale-110\",\n                        payment.status === \"completed\" &&\n                          \"bg-emerald-500/10 border-emerald-500/20 shadow-lg shadow-emerald-500/20\",\n                        payment.status === \"failed\" && \"bg-red-500/10 border-red-500/20 shadow-lg shadow-red-500/20\",\n                        payment.status === \"pending\" &&\n                          \"bg-amber-500/10 border-amber-500/20 shadow-lg shadow-amber-500/20\",\n                        payment.status === \"refunded\" &&\n                          \"bg-blue-500/10 border-blue-500/20 shadow-lg shadow-blue-500/20\",\n                        payment.status === \"cancelled\" && \"bg-gray-500/10 border-gray-500/20\",\n                      )}\n                    >\n                      {getStatusIcon(payment.status)}\n                    </div>\n\n                    <div className=\"flex-1 min-w-0 space-y-3\">\n                      <div className=\"flex items-start gap-3\">\n                        {getTypeIcon(payment.type)}\n                        <div className=\"flex-1 min-w-0\">\n                          <h4 className=\"font-semibold text-foreground text-lg leading-tight mb-2\">\n                            {payment.description}\n                          </h4>\n                          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                            <span className=\"flex items-center gap-2 font-medium\">\n                              <Calendar className=\"h-4 w-4\" />\n                              {payment.date}\n                            </span>\n                            {showTransactionId && payment.transactionId && (\n                              <span className=\"font-mono text-xs bg-muted/50 px-2 py-1 rounded-md\">\n                                {payment.transactionId}\n                              </span>\n                            )}\n                          </div>\n                          {showPaymentMethod && payment.paymentMethod && (\n                            <div className=\"mt-2\">\n                              <span className=\"text-sm text-muted-foreground bg-muted/30 px-3 py-1 rounded-full\">\n                                via {payment.paymentMethod}\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Action buttons */}\n                      <div className=\"flex gap-3 opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-y-2 group-hover:translate-y-0\">\n                        {payment.receiptUrl && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"h-9 bg-background/50 border-border/50 hover:bg-primary/10 hover:border-primary/30 transition-all duration-300\"\n                            onClick={() =>\n                              payment.receiptUrl\n                                ? window.open(payment.receiptUrl, \"_blank\", \"noopener,noreferrer\")\n                                : onDownloadReceipt?.(payment.id)\n                            }\n                          >\n                            <Download className=\"h-4 w-4 mr-2\" />\n                            Receipt\n                          </Button>\n                        )}\n                        {onViewDetails && (\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"h-9 bg-background/50 border-border/50 hover:bg-primary/10 hover:border-primary/30 transition-all duration-300\"\n                            onClick={() => onViewDetails(payment.id)}\n                          >\n                            <ExternalLink className=\"h-4 w-4 mr-2\" />\n                            Details\n                            <ArrowUpRight className=\"h-3 w-3 ml-1\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col items-end gap-3 flex-shrink-0\">\n                    <div className=\"text-right\">\n                      <div className=\"text-2xl font-bold text-foreground mb-1\">{payment.amount}</div>\n                      {getStatusBadge(payment.status)}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {maxItems && payments.length > maxItems && (\n          <div className=\"pt-6 mt-6 border-t border-border/50\">\n            <div className=\"text-center p-4 rounded-xl bg-gradient-to-r from-muted/30 to-muted/20 border border-muted/30\">\n              <p className=\"text-sm font-medium text-muted-foreground\">\n                Showing {maxItems} of {payments.length} payments\n              </p>\n              <p className=\"text-xs text-muted-foreground/60 mt-1\">View all transactions in your dashboard</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component",
      "target": "components/billingsdk/payment-timeline-card.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/payment-timeline-card-demo.tsx",
      "content": "'use client'\n\nimport { PaymentTimelineCard, type PaymentTimelineItem } from '@/components/billingsdk/payment-timeline-card';\n\nexport default function PaymentTimelineCardDemo() {\n  const payments: PaymentTimelineItem[] = [\n    {\n      id: 'pay_001',\n      date: 'Dec 1, 2024',\n      amount: '$49.00',\n      description: 'Pro Plan - Monthly Subscription',\n      status: 'completed',\n      paymentMethod: 'Visa •••• 4242',\n      transactionId: 'txn_1ABC123',\n      receiptUrl: 'https://example.com/receipts/pay_001.pdf',\n      type: 'payment'\n    },\n    {\n      id: 'pay_002',\n      date: 'Nov 1, 2024',\n      amount: '$49.00',\n      description: 'Pro Plan - Monthly Subscription',\n      status: 'completed',\n      paymentMethod: 'Visa •••• 4242',\n      transactionId: 'txn_1ABC122',\n      receiptUrl: 'https://example.com/receipts/pay_002.pdf',\n      type: 'payment'\n    },\n    {\n      id: 'pay_003',\n      date: 'Oct 15, 2024',\n      amount: '$24.50',\n      description: 'Partial Refund - Billing Adjustment',\n      status: 'refunded',\n      paymentMethod: 'Visa •••• 4242',\n      transactionId: 'txn_1ABC121',\n      receiptUrl: 'https://example.com/receipts/pay_003.pdf',\n      type: 'refund'\n    },\n    {\n      id: 'pay_004',\n      date: 'Oct 1, 2024',\n      amount: '$49.00',\n      description: 'Pro Plan - Monthly Subscription',\n      status: 'failed',\n      paymentMethod: 'Visa •••• 4242',\n      transactionId: 'txn_1ABC120',\n      type: 'payment'\n    },\n    {\n      id: 'pay_005',\n      date: 'Sep 1, 2024',\n      amount: '$49.00',\n      description: 'Pro Plan - Monthly Subscription',\n      status: 'completed',\n      paymentMethod: 'Mastercard •••• 5555',\n      transactionId: 'txn_1ABC119',\n      receiptUrl: 'https://example.com/receipts/pay_005.pdf',\n      type: 'payment'\n    },\n    {\n      id: 'pay_006',\n      date: 'Aug 15, 2024',\n      amount: '$10.00',\n      description: 'Account Credit Adjustment',\n      status: 'completed',\n      transactionId: 'txn_1ABC118',\n      type: 'adjustment'\n    },\n    {\n      id: 'pay_007',\n      date: 'Aug 1, 2024',\n      amount: '$49.00',\n      description: 'Pro Plan - Monthly Subscription',\n      status: 'pending',\n      paymentMethod: 'Mastercard •••• 5555',\n      transactionId: 'txn_1ABC117',\n      type: 'payment'\n    }\n  ];\n\n  const handleDownloadReceipt = (paymentId: string) => {\n    console.log('Downloading receipt for payment:', paymentId);\n    // In a real app, this would trigger a download\n  };\n\n  const handleViewDetails = (paymentId: string) => {\n    console.log('Viewing details for payment:', paymentId);\n    // In a real app, this would navigate to payment details\n  };\n\n  return (\n    <div className=\"w-full space-y-6\">\n      {/* Default Payment Timeline */}\n      <PaymentTimelineCard\n        payments={payments}\n        onDownloadReceipt={handleDownloadReceipt}\n        onViewDetails={handleViewDetails}\n      />\n\n      {/* Limited Items with Custom Title */}\n      <PaymentTimelineCard\n        title=\"Recent Payments\"\n        description=\"Your last 3 payment transactions.\"\n        payments={payments}\n        maxItems={3}\n        showTransactionId={true}\n        onDownloadReceipt={handleDownloadReceipt}\n        onViewDetails={handleViewDetails}\n        className=\"max-w-2xl\"\n      />\n\n      {/* Minimal Version */}\n      <PaymentTimelineCard\n        title=\"Payment Summary\"\n        payments={payments.slice(0, 4)}\n        showPaymentMethod={false}\n        showTransactionId={false}\n        className=\"max-w-lg\"\n      />\n    </div>\n  );\n}\n\n",
      "type": "registry:component",
      "target": "components/payment-timeline-card-demo.tsx"
    }
  ]
}