{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-plan-card",
  "type": "registry:block",
  "title": "Update Plan Card",
  "description": "A update plan card component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "button",
    "badge",
    "radio-group",
    "toggle",
    "label",
    "card",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/update-plan-card.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { motion, AnimatePresence } from \"motion/react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\"\r\nimport { Toggle } from \"@/components/ui/toggle\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { type Plan } from \"@/lib/billingsdk-config\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nexport interface UpdatePlanCardProps {\r\n    currentPlan: Plan\r\n    plans: Plan[]\r\n    onPlanChange: (planId: string) => void\r\n    className?: string\r\n    title?: string\r\n}\r\n\r\nexport function UpdatePlanCard({ currentPlan, plans, onPlanChange, className, title }: UpdatePlanCardProps) {\r\n    const [isYearly, setIsYearly] = useState(false)\r\n    const [selectedPlan, setSelectedPlan] = useState<string | undefined>(undefined)\r\n\r\n    const getCurrentPrice = (plan: Plan) =>\r\n        isYearly ? `${plan.yearlyPrice}` : `${plan.monthlyPrice}`\r\n\r\n    const handlePlanChange = (planId: string) => {\r\n        setSelectedPlan(planId)\r\n    }\r\n\r\n    return (\r\n        <Card className={cn(\"max-w-xl mx-auto text-left overflow-hidden shadow-lg w-full\", className)}>\r\n            <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\r\n                <CardTitle className=\"text-base font-semibold\">\r\n                    {title || \"Upgrade Plan\"}\r\n                </CardTitle>\r\n                <div className=\"flex items-center gap-2 text-sm\">\r\n                    <Toggle\r\n                        size=\"sm\"\r\n                        pressed={!isYearly}\r\n                        onPressedChange={(pressed) => setIsYearly(!pressed)}\r\n                        className=\"px-3\"\r\n                    >\r\n                        Monthly\r\n                    </Toggle>\r\n                    <Toggle\r\n                        pressed={isYearly}\r\n                        onPressedChange={(pressed) => setIsYearly(pressed)}\r\n                        className=\"px-3\"\r\n                    >\r\n                        Yearly\r\n                    </Toggle>\r\n                </div>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-3\">\r\n                <RadioGroup value={selectedPlan} onValueChange={handlePlanChange}>\r\n                    <AnimatePresence mode=\"wait\">\r\n                        {plans.map((plan) => (\r\n                            <motion.div\r\n                                key={plan.id}\r\n                                onClick={() => handlePlanChange(plan.id)}\r\n                                className={`p-4 rounded-lg border transition-all duration-300 shadow-sm hover:shadow-md cursor-pointer ${selectedPlan === plan.id\r\n                                    ? \"border-primary bg-gradient-to-br from-muted/60 to-muted/30 shadow-md\"\r\n                                    : \"border-border hover:border-primary/50\"\r\n                                    }`}\r\n                            >\r\n                                <div className=\"flex items-start justify-between gap-3\">\r\n                                    <div className=\"flex gap-3 min-w-0 flex-1\">\r\n                                        <RadioGroupItem \r\n                                            value={plan.id} \r\n                                            id={plan.id} \r\n                                            className=\"flex-shrink-0 pointer-events-none\" \r\n                                        />\r\n                                        <div className=\"min-w-0 flex-1\">\r\n                                            <div className=\"flex items-center gap-2 flex-wrap\">\r\n                                                <Label\r\n                                                    htmlFor={plan.id}\r\n                                                    className=\"font-medium cursor-pointer\"\r\n                                                >\r\n                                                    {plan.title}\r\n                                                </Label>\r\n                                                {plan.badge && (\r\n                                                    <Badge variant=\"secondary\" className=\"flex-shrink-0\">{plan.badge}</Badge>\r\n                                                )}\r\n                                            </div>\r\n                                            <p className=\"text-xs text-muted-foreground mt-1\">\r\n                                                {plan.description}\r\n                                            </p>\r\n                                            {plan.features.length > 0 && (\r\n                                                <div className=\"pt-3\">\r\n                                                    <div className=\"flex flex-wrap gap-2\">\r\n                                                        {plan.features.map((feature, featureIndex) => (\r\n                                                            <div\r\n                                                                key={featureIndex}\r\n                                                                className=\"flex items-center gap-2 px-2 py-1 rounded-lg bg-muted/20 border border-border/30 flex-shrink-0\"\r\n                                                            >\r\n                                                                <div className=\"w-1.5 h-1.5 rounded-full bg-primary flex-shrink-0\" />\r\n                                                                <span className=\"text-xs text-muted-foreground whitespace-nowrap\">\r\n                                                                    {feature.name}\r\n                                                                </span>\r\n                                                            </div>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"text-right flex-shrink-0\">\r\n                                        <div className=\"text-xl font-semibold\">\r\n                                            {\r\n                                                parseFloat(getCurrentPrice(plan)) >= 0 ?\r\n                                                    `${plan.currency}${getCurrentPrice(plan)}` :\r\n                                                    getCurrentPrice(plan)\r\n                                            }\r\n                                        </div>\r\n                                        <div className=\"text-xs text-muted-foreground\">\r\n                                            /{isYearly ? \"year\" : \"month\"}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <AnimatePresence>\r\n                                    {selectedPlan === plan.id && (\r\n                                        <motion.div\r\n                                            initial={{ opacity: 0, height: 0, y: -10 }}\r\n                                            animate={{ opacity: 1, height: \"auto\", y: 0 }}\r\n                                            exit={{ opacity: 0, height: 0, y: -10 }}\r\n                                            transition={{ duration: 0.3, ease: \"easeOut\" }}\r\n                                        >\r\n                                            <Button className=\"w-full mt-4\"\r\n                                                disabled={selectedPlan === currentPlan.id}\r\n                                                onClick={() => {\r\n                                                    onPlanChange(plan.id)\r\n                                                }}\r\n                                            >{selectedPlan === currentPlan.id ? \"Current Plan\" : \"Upgrade\"}</Button>\r\n                                        </motion.div>\r\n                                    )}\r\n                                </AnimatePresence>\r\n                            </motion.div>\r\n                        ))}\r\n                    </AnimatePresence>\r\n                </RadioGroup>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}",
      "type": "registry:component",
      "target": "components/billingsdk/update-plan-card.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/update-plan-card-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UpdatePlanCard } from '@/components/billingsdk/update-plan-card';\r\nimport { plans } from '@/lib/billingsdk-config';\r\n\r\nexport function UpdatePlanCardDemo() {\r\n\r\n    return (\r\n        <main className=\"flex flex-1 flex-col justify-center text-center w-full\">\r\n            <UpdatePlanCard\r\n                currentPlan={plans[0]}\r\n                plans={plans}\r\n                onPlanChange={(planId) => {\r\n                    console.log(\"Upgrade plan to\", planId)\r\n                }}\r\n            />\r\n        </main>\r\n    );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/update-plan-card-demo.tsx"
    },
    {
      "path": "src/registry/lib/billingsdk-config.ts",
      "content": "export interface Plan {\r\n    id: string\r\n    title: string\r\n    description: string\r\n    highlight?: boolean\r\n    type?: 'monthly' | 'yearly'\r\n    currency?: string\r\n    monthlyPrice: string\r\n    yearlyPrice: string\r\n    buttonText: string\r\n    badge?: string\r\n    features: {\r\n        name: string\r\n        icon: string\r\n        iconColor?: string\r\n    }[]\r\n}\r\n\r\nexport interface CurrentPlan {\r\n    plan: Plan\r\n    type: 'monthly' | 'yearly' | 'custom'\r\n    price?: string\r\n    nextBillingDate: string\r\n    paymentMethod: string\r\n    status: 'active' | 'inactive' | 'past_due' | 'cancelled'\r\n}\r\n\r\nexport const plans: Plan[] = [\r\n    {\r\n        id: 'starter',\r\n        title: 'Starter',\r\n        description: 'For developers testing out Liveblocks locally.',\r\n        currency: '$',\r\n        monthlyPrice: '0',\r\n        yearlyPrice: '0',\r\n        buttonText: 'Start today for free',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'pro',\r\n        title: 'Pro',\r\n        description: 'For companies adding collaboration in production.',\r\n        currency: '$',\r\n        monthlyPrice: '20',\r\n        yearlyPrice: '199',\r\n        buttonText: 'Sign up',\r\n        badge: 'Most popular',\r\n        highlight: true,\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    },\r\n    {\r\n        id: 'enterprise',\r\n        title: 'Enterprise',\r\n        description: 'For organizations that need more support and compliance features.',\r\n        currency: '$',\r\n        monthlyPrice: 'Custom',\r\n        yearlyPrice: 'Custom',\r\n        buttonText: 'Contact sales',\r\n        features: [\r\n            {\r\n                name: 'Presence',\r\n                icon: \"check\",\r\n                iconColor: 'text-green-500'\r\n            },\r\n            {\r\n                name: 'Comments',\r\n                icon: \"check\",\r\n                iconColor: 'text-orange-500'\r\n            },\r\n            {\r\n                name: 'Notifications',\r\n                icon: \"check\",\r\n                iconColor: 'text-teal-500'\r\n            },\r\n            {\r\n                name: 'Text Editor',\r\n                icon: \"check\",\r\n                iconColor: 'text-blue-500'\r\n            },\r\n            {\r\n                name: 'Sync Datastore',\r\n                icon: \"check\",\r\n                iconColor: 'text-zinc-500'\r\n            }\r\n        ],\r\n    }\r\n];\r\n",
      "type": "registry:lib",
      "target": "lib/billingsdk-config.ts"
    }
  ]
}