{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "billing-settings",
  "type": "registry:block",
  "title": "Billing Settings",
  "description": "A comprehensive billing settings component with tabs for general, payment methods, invoices, and usage limits",
  "dependencies": [
    "lucide-react",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "card",
    "dialog",
    "switch",
    "badge",
    "dropdown-menu",
    "dialog",
    "input",
    "label"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/billing-settings.tsx",
      "content": "\"use client\"\r\n\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { Switch } from \"@/components/ui/switch\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\r\nimport { ChevronDown, CreditCard, Plus } from \"lucide-react\"\r\n\r\nconst tabs = [\r\n  { id: \"general\", label: \"General\" },\r\n  { id: \"payment\", label: \"Payment\" },\r\n  { id: \"invoices\", label: \"Invoices\" },\r\n  { id: \"limits\", label: \"Limits\" },\r\n]\r\n\r\ninterface CardInfo {\r\n  id: string\r\n  last4: string\r\n  brand: string\r\n  expiry: string\r\n  primary?: boolean\r\n}\r\n\r\ninterface BillingSettingsProps {\r\n  \r\n  activeTab: string\r\n  onTabChange: (tab: string) => void\r\n\r\n  \r\n  emailNotifications: boolean\r\n  onEmailNotificationsChange: (value: boolean) => void\r\n\r\n  usageAlerts: boolean\r\n  onUsageAlertsChange: (value: boolean) => void\r\n\r\n  invoiceReminders: boolean\r\n  onInvoiceRemindersChange: (value: boolean) => void\r\n\r\n  \r\n  cards: CardInfo[]\r\n  onAddCard: () => void\r\n\r\n  \r\n  invoiceFormat: \"PDF\" | \"HTML\"\r\n  onInvoiceFormatChange: (format: \"PDF\" | \"HTML\") => void\r\n  onEditBillingAddress: () => void\r\n\r\n  \r\n  overageProtection: boolean\r\n  onOverageProtectionChange: (value: boolean) => void\r\n\r\n  usageLimitAlerts: boolean\r\n  onUsageLimitAlertsChange: (value: boolean) => void\r\n  className?: string\r\n}\r\n\r\ninterface SettingItemProps {\r\n  title: string\r\n  description: string\r\n  checked: boolean\r\n  onCheckedChange: (checked: boolean) => void\r\n}\r\n\r\nfunction SettingItem({ title, description, checked, onCheckedChange }: SettingItemProps) {\r\n  const switchId = `switch-${title.toLowerCase().replace(/\\s+/g, '-')}`;\r\n  \r\n  return (\r\n    <div className=\"flex items-center justify-between py-4 gap-4\">\r\n      <div className=\"space-y-0.5 flex-1 min-w-0\">\r\n        <label htmlFor={switchId} className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\">\r\n          {title}\r\n        </label>\r\n        <p className=\"text-sm text-muted-foreground\">\r\n          {description}\r\n        </p>\r\n      </div>\r\n      <Switch \r\n        id={switchId}\r\n        checked={checked}\r\n        onCheckedChange={onCheckedChange}\r\n        className=\"shrink-0\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\ninterface TabNavigationProps {\r\n  activeTab: string\r\n  onTabChange: (tab: string) => void\r\n}\r\n\r\nfunction TabNavigation({ activeTab, onTabChange }: TabNavigationProps) {\r\n  return (\r\n    <div className=\"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground w-full gap-1\">\r\n      {tabs.map((tab) => (\r\n        <button\r\n          key={tab.id}\r\n          onClick={() => onTabChange(tab.id)}\r\n          className={`inline-flex items-center justify-center whitespace-nowrap rounded-md px-2 sm:px-3 py-1 text-xs sm:text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 flex-1 ${\r\n            activeTab === tab.id\r\n              ? \"bg-background text-foreground shadow\"\r\n              : \"hover:bg-background/50 hover:text-foreground\"\r\n          }`}\r\n        >\r\n          {tab.label}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport function BillingSettings({\r\n  activeTab,\r\n  onTabChange,\r\n  emailNotifications,\r\n  onEmailNotificationsChange,\r\n  usageAlerts,\r\n  onUsageAlertsChange,\r\n  invoiceReminders,\r\n  onInvoiceRemindersChange,\r\n  cards,\r\n  onAddCard,\r\n  invoiceFormat,\r\n  onInvoiceFormatChange,\r\n  onEditBillingAddress,\r\n  overageProtection,\r\n  onOverageProtectionChange,\r\n  usageLimitAlerts,\r\n  onUsageLimitAlertsChange,\r\n  className,\r\n}: BillingSettingsProps) {\r\n  const renderGeneralContent = () => (\r\n    <div className=\"space-y-0 divide-y divide-border\">\r\n      <SettingItem\r\n        title=\"Email notifications\"\r\n        description=\"Receive billing updates via email\"\r\n        checked={emailNotifications}\r\n        onCheckedChange={onEmailNotificationsChange}\r\n      />\r\n      <SettingItem\r\n        title=\"Usage alerts\"\r\n        description=\"Get notified when approaching limits\"\r\n        checked={usageAlerts}\r\n        onCheckedChange={onUsageAlertsChange}\r\n      />\r\n      <SettingItem\r\n        title=\"Invoice reminders\"\r\n        description=\"Remind me before auto-renewal\"\r\n        checked={invoiceReminders}\r\n        onCheckedChange={onInvoiceRemindersChange}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const renderPaymentContent = () => (\r\n    <div className=\"space-y-4\">\r\n      {cards.map((card) => (\r\n        <div key={card.id} className=\"flex flex-col sm:flex-row sm:items-center justify-between rounded-lg border p-3 sm:p-4 gap-3\">\r\n          <div className=\"flex items-center gap-3 min-w-0\">\r\n            <CreditCard className=\"h-5 w-5 text-muted-foreground shrink-0\" />\r\n            <div className=\"min-w-0 flex-1\">\r\n              <div className=\"flex items-center gap-2 flex-wrap\">\r\n                <span className=\"font-mono text-sm\">•••• {card.last4}</span>\r\n                {card.primary && <Badge variant=\"secondary\">Primary</Badge>}\r\n              </div>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                {card.brand} • Expires {card.expiry}\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n      <Button variant=\"outline\" className=\"w-full\" onClick={onAddCard}>\r\n        <Plus className=\"mr-2 h-4 w-4\" />\r\n        Add new card\r\n      </Button>\r\n    </div>\r\n  )\r\n\r\n  const renderInvoicesContent = () => (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\r\n        <div className=\"space-y-0.5 flex-1\">\r\n          <h3 className=\"text-sm font-medium\">Invoice format</h3>\r\n          <p className=\"text-sm text-muted-foreground\">Choose PDF or HTML format</p>\r\n        </div>\r\n        <DropdownMenu>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\">\r\n              {invoiceFormat}\r\n              <ChevronDown className=\"ml-2 h-4 w-4\" />\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent align=\"end\">\r\n            <DropdownMenuItem onClick={() => onInvoiceFormatChange(\"PDF\")}>PDF</DropdownMenuItem>\r\n            <DropdownMenuItem onClick={() => onInvoiceFormatChange(\"HTML\")}>HTML</DropdownMenuItem>\r\n          </DropdownMenuContent>\r\n        </DropdownMenu>\r\n      </div>\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3\">\r\n        <div className=\"space-y-0.5 flex-1\">\r\n          <h3 className=\"text-sm font-medium\">Billing address</h3>\r\n          <p className=\"text-sm text-muted-foreground\">Update your billing address</p>\r\n        </div>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"w-full sm:w-auto\" onClick={onEditBillingAddress}>\r\n          Edit\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n\r\n  const renderLimitsContent = () => (\r\n    <div className=\"space-y-0 divide-y divide-border\">\r\n      <SettingItem\r\n        title=\"Overage protection\"\r\n        description=\"Prevent accidental overages\"\r\n        checked={overageProtection}\r\n        onCheckedChange={onOverageProtectionChange}\r\n      />\r\n      <SettingItem\r\n        title=\"Usage limit alerts\"\r\n        description=\"Alert at 80% and 95% usage\"\r\n        checked={usageLimitAlerts}\r\n        onCheckedChange={onUsageLimitAlertsChange}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  const renderTabContent = () => {\r\n    switch (activeTab) {\r\n      case \"general\":\r\n        return renderGeneralContent()\r\n      case \"payment\":\r\n        return renderPaymentContent()\r\n      case \"invoices\":\r\n        return renderInvoicesContent()\r\n      case \"limits\":\r\n        return renderLimitsContent()\r\n      default:\r\n        return renderGeneralContent()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`w-full px-4 sm:px-0 ${className || ''}`}>\r\n      <Card className=\"w-full max-w-2xl mx-auto\">\r\n        <CardHeader className=\"px-4 sm:px-6\">\r\n          <CardTitle>Billing Settings</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6 px-4 sm:px-6\">\r\n          <TabNavigation activeTab={activeTab} onTabChange={onTabChange} />\r\n          {renderTabContent()}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/billing-settings.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/billing-settings-demo.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { Toaster, toast } from \"sonner\"\r\nimport { BillingSettings } from \"@/components/billingsdk/billing-settings\"\r\nimport { CreditCard } from \"lucide-react\"\r\n\r\ntype InvoiceFormat = \"PDF\" | \"HTML\"\r\n\r\ninterface Card {\r\n  id: string\r\n  last4: string\r\n  brand: \"Visa\" | \"MasterCard\" | \"Amex\" | \"Other\"\r\n  expiry: string\r\n  primary: boolean\r\n}\r\n\r\ninterface NewCardForm {\r\n  number: string\r\n  expiry: string\r\n  cvc: string\r\n}\r\n\r\nexport default function BillingSettingsDemo() {\r\n  const [activeTab, setActiveTab] = useState<\"general\" | \"payment\" | \"invoices\" | \"limits\">(\"general\")\r\n  const [emailNotifications, setEmailNotifications] = useState<boolean>(true)\r\n  const [usageAlerts, setUsageAlerts] = useState<boolean>(true)\r\n  const [invoiceReminders, setInvoiceReminders] = useState<boolean>(false)\r\n  const [cards, setCards] = useState<Card[]>([\r\n    { id: \"1\", last4: \"4242\", brand: \"Visa\", expiry: \"12/25\", primary: true },\r\n  ])\r\n  const [invoiceFormat, setInvoiceFormat] = useState<InvoiceFormat>(\"PDF\")\r\n  const [overageProtection, setOverageProtection] = useState<boolean>(true)\r\n  const [usageLimitAlerts, setUsageLimitAlerts] = useState<boolean>(true)\r\n  const [newCard, setNewCard] = useState<NewCardForm>({\r\n    number: \"\",\r\n    expiry: \"\",\r\n    cvc: \"\",\r\n  })\r\n  const [open, setOpen] = useState<boolean>(false)\r\n\r\n\r\n  const handleToggleEmailNotifications = (checked: boolean) => {\r\n    console.log(`Email notifications toggled to: ${checked}`)\r\n    setEmailNotifications(checked)\r\n  }\r\n\r\n  const handleToggleUsageAlerts = (checked: boolean) => {\r\n    console.log(`Usage alerts toggled to: ${checked}`)\r\n    setUsageAlerts(checked)\r\n  }\r\n\r\n  const handleToggleInvoiceReminders = (checked: boolean) => {\r\n    console.log(`Invoice reminders toggled to: ${checked}`)\r\n    setInvoiceReminders(checked)\r\n  }\r\n\r\n  const handleChangeInvoiceFormat = (format: InvoiceFormat) => {\r\n    console.log(`Invoice format changed to: ${format}`)\r\n    setInvoiceFormat(format)\r\n  }\r\n\r\n  const handleEditBillingAddress = () => {\r\n    console.log(\"Edit billing address button clicked\")\r\n    toast.info(\"Edit billing address clicked!\")\r\n  }\r\n\r\n  const handleToggleOverageProtection = (checked: boolean) => {\r\n    console.log(`Overage protection toggled to: ${checked}`)\r\n    setOverageProtection(checked)\r\n  }\r\n\r\n  const handleToggleUsageLimitAlerts = (checked: boolean) => {\r\n    console.log(`Usage limit alerts toggled to: ${checked}`)\r\n    setUsageLimitAlerts(checked)\r\n  }\r\n\r\n  const isValidCardNumber = (number: string): boolean => {\r\n    const normalized = number.replace(/\\s/g, \"\")\r\n    return normalized.length >= 13 && normalized.length <= 19 && /^\\d+$/.test(normalized)\r\n  }\r\n\r\n  const isValidExpiry = (expiry: string): boolean => {\r\n    if (!/^(0[1-9]|1[0-2])\\/?([0-9]{2})$/.test(expiry)) {\r\n      return false\r\n    }\r\n    const [month, year] = expiry.split('/').map(Number)\r\n    const currentYear = Number(String(new Date().getFullYear()).slice(-2))\r\n    const currentMonth = new Date().getMonth() + 1\r\n    if (year < currentYear || (year === currentYear && month < currentMonth)) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  const isValidCvc = (cvc: string): boolean => {\r\n    return /^\\d{3,4}$/.test(cvc)\r\n  }\r\n \r\n  const detectCardBrand = (number: string): Card[\"brand\"] => {\r\n    if (number.startsWith(\"4\")) return \"Visa\"\r\n    if (/^5[1-5]/.test(number)) return \"MasterCard\"\r\n    if (/^3[47]/.test(number)) return \"Amex\"\r\n    return \"Other\"\r\n  }\r\n\r\n  const handleAddCard = (): void => {\r\n    if (!isValidCardNumber(newCard.number)) {\r\n      toast.error(\"Please enter a valid card number.\")\r\n      return\r\n    }\r\n    if (!isValidExpiry(newCard.expiry)) {\r\n      toast.error(\"Please enter a valid expiry date (MM/YY) that's not in the past.\")\r\n      return\r\n    }\r\n    if (!isValidCvc(newCard.cvc)) {\r\n      toast.error(\"Please enter a valid CVC.\")\r\n      return\r\n    }\r\n    const last4 = newCard.number.slice(-4)\r\n    const brand = detectCardBrand(newCard.number)\r\n    const newCardData: Card = {\r\n      id: String(cards.length + 1),\r\n      last4,\r\n      brand,\r\n      expiry: newCard.expiry,\r\n      primary: cards.length === 0,\r\n    }\r\n    setCards([...cards, newCardData])\r\n    setNewCard({ number: \"\", expiry: \"\", cvc: \"\" })\r\n    setOpen(false)\r\n    toast.success(\"Card added successfully!\")\r\n  }\r\n\r\n  const formatCardNumber = (value: string): string => {\r\n    const rawValue = value.replace(/\\D/g, '');\r\n    const formattedValue = rawValue.match(/.{1,4}/g)?.join(' ') || '';\r\n    return formattedValue;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6\">\r\n      <BillingSettings\r\n        activeTab={activeTab}\r\n        onTabChange={(tab: string) => setActiveTab(tab as \"general\" | \"payment\" | \"invoices\" | \"limits\")}\r\n        emailNotifications={emailNotifications}\r\n        onEmailNotificationsChange={handleToggleEmailNotifications}\r\n        usageAlerts={usageAlerts}\r\n        onUsageAlertsChange={handleToggleUsageAlerts}\r\n        invoiceReminders={invoiceReminders}\r\n        onInvoiceRemindersChange={handleToggleInvoiceReminders}\r\n        cards={cards}\r\n        onAddCard={() => setOpen(true)}\r\n        invoiceFormat={invoiceFormat}\r\n        onInvoiceFormatChange={handleChangeInvoiceFormat}\r\n        onEditBillingAddress={handleEditBillingAddress}\r\n        overageProtection={overageProtection}\r\n        onOverageProtectionChange={handleToggleOverageProtection}\r\n        usageLimitAlerts={usageLimitAlerts}\r\n        onUsageLimitAlertsChange={handleToggleUsageLimitAlerts}\r\n      />\r\n      <Dialog open={open} onOpenChange={setOpen}>\r\n        <DialogContent className=\"sm:max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>Add Payment Card</DialogTitle>\r\n            <DialogDescription>\r\n              Enter your card details to add a new payment method\r\n            </DialogDescription>\r\n          </DialogHeader>\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"number\">Card Number</Label>\r\n              <div className=\"relative\">\r\n                <Input\r\n                  id=\"number\"\r\n                  value={formatCardNumber(newCard.number)}\r\n                  onChange={(e) => {\r\n                    const rawValue = e.target.value.replace(/\\s/g, '');\r\n                    if (rawValue.length <= 19) {\r\n                      setNewCard({ ...newCard, number: rawValue });\r\n                    }\r\n                  }}\r\n                  placeholder=\"1234 5678 9012 3456\"\r\n                  className=\"pr-10\"\r\n                  maxLength={19}\r\n                />\r\n                <CreditCard className=\"absolute right-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\r\n              </div>\r\n            </div>\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"expiry\">Expiry Date</Label>\r\n                <Input\r\n                  id=\"expiry\"\r\n                  value={newCard.expiry}\r\n                  onChange={(e) => {\r\n                    let value = e.target.value.replace(/\\D/g, '');\r\n                    if (value.length >= 2) {\r\n                      value = value.slice(0, 2) + '/' + value.slice(2, 4);\r\n                    }\r\n                    if (value.length <= 5) {\r\n                      setNewCard({ ...newCard, expiry: value });\r\n                    }\r\n                  }}\r\n                  placeholder=\"MM/YY\"\r\n                  maxLength={5}\r\n                />\r\n              </div>\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"cvc\">CVC</Label>\r\n                <Input\r\n                  id=\"cvc\"\r\n                  type=\"password\"\r\n                  value={newCard.cvc}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value.replace(/\\D/g, '');\r\n                    if (value.length <= 4) {\r\n                      setNewCard({ ...newCard, cvc: value });\r\n                    }\r\n                  }}\r\n                  placeholder=\"123\"\r\n                  maxLength={4}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <DialogFooter className=\"gap-2 sm:gap-0\">\r\n            <Button variant=\"outline\" onClick={() => setOpen(false)}>\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={handleAddCard}>\r\n              Add Card\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n      <Toaster />\r\n    </div>\r\n  )\r\n}",
      "type": "registry:component",
      "target": "components/billing-settings-demo.tsx"
    }
  ]
}