{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "usage-meter-circle",
  "type": "registry:block",
  "title": "Usage Meter Circle",
  "description": "A usage meter circle component",
  "dependencies": [
    "lucide-react",
    "motion"
  ],
  "registryDependencies": [
    "card",
    "badge",
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/billingsdk/usage-meter.tsx",
      "content": "\"use client\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardDescription,\r\n    CardHeader,\r\n    CardTitle,\r\n} from \"@/components/ui/card\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { motion, useSpring, useMotionValue, useTransform } from \"motion/react\"\r\nimport { useEffect } from \"react\"\r\n\r\nexport interface Usage {\r\n    name: string\r\n    usage: number\r\n    limit: number\r\n}\r\n\r\nexport interface UsageMeterProps {\r\n    usage: Usage[]\r\n    className?: string\r\n    variant?: \"linear\" | \"circle\"\r\n    size?: \"sm\" | \"md\" | \"lg\"\r\n    title?: string\r\n    description?: string\r\n    progressColor?: \"default\" | \"usage\"\r\n}\r\n\r\nexport function UsageMeter({\r\n    usage,\r\n    className,\r\n    variant = \"linear\",\r\n    size = \"md\",\r\n    title,\r\n    description,\r\n    progressColor = \"default\",\r\n}: UsageMeterProps) {\r\n    if (!usage?.length) return null\r\n\r\n    const getStatus = (percentage: number) => {\r\n        if (percentage >= 90) return <Badge variant=\"destructive\">Critical</Badge>\r\n        if (percentage >= 75) return <Badge variant=\"secondary\">High</Badge>\r\n        return null\r\n    }\r\n    const getUsageClasses = (percentage: number, variant: \"circle\" | \"linear\"): string[] => {\r\n        const thresholds = [\r\n            { min: 90, circle: \"text-red-500\", linear: [\"from-red-500\", \"to-red-400\"] },\r\n            { min: 75, circle: \"text-yellow-500\", linear: [\"from-yellow-500\", \"to-yellow-400\"] },\r\n            { min: 50, circle: \"text-emerald-500\", linear: [\"from-emerald-500\", \"to-emerald-400\"] },\r\n            { min: 25, circle: \"text-blue-500\", linear: [\"from-blue-500\", \"to-blue-400\"] },\r\n            { min: 0, circle: \"text-gray-500\", linear: [\"from-gray-500\", \"to-gray-400\"] },\r\n        ];\r\n        const match = thresholds.find(t => percentage >= t.min);\r\n\r\n        if (match) {\r\n            return variant === \"circle\" ? [match.circle] : match.linear;\r\n        }\r\n\r\n        return variant === \"circle\" ? [\"text-gray-500\"] : [\"from-gray-500\", \"to-gray-400\"];\r\n    }\r\n\r\n    if (variant === \"circle\") {\r\n        const sizeConfig = {\r\n            sm: { circle: 100, stroke: 6, text: \"text-lg\", label: \"text-xs\" },\r\n            md: { circle: 140, stroke: 10, text: \"text-xl\", label: \"text-sm\" },\r\n            lg: { circle: 180, stroke: 12, text: \"text-2xl\", label: \"text-base\" },\r\n        }\r\n\r\n        const config = sizeConfig[size]\r\n        const radius = (config.circle - config.stroke) / 2\r\n        const circumference = radius * 2 * Math.PI\r\n\r\n        return (\r\n            <Card className={cn(\"w-auto\", className)}>\r\n                {(title || description) && (\r\n                    <CardHeader className=\"space-y-1\">\r\n                        {title && (\r\n                            <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                                {title}\r\n                            </CardTitle>\r\n                        )}\r\n                        {description && (\r\n                            <CardDescription className=\"text-sm text-muted-foreground\">\r\n                                {description}\r\n                            </CardDescription>\r\n                        )}\r\n                    </CardHeader>\r\n\r\n                )}\r\n                <CardContent\r\n                    className={\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"}\r\n                >\r\n                    {usage.map((item, i) => {\r\n                        const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                        const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                        const motionValue = useMotionValue(0)\r\n                        const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                        const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                        useEffect(() => {\r\n                            motionValue.set(percentage)\r\n                        }, [percentage, motionValue])\r\n\r\n                        return (\r\n                            <div\r\n                                key={item.name || i}\r\n                                className=\"space-y-3 p-4 bg-muted/20 rounded-xl flex flex-col items-center text-center\"\r\n                            >\r\n                                <span className=\"text-sm font-medium truncate w-full\">{item.name}</span>\r\n                                <div className=\"relative\">\r\n                                    <svg width={config.circle} height={config.circle} className=\"-rotate-90\">\r\n                                        <circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            className=\"text-muted stroke-current\"\r\n                                            fill=\"transparent\"\r\n                                        />\r\n                                        <motion.circle\r\n                                            cx={config.circle / 2}\r\n                                            cy={config.circle / 2}\r\n                                            r={radius}\r\n                                            strokeWidth={config.stroke}\r\n                                            fill=\"transparent\"\r\n                                            strokeDasharray={circumference}\r\n                                            strokeLinecap=\"round\"\r\n                                            className={cn(\"stroke-current\", progressColor === \"usage\" ? getUsageClasses(percentage, \"circle\") : \"text-primary\")}\r\n                                            initial={{ strokeDashoffset: circumference }}\r\n                                            animate={{ strokeDashoffset: circumference - (percentage / 100) * circumference }}\r\n                                            transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                        />\r\n                                    </svg>\r\n                                    <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\r\n                                        <motion.span className={cn(\"font-semibold\", config.text)}>{display}</motion.span>\r\n                                        <span className={cn(\"text-muted-foreground\", config.label)}>used</span>\r\n                                    </div>\r\n                                </div>\r\n                                <span className=\"text-xs text-muted-foreground\">\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </CardContent>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    // Linear variant\r\n    const sizeConfig = {\r\n        sm: { bar: \"h-2\", text: \"text-xs\" },\r\n        md: { bar: \"h-3\", text: \"text-sm\" },\r\n        lg: { bar: \"h-4\", text: \"text-base\" },\r\n    }\r\n\r\n    const config = sizeConfig[size]\r\n\r\n    return (\r\n        <Card className={cn(\"w-full max-w-md\", className)}>\r\n            {(title || description) && (\r\n                <CardHeader className=\"space-y-1\">\r\n                    {title && (\r\n                        <CardTitle className=\"text-base font-medium leading-tight truncate\">\r\n                            {title}\r\n                        </CardTitle>\r\n                    )}\r\n                    {description && (\r\n                        <CardDescription className=\"text-sm text-muted-foreground\">\r\n                            {description}\r\n                        </CardDescription>\r\n                    )}\r\n                </CardHeader>\r\n\r\n            )}\r\n            <CardContent\r\n                className={\"grid grid-cols-1 gap-4\"}\r\n            >\r\n                {usage.map((item, i) => {\r\n                    const percentage = Math.min((item.usage / item.limit) * 100, 100)\r\n                    const remaining = Math.max(item.limit - item.usage, 0)\r\n\r\n                    const motionValue = useMotionValue(0)\r\n                    const springValue = useSpring(motionValue, { stiffness: 100, damping: 20 })\r\n                    const display = useTransform(springValue, (latest) => `${Math.round(latest)}%`)\r\n\r\n                    useEffect(() => {\r\n                        motionValue.set(percentage)\r\n                    }, [percentage, motionValue])\r\n\r\n                    return (\r\n                        <div key={item.name || i} className=\"space-y-2 p-4 bg-muted/20 rounded-xl\">\r\n                            <div className=\"flex items-center justify-between\">\r\n                                <span className=\"text-sm font-medium truncate\">{item.name}</span>\r\n                                <motion.span className=\"text-xs text-muted-foreground\">{display}</motion.span>\r\n                            </div>\r\n                            <div className={cn(\"w-full bg-muted rounded-full overflow-hidden\", config.bar)}>\r\n                                <motion.div\r\n                                    className={cn(\"bg-gradient-to-r rounded-full\", config.bar, progressColor === \"usage\" ? getUsageClasses(percentage, \"linear\") : \"from-primary to-primary/70\")}\r\n                                    initial={{ width: 0 }}\r\n                                    animate={{ width: `${percentage}%` }}\r\n                                    transition={{ duration: 0.5, ease: \"easeOut\" }}\r\n                                />\r\n                            </div>\r\n                            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n                                <span>\r\n                                    {remaining.toLocaleString()} / {item.limit.toLocaleString()} left\r\n                                </span>\r\n                                {getStatus(percentage)}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n",
      "type": "registry:component",
      "target": "components/billingsdk/usage-meter.tsx"
    },
    {
      "path": "src/registry/billingsdk/demo/usage-meter-circle-demo.tsx",
      "content": "'use client'\r\n\r\nimport { UsageMeter } from \"@/components/billingsdk/usage-meter\";\r\n\r\nexport default function UsageMeterCircleDemo() {\r\n\r\n  return (\r\n    <div className=\"flex flex-col gap-4 mx-auto w-full\">\r\n      <UsageMeter\r\n        usage={[{\r\n          name: \"Claude Sonnet 4\",\r\n          usage: 75,\r\n          limit: 100\r\n        }, {\r\n          name: \"ChatGPT 5\",\r\n          usage: 12,\r\n          limit: 100\r\n        }, {\r\n          name: \"Grok 3\",\r\n          usage: 57,\r\n          limit: 100\r\n        }, {\r\n          name: \"Gemini 2.5\",\r\n          usage: 95,\r\n          limit: 100\r\n        }]}\r\n        title=\"LLM Usage\"\r\n        description=\"Your usage of the LLM models\"\r\n        variant=\"circle\"\r\n        size=\"md\"\r\n        className=\"mx-auto\" />\r\n    </div>\r\n\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/usage-meter-circle-demo.tsx"
    }
  ]
}