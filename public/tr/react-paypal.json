{
  "files": [
    {
      "path": "packages/templates/react/lib/paypal.ts",
      "target": "lib/paypal.ts",
      "content": "import { environment, PayPalHttpClient } from '@paypal/checkout-server-sdk';\n\n/**\n * PayPal SDK configuration\n * \n * This file sets up the PayPal client with the appropriate environment\n * based on the PAYPAL_ENV environment variable.\n */\n\n// Determine PayPal environment based on PAYPAL_ENV\nconst getPayPalEnvironment = () => {\n  const clientId = process.env.PAYPAL_CLIENT_ID;\n  const clientSecret = process.env.PAYPAL_CLIENT_SECRET;\n  \n  if (!clientId || !clientSecret) {\n    throw new Error('PAYPAL_CLIENT_ID and PAYPAL_CLIENT_SECRET must be set in environment variables');\n  }\n  \n  if (process.env.PAYPAL_ENV === 'live') {\n    return new environment.LiveEnvironment(clientId, clientSecret);\n  }\n  return new environment.SandboxEnvironment(clientId, clientSecret);\n};\n\n// Create PayPal client\nexport const paypalClient = new PayPalHttpClient(getPayPalEnvironment());\n\n/**\n * Create a PayPal order\n * \n * @param amount - The amount to charge\n * @param currency - The currency code (e.g., 'USD')\n * @param description - Description of the purchase\n * @returns Promise resolving to the order ID\n */\nexport const createPayPalOrder = async (\n  amount: string,\n  currency: string = 'USD',\n  description: string = 'BillingSDK Purchase'\n) => {\n  const request = {\n    intent: 'CAPTURE',\n    purchase_units: [\n      {\n        description,\n        amount: {\n          currency_code: currency,\n          value: amount,\n        },\n      },\n    ],\n    application_context: {\n      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/cancel`,\n      return_url: `${process.env.NEXT_PUBLIC_APP_URL}/return`,\n    },\n  };\n\n  try {\n    const response = await paypalClient.execute({\n      path: '/v2/checkout/orders',\n      method: 'POST',\n      body: request,\n    });\n    \n    return response.result.id;\n  } catch (error) {\n    console.error('Error creating PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Capture a PayPal order\n * \n * @param orderId - The PayPal order ID to capture\n * @returns Promise resolving to the capture result\n */\nexport const capturePayPalOrder = async (orderId: string) => {\n  try {\n    const response = await paypalClient.execute({\n      path: `/v2/checkout/orders/${orderId}/capture`,\n      method: 'POST',\n    });\n    \n    return response.result;\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Get order details\n * \n * @param orderId - The PayPal order ID to retrieve\n * @returns Promise resolving to the order details\n */\nexport const getPayPalOrder = async (orderId: string) => {\n  try {\n    const response = await paypalClient.execute({\n      path: `/v2/checkout/orders/${orderId}`,\n      method: 'GET',\n    });\n    \n    return response.result;\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    throw error;\n  }\n};"
    },
    {
      "path": "packages/templates/react/hooks/usePayPal.ts",
      "target": "hooks/usePayPal.ts",
      "content": "import { useState } from 'react';\n\n/**\n * Custom React hook for managing PayPal integration\n * \n * This hook provides functions and state management for integrating\n * PayPal payments into your React application.\n */\n\ninterface PayPalOrder {\n  id: string;\n  status: string;\n  amount: string;\n  currency: string;\n}\n\nexport const usePayPal = () => {\n  const [order, setOrder] = useState<PayPalOrder | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Create a PayPal order\n   * \n   * @param amount - The amount to charge\n   * @param currency - The currency code (e.g., 'USD')\n   * @param description - Description of the purchase\n   */\n  const createOrder = async (\n    amount: string,\n    currency: string = 'USD',\n    description: string = 'BillingSDK Purchase'\n  ) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch('/api/paypal/checkout', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ amount, currency, description }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to create PayPal order');\n      }\n      \n      const data = await response.json();\n      setOrder({\n        id: data.id,\n        status: 'CREATED',\n        amount,\n        currency,\n      });\n      \n      return data.id;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Capture a PayPal order\n   * \n   * @param orderId - The PayPal order ID to capture\n   */\n  const captureOrder = async (orderId: string) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      const response = await fetch(`/api/paypal/order/${orderId}/capture`, {\n        method: 'POST',\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to capture PayPal order');\n      }\n      \n      const data = await response.json();\n      setOrder(prev => prev ? { ...prev, status: 'CAPTURED' } : null);\n      \n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  /**\n   * Reset the hook state\n   */\n  const reset = () => {\n    setOrder(null);\n    setLoading(false);\n    setError(null);\n  };\n\n  return {\n    order,\n    loading,\n    error,\n    createOrder,\n    captureOrder,\n    reset,\n  };\n};"
    },
    {
      "path": "packages/templates/react/.env.paypal.example",
      "target": ".env.example",
      "content": "NEXT_PUBLIC_APP_URL=http://localhost:3000\nPAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID"
    }
  ],
  "dependencies": [
    "@paypal/checkout-server-sdk",
    "standardwebhooks",
    "zod",
    "react"
  ]
}