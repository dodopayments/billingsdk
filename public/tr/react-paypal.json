{
	"name": "react-paypal",
	"description": "PayPal hooks/utilities for React (client-only)",
	"framework": "react",
	"files": [
		{
			"target": "lib/paypal.ts",
			"type": "template",
			"content": "export type PayPalOrder = { id: string; status: string }\n\nexport function assertPayPalEnv() {\n  if (!process.env.VITE_BASE_URL) {\n    throw new Error('VITE_BASE_URL is not set')\n  }\n}\n\nexport const createOrder = async ({ baseUrl, amount, currency }: { baseUrl: string; amount: string; currency: string }): Promise<PayPalOrder> => {\n  const res = await fetch(`${baseUrl}/checkout`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ amount, currency }) })\n  if (!res.ok) throw new Error(`Failed to create order: ${res.status}`)\n  return res.json()\n}\n\nexport const captureOrder = async ({ baseUrl, orderId }: { baseUrl: string; orderId: string }): Promise<PayPalOrder> => {\n  const res = await fetch(`${baseUrl}/order/capture`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ orderId }) })\n  if (!res.ok) throw new Error(`Failed to capture order: ${res.status}`)\n  return res.json()\n}\n"
		},
		{
			"target": "hooks/useBilling.ts",
			"type": "template",
			"content": "import { useState, useCallback } from 'react'\nimport { assertPayPalEnv, createOrder, captureOrder } from '../lib/paypal'\n\nexport function useBilling({ baseUrl }: { baseUrl?: string } = {}) {\n  const resolvedBaseUrl = baseUrl ?? (import.meta as any).env.VITE_BASE_URL ?? 'http://localhost:8080'\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [lastOrderId, setLastOrderId] = useState<string | null>(null)\n\n  const create = useCallback(async (amount: string, currency: string) => {\n    try {\n      setLoading(true); setError(null); assertPayPalEnv()\n      const order = await createOrder({ baseUrl: resolvedBaseUrl, amount, currency })\n      setLastOrderId(order.id)\n      return order\n    } catch (e: any) { setError(e?.message ?? 'Failed to create order'); throw e } finally { setLoading(false) }\n  }, [resolvedBaseUrl])\n\n  const capture = useCallback(async (orderId: string) => {\n    try {\n      setLoading(true); setError(null)\n      const order = await captureOrder({ baseUrl: resolvedBaseUrl, orderId })\n      return order\n    } catch (e: any) { setError(e?.message ?? 'Failed to capture order'); throw e } finally { setLoading(false) }\n  }, [resolvedBaseUrl])\n\n  return { loading, error, lastOrderId, create, capture }\n}\n"
		}
	],
	"dependencies": ["react"]
}
