{
	"name": "express-paypal",
	"description": "PayPal template for Express",
	"framework": "express",
	"files": [
		{
			"target": "src/lib/paypal.ts",
			"type": "template",
			"content": "import paypal from '@paypal/checkout-server-sdk'\n\nlet paypalClient: paypal.core.PayPalHttpClient | null = null\n\nexport function getPayPalClient(): paypal.core.PayPalHttpClient {\n  if (!paypalClient) {\n    const clientId = process.env.PAYPAL_CLIENT_ID\n    const clientSecret = process.env.PAYPAL_CLIENT_SECRET\n    if (!clientId || !clientSecret) {\n      throw new Error('PAYPAL_CLIENT_ID/PAYPAL_CLIENT_SECRET are not set')\n    }\n    const environment = process.env.PAYPAL_ENV === 'live'\n      ? new paypal.core.LiveEnvironment(clientId, clientSecret)\n      : new paypal.core.SandboxEnvironment(clientId, clientSecret)\n    paypalClient = new paypal.core.PayPalHttpClient(environment)\n  }\n  return paypalClient\n}\n"
		},
		{
			"target": "src/routes/paypal/route.ts",
			"type": "template",
			"content": "import express from 'express'\nimport { checkoutRouter } from './checkout'\nimport { orderRouter } from './order'\nimport { webhookRouter } from './webhook'\n\nconst router = express.Router()\n// Mount webhook route before any express.json() middleware to preserve raw body\nrouter.use('/webhook', webhookRouter)\nrouter.use(express.json()) // Ensure request body is parsed for other routes\nrouter.use('/checkout', checkoutRouter)\nrouter.use('/order', orderRouter)\nexport { router as paypalRouter }\n"
		},
		{
			"target": "src/routes/paypal/checkout.ts",
			"type": "template",
			"content": "import express from 'express'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { z } from 'zod'\nimport { getPayPalClient } from '../../lib/paypal'\n\nconst router = express.Router()\n\n// ISO 4217 currency decimal places lookup\nconst currencyDecimals: Record<string, number> = {\n  'USD': 2, 'EUR': 2, 'GBP': 2, 'CAD': 2, 'AUD': 2, 'CNY': 2,\n  'JPY': 0, 'KRW': 0, 'VND': 0, 'CLP': 0, 'PYG': 0, 'XOF': 0,\n  'HUF': 2, 'ISK': 0, 'MXN': 2, 'NOK': 2, 'PLN': 2, 'SEK': 2,\n  'CHF': 2, 'CZK': 2, 'DKK': 2, 'RON': 2, 'BRL': 2, 'MYR': 2,\n  'THB': 2, 'PHP': 2, 'INR': 2, 'SGD': 2, 'ILS': 2, 'TWD': 2,\n  'ZAR': 2, 'NZD': 2, 'TRY': 2, 'HKD': 2, 'SAR': 2, 'AED': 2,\n  'RUB': 2, 'EGP': 2, 'IDR': 2, 'ARS': 2, 'COP': 2, 'PEN': 2,\n  'UYU': 2, 'BOB': 2, 'CRC': 2, 'DOP': 2, 'GTQ': 2, 'HNL': 2,\n  'NIO': 2, 'PAB': 2, 'UYI': 0\n};\n\nconst schema = z.object({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/).transform(Number).refine(val => val > 0, { message: 'Amount must be greater than 0' }),\n  currency: z.string().regex(/^[A-Z]{3}$/, { message: 'Currency must be a 3-letter uppercase code' }).refine(currency => ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CNY'].includes(currency), { message: 'Unsupported currency' }),\n})\n\nrouter.post('/', async (req, res) => {\n  try {\n    const parsed = schema.safeParse(req.body)\n    if (!parsed.success) {\n      return res.status(400).json({ error: 'Invalid input', details: parsed.error.flatten() })\n    }\n    \n    // Get the correct number of decimal places for the currency\n    const decimals = currencyDecimals[parsed.data.currency] ?? 2;\n    \n    const requestOrder = new paypal.orders.OrdersCreateRequest()\n    requestOrder.headers['Prefer'] = 'return=representation'\n    requestOrder.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [{ amount: { currency_code: parsed.data.currency, value: parsed.data.amount.toFixed(decimals) } }],\n    })\n    const client = getPayPalClient()\n    const response = await client.execute(requestOrder)\n    res.json(response.result)\n  } catch (e) {\n    res.status(500).json({ error: 'Internal error' })\n  }\n})\n\nexport { router as checkoutRouter }\n"
		},
		{
			"target": "src/routes/paypal/order.ts",
			"type": "template",
			"content": "import express from 'express'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '../../lib/paypal'\nimport { z } from 'zod'\n\nconst router = express.Router()\n\nconst capSchema = z.object({ orderId: z.string().min(1) })\nrouter.post('/capture', async (req, res) => {\n  try {\n    const parsed = capSchema.safeParse(req.body)\n    if (!parsed.success) return res.status(400).json({ error: 'Invalid input', details: parsed.error.flatten() })\n    const { orderId } = parsed.data\n    \n    const client = getPayPalClient()\n    const capReq = new paypal.orders.OrdersCaptureRequest(orderId)\n    capReq.requestBody({})\n    const response = await client.execute(capReq)\n    res.json(response.result)\n  } catch {\n    res.status(500).json({ error: 'Internal error' })\n  }\n})\n\nrouter.get('/:orderId', async (req, res) => {\n  try {\n    // Validate orderId parameter is present and non-empty\n    const { orderId } = req.params\n    if (!orderId || typeof orderId !== 'string' || orderId.trim() === '') {\n      return res.status(400).json({ error: 'orderId parameter is required and must be a non-empty string' })\n    }\n    \n    const client = getPayPalClient()\n    const getReq = new paypal.orders.OrdersGetRequest(orderId)\n    const response = await client.execute(getReq)\n    res.json(response.result)\n  } catch {\n    res.status(500).json({ error: 'Internal error' })\n  }\n})\n\nexport { router as orderRouter }\n"
		},
		{
			"target": "src/routes/paypal/webhook.ts",
			"type": "template",
			"content": "import express from 'express'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '../../lib/paypal'\n\nconst router = express.Router()\n\nrouter.post('/', express.raw({ type: 'application/json' }), async (req, res) => {\n  try {\n    // Verify PayPal webhook signature\n    const client = getPayPalClient()\n    const verifyRequest = new paypal.notifications.VerifyWebhookSignatureRequest()\n    \n    // Get webhook ID from environment variables\n    const webhookId = process.env.PAYPAL_WEBHOOK_ID\n    if (!webhookId) {\n      console.error('PAYPAL_WEBHOOK_ID is not set in environment variables')\n      return res.status(500).json({ error: 'Webhook verification not configured' })\n    }\n    \n    // Parse raw body once and reuse\n    const event = JSON.parse(req.body.toString())\n    verifyRequest.requestBody({\n      auth_algo: req.headers['paypal-auth-algo'],\n      cert_url: req.headers['paypal-cert-url'],\n      transmission_id: req.headers['paypal-transmission-id'],\n      transmission_sig: req.headers['paypal-transmission-sig'],\n      transmission_time: req.headers['paypal-transmission-time'],\n      webhook_id: webhookId,\n      webhook_event: event\n    })\n    \n    // Execute verification\n    const verifyResponse = await client.execute(verifyRequest)\n    \n    // Check verification result\n    if (verifyResponse.result.verification_status !== 'SUCCESS') {\n      console.warn('PayPal webhook signature verification failed')\n      return res.status(400).json({ error: 'Webhook signature verification failed' })\n    }\n    \n    // Process verified webhook event\n    // event already parsed above\n    console.log('Verified PayPal webhook event received:', event.event_type)\n    \n    // TODO: Handle specific webhook events (e.g., payment completed, subscription cancelled, etc.)\n    \n    res.status(200).json({ received: true })\n  } catch (error) {\n    console.error('Error processing PayPal webhook:', error)\n    res.status(500).json({ error: 'Internal error processing webhook' })\n  }\n})\n\nexport { router as webhookRouter }\n"
		},
		{
			"target": ".env.example",
			"type": "template",
			"content": "PAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID\nNEXT_PUBLIC_APP_URL=http://localhost:8080/paypal"
		}
	],
	"dependencies": [
		"@paypal/checkout-server-sdk",
		"zod",
		"express",
		"@types/express"
	]
}
