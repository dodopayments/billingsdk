{
  "name": "react-dodopayments",
  "description": "DodoPayments template for React.js",
  "framework": "react",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from \"dodopayments\"\n\nexport type Product = DodoPayments.Product\nexport type Customer = DodoPayments.Customers.Customer\nexport type Subscription = DodoPayments.Subscriptions.Subscription\nexport type Payment = DodoPayments.Payments.Payment\n\n\nexport const getProducts = async ({\n  baseUrl,\n}: {\n  baseUrl: string\n}): Promise<Product[]> => {\n  const response = await fetch(`${baseUrl}/products`)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch products: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const getProduct = async ({\n  baseUrl,\n  product_id,\n}: {\n  baseUrl: string\n  product_id: string\n}): Promise<Product> => {\n  const response = await fetch(`${baseUrl}/product?product_id=${product_id}`)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch product: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const getCustomer = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string\n  customer_id: string\n}): Promise<Customer> => {\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch customer: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const getCustomerSubscriptions = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string\n  customer_id: string\n}): Promise<Subscription[]> => {\n  const response = await fetch(`${baseUrl}/customer/subscriptions?customer_id=${customer_id}`)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch subscriptions: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const getCustomerPayments = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string\n  customer_id: string\n}): Promise<Payment[]> => {\n  const response = await fetch(`${baseUrl}/customer/payments?customer_id=${customer_id}`)\n  if (!response.ok) {\n    throw new Error(`Failed to fetch payments: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const createCustomer = async ({\n  baseUrl,\n  customer,\n}: {\n  baseUrl: string\n  customer: DodoPayments.Customers.CustomerCreateParams\n}): Promise<Customer> => {\n  const response = await fetch(`${baseUrl}/customer`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(customer),\n  })\n  if (!response.ok) {\n    throw new Error(`Failed to create customer: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const updateCustomer = async ({\n  baseUrl,\n  customer_id,\n  customer,\n}: {\n  baseUrl: string\n  customer_id: string\n  customer: DodoPayments.Customers.CustomerUpdateParams\n}): Promise<Customer> => {\n  const response = await fetch(`${baseUrl}/customer?customer_id=${customer_id}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(customer),\n  })\n  if (!response.ok) {\n    throw new Error(`Failed to update customer: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n\n\nexport const checkout = async ({\n  baseUrl,\n  productCart,\n  customer,\n  billing_address,\n  return_url,\n  customMetadata,\n}: {\n  baseUrl: string\n  productCart: Array<{ product_id: string; quantity: number; amount?: number }>\n  customer: DodoPayments.Payments.CustomerRequest\n  billing_address: DodoPayments.Payments.BillingAddress\n  return_url: string\n  customMetadata?: Record<string, string>\n}): Promise<{ checkout_url: string }> => {\n  const response = await fetch(`${baseUrl}/checkout`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ productCart, customer, billing_address, return_url, customMetadata }),\n  })\n  if (!response.ok) {\n    throw new Error(`Failed to checkout: ${response.status} ${response.statusText}`)\n  }\n  return response.json()\n}\n"
    },
    {
      "target": "hooks/useBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from 'react'\nimport { DodoPayments } from 'dodopayments'\nimport {\n  getProducts,\n  getProduct,\n  getCustomer,\n  getCustomerSubscriptions,\n  getCustomerPayments,\n  createCustomer,\n  updateCustomer,\n  checkout,\n} from '../lib/dodopayments'\n\n\ninterface UseBillingState {\n  loading: boolean\n  error: string | null\n}\n\nexport function useBilling({ baseUrl }: { baseUrl?: string } = {}) {\n  const resolvedBaseUrl =\n    baseUrl ?? process.env.VITE_BASE_URL ?? 'http://localhost:8080'\n\n  const [state, setState] = useState<UseBillingState>({\n    loading: false,\n    error: null,\n  })\n\n  const [products, setProducts] = useState<DodoPayments.Product[]>([])\n  const [customer, setCustomer] = useState<DodoPayments.Customers.Customer | null>(null)\n\n  \n  const setLoading = useCallback((loading: boolean) => {\n    setState(prev => ({ ...prev, loading }))\n  }, [])\n\n  const setError = useCallback((error: string | null) => {\n    setState(prev => ({ ...prev, error }))\n  }, [])\n\n\n  const handleAsyncOperation = useCallback(\n    async <T>(operation: () => Promise<T>, operationName: string): Promise<T> => {\n      try {\n        setLoading(true)\n        setError(null)\n        const result = await operation()\n        return result\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : `Failed to ${operationName}`\n        setError(errorMessage)\n        throw error\n      } finally {\n        setLoading(false)\n      }\n    },\n    [setLoading, setError]\n  )\n\n\n  const fetchProducts = useCallback(async (): Promise<DodoPayments.Product[]> => {\n    const result = await handleAsyncOperation(\n      () => getProducts({ baseUrl: resolvedBaseUrl }),\n      'fetch products'\n    )\n    setProducts(result)\n    return result\n  }, [handleAsyncOperation, resolvedBaseUrl])\n\n  const fetchProduct = useCallback(\n    async (product_id: string): Promise<DodoPayments.Product> => {\n      return handleAsyncOperation(\n        () => getProduct({ baseUrl: resolvedBaseUrl, product_id }),\n        'fetch product'\n      )\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  \n  const fetchCustomer = useCallback(\n    async (customer_id: string): Promise<DodoPayments.Customers.Customer> => {\n      const result = await handleAsyncOperation(\n        () => getCustomer({ baseUrl: resolvedBaseUrl, customer_id }),\n        'fetch customer'\n      )\n      setCustomer(result)\n      return result\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  const fetchCustomerSubscriptions = useCallback(\n    async (\n      customer_id: string\n    ): Promise<DodoPayments.Subscriptions.Subscription[]> => {\n      return handleAsyncOperation(\n        () => getCustomerSubscriptions({ baseUrl: resolvedBaseUrl, customer_id }),\n        'fetch customer subscriptions'\n      )\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  const fetchCustomerPayments = useCallback(\n    async (customer_id: string): Promise<DodoPayments.Payments.Payment[]> => {\n      return handleAsyncOperation(\n        () => getCustomerPayments({ baseUrl: resolvedBaseUrl, customer_id }),\n        'fetch customer payments'\n      )\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  const createNewCustomer = useCallback(\n    async (\n      newCustomer: DodoPayments.Customers.CustomerCreateParams\n    ): Promise<DodoPayments.Customers.Customer> => {\n      const result = await handleAsyncOperation(\n        () => createCustomer({ baseUrl: resolvedBaseUrl, customer: newCustomer }),\n        'create customer'\n      )\n      setCustomer(result)\n      return result\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  const updateExistingCustomer = useCallback(\n    async (\n      customer_id: string,\n      updatedCustomer: DodoPayments.Customers.CustomerUpdateParams\n    ): Promise<DodoPayments.Customers.Customer> => {\n      const result = await handleAsyncOperation(\n        () =>\n          updateCustomer({\n            baseUrl: resolvedBaseUrl,\n            customer_id,\n            customer: updatedCustomer,\n          }),\n        'update customer'\n      )\n      setCustomer(result)\n      return result\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  \n  const createCheckout = useCallback(\n    async (\n      productCart: Array<{ product_id: string; quantity: number; amount?: number }>,\n      customer: DodoPayments.Payments.CustomerRequest,\n      billing_address: DodoPayments.Payments.BillingAddress,\n      return_url: string,\n      customMetadata?: Record<string, string>\n    ) => {\n      return handleAsyncOperation(\n        () =>\n          checkout({\n            baseUrl: resolvedBaseUrl,\n            productCart,\n            customer,\n            billing_address,\n            return_url,\n            customMetadata,\n          }),\n        'create checkout'\n      )\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  )\n\n  const clearError = useCallback(() => {\n    setError(null)\n  }, [setError])\n\n  \n  return {\n    \n    loading: state.loading,\n    error: state.error,\n    products,\n    customer,    \n    clearError,   \n    fetchProducts,\n    fetchProduct,\n    fetchCustomer,\n    fetchCustomerSubscriptions,\n    fetchCustomerPayments,\n    createNewCustomer,\n    updateExistingCustomer,\n    createCheckout,\n  }\n}\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "VITE_BASE_URL=\"YOUR API URL\""
    }
  ],
  "dependencies": [
    "dodopayments",
    "react"
  ]
}