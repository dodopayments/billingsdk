{
  "name": "react-dodopayments",
  "description": "DodoPayments template for React (Vite) frontend",
  "framework": "react",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from 'dodopayments'\ntype Product = DodoPayments.Product\n\n// Base URL for backend. Path-preserving: keep `/api` suffix in the base.\n// Examples:\n// - Dev proxy or same-origin: VITE_API_BASE_URL not set â†’ BASE_URL = '/api'\n// - Cross-origin: VITE_API_BASE_URL = 'http://localhost:8000/api'\nconst BASE_URL = (import.meta as any)?.env?.VITE_API_BASE_URL ?? '/api'\n\nexport const getProducts = async (): Promise<Product[]> => {\n  const response = await fetch(`${BASE_URL}/products`)\n  if (!response.ok) throw new Error(`Failed to fetch products: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const getProduct = async (product_id: string): Promise<Product> => {\n  const response = await fetch(`${BASE_URL}/product?product_id=${product_id}`)\n  if (!response.ok) throw new Error(`Failed to fetch product: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const getCustomer = async (customer_id: string): Promise<DodoPayments.Customers.Customer> => {\n  const response = await fetch(`${BASE_URL}/customer?customer_id=${customer_id}`)\n  if (!response.ok) throw new Error(`Failed to fetch customer: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const getCustomerSubscriptions = async (\n  customer_id: string,\n): Promise<DodoPayments.Subscriptions.Subscription[]> => {\n  const response = await fetch(`${BASE_URL}/customer/subscriptions?customer_id=${customer_id}`)\n  if (!response.ok) throw new Error(`Failed to fetch customer subscriptions: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const getCustomerPayments = async (\n  customer_id: string,\n): Promise<DodoPayments.Payments.Payment[]> => {\n  const response = await fetch(`${BASE_URL}/customer/payments?customer_id=${customer_id}`)\n  if (!response.ok) throw new Error(`Failed to fetch customer payments: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const createCustomer = async (\n  customer: DodoPayments.Customers.CustomerCreateParams,\n): Promise<DodoPayments.Customers.Customer> => {\n  const response = await fetch(`${BASE_URL}/customer`, {\n    method: 'POST',\n    body: JSON.stringify(customer),\n    headers: { 'Content-Type': 'application/json' },\n  })\n  if (!response.ok) throw new Error(`Failed to create customer: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const updateCustomer = async (\n  customer_id: string,\n  customer: DodoPayments.Customers.CustomerUpdateParams,\n): Promise<DodoPayments.Customers.Customer> => {\n  const response = await fetch(`${BASE_URL}/customer?customer_id=${customer_id}`, {\n    method: 'PUT',\n    body: JSON.stringify(customer),\n    headers: { 'Content-Type': 'application/json' },\n  })\n  if (!response.ok) throw new Error(`Failed to update customer: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\nexport const checkout = async (\n  productCart: Array<{ product_id: string; quantity: number; amount?: number }>,\n  customer: DodoPayments.Payments.CustomerRequest,\n  billing_address: DodoPayments.Payments.BillingAddress,\n  return_url: string,\n  customMetadata?: Record<string, string>,\n) => {\n  const response = await fetch(`${BASE_URL}/checkout`, {\n    method: 'POST',\n    body: JSON.stringify({ productCart, customer, billing_address, return_url, customMetadata }),\n    headers: { 'Content-Type': 'application/json' },\n  })\n  if (!response.ok) throw new Error(`Failed to checkout: ${response.status} ${response.statusText}`)\n  return await response.json()\n}\n\n\n"
    },
    {
      "target": "hooks/useBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from 'react'\nimport { DodoPayments } from 'dodopayments'\nimport {\n  getProducts,\n  getProduct,\n  getCustomer,\n  getCustomerSubscriptions,\n  getCustomerPayments,\n  createCustomer,\n  updateCustomer,\n  checkout,\n} from '../lib/dodopayments'\n\ninterface UseBillingState {\n  loading: boolean\n  error: string | null\n}\n\nexport const useBilling = () => {\n  const [state, setState] = useState<UseBillingState>({\n    loading: false,\n    error: null,\n  })\n\n  const setLoading = useCallback((loading: boolean) => {\n    setState(prev => ({ ...prev, loading }))\n  }, [])\n\n  const setError = useCallback((error: string | null) => {\n    setState(prev => ({ ...prev, error }))\n  }, [])\n\n  const handleAsyncOperation = useCallback(async <T>(\n    operation: () => Promise<T>,\n    operationName: string\n  ): Promise<T> => {\n    try {\n      setLoading(true)\n      setError(null)\n      const result = await operation()\n      return result\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : `Failed to ${operationName}`\n      setError(errorMessage)\n      throw error\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  const fetchProducts = useCallback(async () => {\n    return handleAsyncOperation(() => getProducts(), 'fetch products')\n  }, [handleAsyncOperation])\n\n  const fetchProduct = useCallback(async (product_id: string) => {\n    return handleAsyncOperation(() => getProduct(product_id), 'fetch product')\n  }, [handleAsyncOperation])\n\n  const fetchCustomer = useCallback(async (customer_id: string) => {\n    return handleAsyncOperation(() => getCustomer(customer_id), 'fetch customer')\n  }, [handleAsyncOperation])\n\n  const fetchCustomerSubscriptions = useCallback(async (customer_id: string) => {\n    return handleAsyncOperation(() => getCustomerSubscriptions(customer_id), 'fetch customer subscriptions')\n  }, [handleAsyncOperation])\n\n  const fetchCustomerPayments = useCallback(async (customer_id: string) => {\n    return handleAsyncOperation(() => getCustomerPayments(customer_id), 'fetch customer payments')\n  }, [handleAsyncOperation])\n\n  const createNewCustomer = useCallback(async (customer: DodoPayments.Customers.CustomerCreateParams) => {\n    return handleAsyncOperation(() => createCustomer(customer), 'create customer')\n  }, [handleAsyncOperation])\n\n  const updateExistingCustomer = useCallback(async (\n    customer_id: string,\n    customer: DodoPayments.Customers.CustomerUpdateParams\n  ) => {\n    return handleAsyncOperation(() => updateCustomer(customer_id, customer), 'update customer')\n  }, [handleAsyncOperation])\n\n  const createCheckout = useCallback(async (\n    productCart: Array<{ product_id: string; quantity: number; amount?: number }>,\n    customer: DodoPayments.Payments.CustomerRequest,\n    billing_address: DodoPayments.Payments.BillingAddress,\n    return_url: string,\n    customMetadata?: Record<string, string>\n  ) => {\n    return handleAsyncOperation(\n      () => checkout(productCart, customer, billing_address, return_url, customMetadata),\n      'create checkout'\n    )\n  }, [handleAsyncOperation])\n\n  const clearError = useCallback(() => {\n    setError(null)\n  }, [setError])\n\n  return {\n    loading: state.loading,\n    error: state.error,\n    clearError,\n    fetchProducts,\n    fetchProduct,\n    fetchCustomer,\n    fetchCustomerSubscriptions,\n    fetchCustomerPayments,\n    createNewCustomer,\n    updateExistingCustomer,\n    createCheckout,\n  }\n}\n\n\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "VITE_API_BASE_URL=your-backend-url\n\n\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "zod"
  ]
}