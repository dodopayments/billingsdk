{
  "name": "react-dodopayments",
  "description": "DodoPayments template for React (Vite) frontend",
  "framework": "react",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from 'dodopayments'\r\ntype Product = DodoPayments.Product\r\n\r\nlet dodopaymentsClient: DodoPayments | null = null\r\n\r\nexport function getDodoPaymentsClient(): DodoPayments {\r\n  if (!dodopaymentsClient) {\r\n    const token = process.env.DODO_PAYMENTS_API_KEY\r\n    const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as 'live_mode' | 'test_mode'\r\n\r\n    if (!token) {\r\n      throw new Error('DODO_PAYMENTS_API_KEY environment variable is missing.')\r\n    }\r\n\r\n    if (!environment || (environment !== 'live_mode' && environment !== 'test_mode')) {\r\n      throw new Error('DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"')\r\n    }\r\n\r\n    dodopaymentsClient = new DodoPayments({\r\n      bearerToken: token,\r\n      environment: environment,\r\n    })\r\n  }\r\n\r\n  return dodopaymentsClient\r\n}\r\n\r\nexport const getProducts = async (): Promise<Product[]> => {\r\n  const response = await fetch('/api/products')\r\n  if (!response.ok) throw new Error(`Failed to fetch products: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const getProduct = async (product_id: string): Promise<Product> => {\r\n  const response = await fetch(`/api/product?product_id=${product_id}`)\r\n  if (!response.ok) throw new Error(`Failed to fetch product: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const getCustomer = async (customer_id: string): Promise<DodoPayments.Customers.Customer> => {\r\n  const response = await fetch(`/api/customer?customer_id=${customer_id}`)\r\n  if (!response.ok) throw new Error(`Failed to fetch customer: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const getCustomerSubscriptions = async (\r\n  customer_id: string,\r\n): Promise<DodoPayments.Subscriptions.Subscription[]> => {\r\n  const response = await fetch(`/api/customer/subscriptions?customer_id=${customer_id}`)\r\n  if (!response.ok) throw new Error(`Failed to fetch customer subscriptions: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const getCustomerPayments = async (\r\n  customer_id: string,\r\n): Promise<DodoPayments.Payments.Payment[]> => {\r\n  const response = await fetch(`/api/customer/payments?customer_id=${customer_id}`)\r\n  if (!response.ok) throw new Error(`Failed to fetch customer payments: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const createCustomer = async (\r\n  customer: DodoPayments.Customers.CustomerCreateParams,\r\n): Promise<DodoPayments.Customers.Customer> => {\r\n  const response = await fetch('/api/customer', {\r\n    method: 'POST',\r\n    body: JSON.stringify(customer),\r\n    headers: { 'Content-Type': 'application/json' },\r\n  })\r\n  if (!response.ok) throw new Error(`Failed to create customer: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const updateCustomer = async (\r\n  customer_id: string,\r\n  customer: DodoPayments.Customers.CustomerUpdateParams,\r\n): Promise<DodoPayments.Customers.Customer> => {\r\n  const response = await fetch(`/api/customer?customer_id=${customer_id}`, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(customer),\r\n    headers: { 'Content-Type': 'application/json' },\r\n  })\r\n  if (!response.ok) throw new Error(`Failed to update customer: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\nexport const checkout = async (\r\n  productCart: Array<{ product_id: string; quantity: number; amount?: number }>,\r\n  customer: DodoPayments.Payments.CustomerRequest,\r\n  billing_address: DodoPayments.Payments.BillingAddress,\r\n  return_url: string,\r\n  customMetadata?: Record<string, string>,\r\n) => {\r\n  const response = await fetch('/api/checkout', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ productCart, customer, billing_address, return_url, customMetadata }),\r\n    headers: { 'Content-Type': 'application/json' },\r\n  })\r\n  if (!response.ok) throw new Error(`Failed to checkout: ${response.status} ${response.statusText}`)\r\n  return await response.json()\r\n}\r\n\r\n\r\n"
    },
    {
      "target": "hooks/useBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from 'react'\r\nimport { DodoPayments } from 'dodopayments'\r\nimport {\r\n  getProducts,\r\n  getProduct,\r\n  getCustomer,\r\n  getCustomerSubscriptions,\r\n  getCustomerPayments,\r\n  createCustomer,\r\n  updateCustomer,\r\n  checkout,\r\n} from '../lib/dodopayments'\r\n\r\ninterface UseBillingState {\r\n  loading: boolean\r\n  error: string | null\r\n}\r\n\r\nexport const useBilling = () => {\r\n  const [state, setState] = useState<UseBillingState>({\r\n    loading: false,\r\n    error: null,\r\n  })\r\n\r\n  const setLoading = useCallback((loading: boolean) => {\r\n    setState(prev => ({ ...prev, loading }))\r\n  }, [])\r\n\r\n  const setError = useCallback((error: string | null) => {\r\n    setState(prev => ({ ...prev, error }))\r\n  }, [])\r\n\r\n  const handleAsyncOperation = useCallback(async <T>(\r\n    operation: () => Promise<T>,\r\n    operationName: string\r\n  ): Promise<T> => {\r\n    try {\r\n      setLoading(true)\r\n      setError(null)\r\n      const result = await operation()\r\n      return result\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : `Failed to ${operationName}`\r\n      setError(errorMessage)\r\n      throw error\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const fetchProducts = useCallback(async () => {\r\n    return handleAsyncOperation(() => getProducts(), 'fetch products')\r\n  }, [handleAsyncOperation])\r\n\r\n  const fetchProduct = useCallback(async (product_id: string) => {\r\n    return handleAsyncOperation(() => getProduct(product_id), 'fetch product')\r\n  }, [handleAsyncOperation])\r\n\r\n  const fetchCustomer = useCallback(async (customer_id: string) => {\r\n    return handleAsyncOperation(() => getCustomer(customer_id), 'fetch customer')\r\n  }, [handleAsyncOperation])\r\n\r\n  const fetchCustomerSubscriptions = useCallback(async (customer_id: string) => {\r\n    return handleAsyncOperation(() => getCustomerSubscriptions(customer_id), 'fetch customer subscriptions')\r\n  }, [handleAsyncOperation])\r\n\r\n  const fetchCustomerPayments = useCallback(async (customer_id: string) => {\r\n    return handleAsyncOperation(() => getCustomerPayments(customer_id), 'fetch customer payments')\r\n  }, [handleAsyncOperation])\r\n\r\n  const createNewCustomer = useCallback(async (customer: DodoPayments.Customers.CustomerCreateParams) => {\r\n    return handleAsyncOperation(() => createCustomer(customer), 'create customer')\r\n  }, [handleAsyncOperation])\r\n\r\n  const updateExistingCustomer = useCallback(async (\r\n    customer_id: string,\r\n    customer: DodoPayments.Customers.CustomerUpdateParams\r\n  ) => {\r\n    return handleAsyncOperation(() => updateCustomer(customer_id, customer), 'update customer')\r\n  }, [handleAsyncOperation])\r\n\r\n  const createCheckout = useCallback(async (\r\n    productCart: Array<{ product_id: string; quantity: number; amount?: number }>,\r\n    customer: DodoPayments.Payments.CustomerRequest,\r\n    billing_address: DodoPayments.Payments.BillingAddress,\r\n    return_url: string,\r\n    customMetadata?: Record<string, string>\r\n  ) => {\r\n    return handleAsyncOperation(\r\n      () => checkout(productCart, customer, billing_address, return_url, customMetadata),\r\n      'create checkout'\r\n    )\r\n  }, [handleAsyncOperation])\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null)\r\n  }, [setError])\r\n\r\n  return {\r\n    loading: state.loading,\r\n    error: state.error,\r\n    clearError,\r\n    fetchProducts,\r\n    fetchProduct,\r\n    fetchCustomer,\r\n    fetchCustomerSubscriptions,\r\n    fetchCustomerPayments,\r\n    createNewCustomer,\r\n    updateExistingCustomer,\r\n    createCheckout,\r\n  }\r\n}\r\n\r\n\r\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "zod"
  ]
}