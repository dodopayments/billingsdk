{
  "name": "express-dodopayments",
  "description": "DodoPayments template for ExpressJS",
  "framework": "express",
  "files": [
    {
      "target": "src/lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from \"dodopayments\";\r\n\r\nlet dodopaymentsClient: DodoPayments | null = null;\r\n\r\nexport function getDodoPaymentsClient(): DodoPayments {\r\n  if (!dodopaymentsClient) {\r\n    const token = process.env.DODO_PAYMENTS_API_KEY;\r\n    const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as\r\n      | \"live_mode\"\r\n      | \"test_mode\";\r\n\r\n    if (!token) {\r\n      throw new Error(\r\n        \"DODO_PAYMENTS_API_KEY is missing. Please set it in your environment.\"\r\n      );\r\n    }\r\n\r\n    if (!environment || (environment !== \"live_mode\" && environment !== \"test_mode\")) {\r\n      throw new Error(\r\n        'DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"'\r\n      );\r\n    }\r\n\r\n    dodopaymentsClient = new DodoPayments({\r\n      bearerToken: token,\r\n      environment: environment,\r\n    });\r\n  }\r\n\r\n  return dodopaymentsClient;\r\n}\r\n\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\checkout.ts",
      "type": "template",
      "content": "import { Router, Request, Response, NextFunction } from \"express\";\r\nimport { z } from \"zod\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\nimport { DodoPayments } from \"dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\nconst productCartItemSchema = z.object({\r\n  product_id: z.string().min(1, \"Product ID is required\"),\r\n  quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\r\n  amount: z.number().int().min(0).optional(),\r\n});\r\n\r\nconst attachExistingCustomerSchema = z.object({\r\n  customer_id: z.string().min(1, \"Customer ID is required\"),\r\n});\r\n\r\nconst newCustomerSchema = z.object({\r\n  email: z.string().email(\"Invalid email format\"),\r\n  name: z.string().min(1, \"Name is required\"),\r\n  phone_number: z.string().optional().nullable(),\r\n  create_new_customer: z.boolean().optional(),\r\n});\r\n\r\nconst customerSchema = z.union([attachExistingCustomerSchema, newCustomerSchema]);\r\n\r\nconst billingAddressSchema = z.object({\r\n  city: z.string().min(1, \"City is required\"),\r\n  country: z.string().regex(/^[A-Z]{2}$/, \"Country must be a 2-letter uppercase ISO code\"),\r\n  state: z.string().min(1, \"State is required\"),\r\n  street: z.string().min(1, \"Street address is required\"),\r\n  zipcode: z.string().min(1, \"Zipcode is required\"),\r\n});\r\n\r\nconst checkoutSessionSchema = z.object({\r\n  productCart: z.array(productCartItemSchema).min(1, \"At least one product is required\"),\r\n  customer: customerSchema,\r\n  billing_address: billingAddressSchema,\r\n  return_url: z.string().url(\"Return URL must be a valid URL\"),\r\n  customMetadata: z.record(z.string(), z.string()).optional(),\r\n});\r\n\r\nrouter.post(\"/\", async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const parsed = checkoutSessionSchema.safeParse(req.body);\r\n    if (!parsed.success) {\r\n      return res.status(400).json({\r\n        error: \"Validation failed\",\r\n        details: parsed.error.issues.map((issue) => ({\r\n          field: issue.path.join(\".\"),\r\n          message: issue.message,\r\n        })),\r\n      });\r\n    }\r\n\r\n    const { productCart, customer, billing_address, return_url, customMetadata } = parsed.data;\r\n\r\n    const session = await getDodoPaymentsClient().checkoutSessions.create({\r\n      product_cart: productCart,\r\n      customer: customer,\r\n      billing_address: billing_address as DodoPayments.Payments.BillingAddress,\r\n      return_url: return_url,\r\n      metadata: customMetadata,\r\n    });\r\n\r\n    return res.json(session);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\customer.ts",
      "type": "template",
      "content": "// @ts-nocheck\r\nimport { Router, Request, Response, NextFunction } from \"express\";\r\nimport { z } from \"zod\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\nconst createSchema = z.object({\r\n  email: z.string().email(),\r\n  name: z.string().min(1),\r\n  phone_number: z.string().optional().nullable(),\r\n});\r\n\r\nconst updateSchema = z.object({\r\n  email: z.string().email().optional(),\r\n  name: z.string().min(1).optional(),\r\n  phone_number: z.string().optional().nullable(),\r\n});\r\n\r\nrouter.post(\"/\", async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const body = createSchema.parse(req.body);\r\n    const created = await getDodoPaymentsClient().customers.create(body);\r\n    res.json(created);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.get(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const customer = await getDodoPaymentsClient().customers.retrieve(params.id);\r\n      res.json(customer);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nrouter.put(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const body = updateSchema.parse(req.body);\r\n      const customer = await getDodoPaymentsClient().customers.update(params.id, body);\r\n      res.json(customer);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nrouter.get(\r\n  \"/:id/subscriptions\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const subs = await getDodoPaymentsClient().subscriptions.list({\r\n        customer_id: params.id,\r\n      });\r\n      res.json(subs);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nrouter.get(\r\n  \"/:id/payments\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const payments = await getDodoPaymentsClient().payments.list({\r\n        customer_id: params.id,\r\n      });\r\n      res.json(payments);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\payments.ts",
      "type": "template",
      "content": "import { Router, Request, Response, NextFunction } from \"express\";\r\nimport { z } from \"zod\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\nrouter.get(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z\r\n        .object({ id: z.string().min(1, \"Payment ID is required\") })\r\n        .parse(req.params);\r\n\r\n      const payment = await getDodoPaymentsClient().payments.retrieve(params.id);\r\n      res.json(payment);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\products.ts",
      "type": "template",
      "content": "import { Router, Request, Response, NextFunction } from \"express\";\r\nimport { z } from \"zod\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\nrouter.get(\"/\", async (_req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const products = await getDodoPaymentsClient().products.list();\r\n    res.json(products);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.get(\"/:id\", async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z\r\n        .object({ id: z.string().min(1, \"Product ID is required\") })\r\n        .parse(req.params);\r\n\r\n      const product = await getDodoPaymentsClient().products.retrieve(params.id);\r\n      res.json(product);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\route.ts",
      "type": "template",
      "content": "// @ts-nocheck\r\nimport { Router } from \"express\";\r\nimport { router as checkoutRouter } from \"./checkout\";\r\nimport { router as customersRouter } from \"./customer\";\r\nimport { router as paymentsRouter } from \"./payments\";\r\nimport { router as productsRouter } from \"./products\";\r\nimport { router as subscriptionsRouter } from \"./subscriptions\";\r\nimport { router as webhookRouter } from \"./webhook\";\r\n\r\nexport const router = Router();\r\n\r\n// Mount sub-routers. Note: webhook uses raw body inside its own router.\r\nrouter.use(\"/checkout\", checkoutRouter);\r\nrouter.use(\"/customers\", customersRouter);\r\nrouter.use(\"/payments\", paymentsRouter);\r\nrouter.use(\"/products\", productsRouter);\r\nrouter.use(\"/subscriptions\", subscriptionsRouter);\r\nrouter.use(\"/webhook\", webhookRouter);\r\n\r\n// Centralized error handler to keep consistent error responses\r\nrouter.use((err: unknown, _req: any, res: any, _next: any) => {\r\n  const status = (err as any)?.status ?? 500;\r\n  const message = (err as any)?.message ?? \"Internal server error\";\r\n  const details = (err as any)?.details;\r\n  res.status(status).json({ error: message, ...(details ? { details } : {}) });\r\n});\r\n\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\subscriptions.ts",
      "type": "template",
      "content": "// @ts-nocheck\r\nimport { Router, Request, Response, NextFunction } from \"express\";\r\nimport { z } from \"zod\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\nconst createSchema = z.object({\r\n  customer_id: z.string().min(1, \"Customer ID is required\"),\r\n  price_id: z.string().min(1, \"Price ID is required\"),\r\n  metadata: z.record(z.string(), z.string()).optional(),\r\n});\r\n\r\nconst updateSchema = z.object({\r\n  metadata: z.record(z.string(), z.string()).optional(),\r\n});\r\n\r\nrouter.post(\"/\", async (req: Request, res: Response, next: NextFunction) => {\r\n  try {\r\n    const body = createSchema.parse(req.body);\r\n    const subscription = await getDodoPaymentsClient().subscriptions.create({\r\n      customer_id: body.customer_id,\r\n      price_id: body.price_id,\r\n      metadata: body.metadata,\r\n    });\r\n    res.json(subscription);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n});\r\n\r\nrouter.get(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const subscription = await getDodoPaymentsClient().subscriptions.retrieve(params.id);\r\n      res.json(subscription);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nrouter.put(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const body = updateSchema.parse(req.body);\r\n      const subscription = await getDodoPaymentsClient().subscriptions.update(params.id, body);\r\n      res.json(subscription);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\nrouter.delete(\r\n  \"/:id\",\r\n  async (req: Request, res: Response, next: NextFunction) => {\r\n    try {\r\n      const params = z.object({ id: z.string().min(1) }).parse(req.params);\r\n      const cancelled = await getDodoPaymentsClient().subscriptions.cancel(params.id);\r\n      res.json(cancelled);\r\n    } catch (err) {\r\n      next(err);\r\n    }\r\n  }\r\n);\r\n\r\n"
    },
    {
      "target": "src\\routes\\dodopayments\\webhook.ts",
      "type": "template",
      "content": "// @ts-nocheck\r\nimport { Router, Request, Response, NextFunction } from \"express\";\r\nimport { Webhook } from \"standardwebhooks\";\r\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\r\n\r\nexport const router = Router();\r\n\r\n// Use raw body for webhook verification on this route only\r\nrouter.post(\r\n  \"/\",\r\n  // @ts-ignore - express typing for raw is compatible at runtime\r\n  require(\"express\").raw({ type: \"application/json\" }),\r\n  async (req: Request, res: Response, _next: NextFunction) => {\r\n    const webhook = new Webhook(process.env.DODO_PAYMENTS_WEBHOOK_KEY!);\r\n    try {\r\n      const rawBody = req.body instanceof Buffer ? req.body.toString(\"utf8\") : \"\";\r\n      const headers = req.headers;\r\n      const webhookHeaders = {\r\n        \"webhook-id\": (headers[\"webhook-id\"] as string) || \"\",\r\n        \"webhook-signature\": (headers[\"webhook-signature\"] as string) || \"\",\r\n        \"webhook-timestamp\": (headers[\"webhook-timestamp\"] as string) || \"\",\r\n      };\r\n\r\n      await webhook.verify(rawBody, webhookHeaders);\r\n      const payload = JSON.parse(rawBody);\r\n\r\n      if (payload.data.payload_type === \"Subscription\") {\r\n        switch (payload.type) {\r\n          case \"subscription.active\": {\r\n            const subscription = await getDodoPaymentsClient().subscriptions.retrieve(\r\n              payload.data.subscription_id\r\n            );\r\n            console.log(\"-------SUBSCRIPTION DATA START ---------\");\r\n            console.log(subscription);\r\n            console.log(\"-------SUBSCRIPTION DATA END ---------\");\r\n            break;\r\n          }\r\n          case \"subscription.failed\":\r\n          case \"subscription.cancelled\":\r\n          case \"subscription.renewed\":\r\n          case \"subscription.on_hold\":\r\n          default:\r\n            break;\r\n        }\r\n      } else if (payload.data.payload_type === \"Payment\") {\r\n        switch (payload.type) {\r\n          case \"payment.succeeded\": {\r\n            const paymentDataResp = await getDodoPaymentsClient().payments.retrieve(\r\n              payload.data.payment_id\r\n            );\r\n            console.log(\"-------PAYMENT DATA START ---------\");\r\n            console.log(paymentDataResp);\r\n            console.log(\"-------PAYMENT DATA END ---------\");\r\n            break;\r\n          }\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n\r\n      res.status(200).json({ message: \"Webhook processed successfully\" });\r\n    } catch (error) {\r\n      console.log(\" ----- webhook verification failed -----\");\r\n      console.log(error);\r\n      // Always 200 for webhook endpoints to avoid retries storm unless you want retries\r\n      res.status(200).json({ message: \"Webhook processed successfully\" });\r\n    }\r\n  }\r\n);\r\n\r\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "express",
    "standardwebhooks",
    "zod"
  ]
}