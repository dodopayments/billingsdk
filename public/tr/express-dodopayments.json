{
  "name": "express-dodopayments",
  "description": "DodoPayments template for Express.js",
  "framework": "express",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "\n\nimport {DodoPayments} from 'dodopayments';\nimport type { PaymentListResponse, ProductListResponse, SubscriptionListResponse } from 'dodopayments/resources.mjs';\ntype Product = DodoPayments.Product;\n\nlet dodopaymentsClient: DodoPayments | null = null;\n\nexport function getDodoPaymentsClient(): DodoPayments {\n    if(!dodopaymentsClient){\n        const token = process.env.DODO_PAYMENTS_API_KEY;\n        const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as \"live_mode\" | \"test_mode\"\n\n\n    console.log('Initializing DodoPayments client...')\n    console.log('Token exists:', !!token)\n    console.log('Environment:', environment)\n    \n    if(!token) {\n       throw new Error(`\n            DODO_PAYMENTS_API_KEY environment variable is missing.\n            \n            Please check:\n            1. Your .env.local file exists in the project root\n            2. The file contains: DODO_PAYMENTS_API_KEY=<your-api-key>\n            3. You've restarted your development server\n            4. No extra quotes or spaces in the .env.local file\n        `)\n   \n    }\n    if (!environment || (environment !== \"live_mode\" && environment !== \"test_mode\")) {\n      throw new Error('DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"')\n    }\n\n    dodopaymentsClient = new DodoPayments({\n        bearerToken: token,\n        environment: environment\n    })\n\n    }\n\n    return dodopaymentsClient;\n\n}\n\n\nexport async function getProducts(): Promise<ProductListResponse[]> {\n    try{\n        const client = getDodoPaymentsClient();\n        const response = await client.products.list();\n        return response.items; \n    } catch(error){\n        console.error(\"Error fetching product_list\", error);\n        throw new Error(\"Failed to fetch product_list\");\n    }\n}\n\nexport async function getProduct(product_id: string): Promise<Product> {\n    try{\n        const client = getDodoPaymentsClient();\n        return await client.products.retrieve(product_id);\n    \n    } catch(error) {\n        console.error(\"Error fetching product\", error);\n        throw new Error(\"Failed to fetch product\");        \n    }\n}\n\nexport async function getCustomer(customer_id: string): Promise<DodoPayments.Customers.Customer> {\n    try{\n        const client = getDodoPaymentsClient();\n        return await client.customers.retrieve(customer_id);\n    } catch(error) {\n        console.error(\"Error fetch customer\", error)\n        throw new Error(\"Failed to fetch customer details\");\n    }\n\n}\n\nexport async function getCustomerSubscriptions(customer_id: string): Promise<SubscriptionListResponse[]> {\n\n    try{\n        const client = getDodoPaymentsClient();\n        const response = await client.subscriptions.list({\n            customer_id: customer_id\n        });\n        return response.items\n    } catch(error) {\n        console.error(\"Error fetching subscriptions\", error);\n        throw new Error(\"Failed to fetch customer's subscriptions\");\n    }\n    \n}\n\nexport async function getCustomerPayments(customer_id: string): Promise<PaymentListResponse[]> {\n\n    try{\n        const client = getDodoPaymentsClient();\n        const response = await client.payments.list({\n            customer_id: customer_id\n        });\n        return response.items\n    } catch(error) {\n        console.error(\"Error fetching payments list\", error);\n        throw new Error(\"Failed to fetch customer's payments list\");\n\n    }\n    \n}\n\nexport async function createCustomer(params: DodoPayments.Customers.CustomerCreateParams): Promise<DodoPayments.Customers.Customer> {\n    try{\n        const client = getDodoPaymentsClient();\n        return await client.customers.create(params);\n    } catch(error) {\n        console.error(\"Error creating customer\", error);\n        throw new Error(\"Failed to create customer\");\n    }\n        \n}\n\nexport async function updateCustomer(customer_id: string, params: DodoPayments.Customers.CustomerUpdateParams): Promise<DodoPayments.Customers.Customer> {\n    try{\n        const client = getDodoPaymentsClient();\n        return await client.customers.update(customer_id, params);\n    } catch(error) {\n        console.error(\"Error updating customer\", error);\n        throw new Error(\"Failed to update customer\");\n    }\n    \n}\n\nexport async function checkout(productCart: Array<{ product_id: string; quantity: number; amount?: number }>, customer: DodoPayments.Payments.CustomerRequest, billing_address: DodoPayments.Payments.BillingAddress, return_url: string, customMetadata?: Record<string, string>) {\n    try {\n        const client = getDodoPaymentsClient();\n        return await client.checkoutSessions.create({\n            product_cart: productCart,\n            customer: customer,\n            billing_address: billing_address as DodoPayments.Payments.BillingAddress,\n            return_url: return_url,\n            metadata: customMetadata ?? null\n        });\n    } catch(error) {\n        console.error(\"Error checking out\", error);\n        throw new Error(\"Failed checking out\")\n    }\n    \n}"
    },
    {
      "target": "routes/dodopayments/checkout.ts",
      "type": "template",
      "content": "import { Router} from \"express\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { checkout } from \"../../lib/dodopayments.js\";\nimport { DodoPayments } from \"dodopayments\";\n\nconst router = Router();\n\n\nconst productCartItemSchema = z.object({\n  product_id: z.string().min(1, \"Product ID is required\"),\n  quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\n  amount: z.number().int().min(0).optional(),\n});\n\nconst attachExistingCustomerSchema = z.object({\n  customer_id: z.string().min(1, \"Customer ID is required\"),\n});\n\nconst newCustomerSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone_number: z.string().optional().nullable(),\n  create_new_customer: z.boolean().optional(),\n});\n\nconst customerSchema = z.union([attachExistingCustomerSchema, newCustomerSchema]);\n\nconst billingAddressSchema = z.object({\n  city: z.string().min(1, \"City is required\"),\n  country: z.string().regex(/^[A-Z]{2}$/, \"Country must be a 2-letter uppercase ISO code\"),\n  state: z.string().min(1, \"State is required\"),\n  street: z.string().min(1, \"Street address is required\"),\n  zipcode: z.string().min(1, \"Zipcode is required\"),\n});\n\nconst checkoutSessionSchema = z.object({\n  productCart: z.array(productCartItemSchema).min(1, \"At least one product is required\"),\n  customer: customerSchema,\n  billing_address: billingAddressSchema,\n  return_url: z.string().url(\"Return URL must be a valid URL\"),\n  customMetadata: z.record(z.string(), z.string()).optional(),\n});\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const validationResult = checkoutSessionSchema.safeParse(req.body);\n\n    if (!validationResult.success) {\n      return res.status(400).json({\n        error: \"Validation failed\",\n        details: validationResult.error.issues.map((issue) => ({\n          field: issue.path.join(\".\"),\n          message: issue.message,\n        })),\n      });\n    }\n\n    const { productCart, customer, billing_address, return_url, customMetadata } =\n      validationResult.data;\n\n    const session = await checkout(\n      productCart.map(({ amount, ...rest }) =>\n        amount !== undefined\n          ? { ...rest, amount }\n          : { ...rest }\n      ),\n      customer as DodoPayments.Payments.CustomerRequest,\n      billing_address as DodoPayments.Payments.BillingAddress,\n      return_url,\n      customMetadata\n    );\n\n    return res.json(session);\n  } catch (error) {\n    console.error(\"Error in checkout POST handler:\", error);\n    return res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\nexport default router;"
    },
    {
      "target": "routes/dodopayments/customer.ts",
      "type": "template",
      "content": "import { Router} from \"express\";\nimport type { Response, Request } from \"express\";\nimport { z } from \"zod\";\nimport { createCustomer, updateCustomer, getCustomerPayments } from \"../../lib/dodopayments.js\"; \nimport { getDodoPaymentsClient } from \"../../lib/dodopayments.js\";\n\nconst router = Router();\n\n\nconst customerIdSchema = z.object({\n  customer_id: z.string().min(1, \"Customer ID is required\"),\n});\n\nconst createCustomerSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone_number: z.string().optional().nullable(),\n});\n\nconst updateCustomerSchema = z.object({\n  name: z.string().optional().nullable(),\n  phone_number: z.string().optional().nullable(),\n});\n\n\n\n\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const validation = customerIdSchema.safeParse(req.query);\n\n    if (!validation.success) {\n      return res.status(400).json({ error: validation?.error?.issues[0]?.message });\n    }\n\n    const { customer_id } = validation.data;\n    const customer = await getDodoPaymentsClient().customers.retrieve(customer_id);\n    return res.json(customer);\n  } catch (error) {\n    console.error(\"Error retrieving customer:\", error);\n    return res.status(500).json({ error: \"Failed to retrieve customer\" });\n  }\n});\n\n\nrouter.post(\"/\", async (req: Request, res: Response) => {\n  try {\n    const validation = createCustomerSchema.safeParse(req.body);\n\n    if (!validation.success) {\n      return res.status(400).json({ error: validation.error.issues[0]?.message });\n    }\n\n    const customerData = {\n      ...validation.data,\n      phone_number: validation.data.phone_number ?? null,\n    };\n    const customer = await createCustomer(customerData); \n    return res.json(customer);\n  } catch (error) {\n    console.error(\"Error creating customer:\", error);\n    return res.status(500).json({ error: \"Failed to create customer\" });\n  }\n});\n\n\nrouter.put(\"/\", async (req: Request, res: Response) => {\n  try {\n    const idValidation = customerIdSchema.safeParse(req.query);\n    if (!idValidation.success) {\n      return res.status(400).json({ error: idValidation.error.issues[0]?.message });\n    }\n\n    const updateValidation = updateCustomerSchema.safeParse(req.body);\n    if (!updateValidation.success) {\n      return res.status(400).json({ error: updateValidation.error.issues[0]?.message });\n    }\n\n    const { customer_id } = idValidation.data;\n    const updateData = {\n      name: typeof updateValidation.data.name !== \"undefined\" ? updateValidation.data.name : null,\n      phone_number: typeof updateValidation.data.phone_number !== \"undefined\" ? updateValidation.data.phone_number : null,\n    };\n    const customer = await updateCustomer(customer_id, updateData);\n    return res.json(customer);\n  } catch (error) {\n    console.error(\"Error updating customer:\", error);\n    return res.status(500).json({ error: \"Failed to update customer\" });\n  }\n});\n\n\nexport default router;"
    },
    {
      "target": "routes/dodopayments/subscriptions.ts",
      "type": "template",
      "content": "import { Router } from \"express\";\nimport type { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { getCustomerSubscriptions } from \"../../lib/dodopayments.js\";\n\nconst router = Router();\n\n\nconst subscriptionQuerySchema = z.object({\n  customer_id: z.string().min(1, \"Customer ID is required\"),\n});\n\n\nrouter.get(\"/\", async (req: Request, res: Response) => {\n  try {\n    const validation = subscriptionQuerySchema.safeParse(req.query);\n\n    if (!validation.success) {\n      return res\n        .status(400)\n        .json({ error: validation.error.issues[0]?.message });\n    }\n\n    const { customer_id } = validation.data;\n    const subscriptions = await getCustomerSubscriptions(customer_id);\n\n    return res.json(subscriptions);\n  } catch (error) {\n    console.error(\"Error fetching subscriptions:\", error);\n    return res.status(500).json({ error: \"Failed to fetch subscriptions\" });\n  }\n});\n\nexport default router;"
    },
    {
      "target": "routes/dodopayments/webhook.ts",
      "type": "template",
      "content": "import { Router } from \"express\";\nimport type { Request, Response } from \"express\";\nimport { Webhook } from \"standardwebhooks\";\nimport express from \"express\"\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments.js\";\n\nconst router = Router();\nconst webhook = new Webhook(process.env.DODO_PAYMENTS_WEBHOOK_KEY!);\n\n// NOTE: we need raw body for signature verification\n// so disable JSON parsing for this route\nrouter.post(\"/\", express.raw({ type: \"application/json\" }), async (req: Request, res: Response) => {\n  try {\n    const rawBody = req.body.toString(); // since it's raw buffer\n    const webhookHeaders = {\n      \"webhook-id\": req.header(\"webhook-id\") || \"\",\n      \"webhook-signature\": req.header(\"webhook-signature\") || \"\",\n      \"webhook-timestamp\": req.header(\"webhook-timestamp\") || \"\",\n    };\n\n    \n    await webhook.verify(rawBody, webhookHeaders);\n\n    const payload = JSON.parse(rawBody);\n\n    if (payload.data.payload_type === \"Subscription\") {\n      switch (payload.type) {\n        case \"subscription.active\":\n          const subscription = await getDodoPaymentsClient().subscriptions.retrieve(\n            payload.data.subscription_id\n          );\n          console.log(\"-------SUBSCRIPTION DATA START ---------\");\n          console.log(subscription);\n          console.log(\"-------SUBSCRIPTION DATA END ---------\");\n          break;\n        case \"subscription.failed\":\n          // handle failed subscription\n          break;\n        // etc...\n      }\n    } else if (payload.data.payload_type === \"Payment\") {\n      switch (payload.type) {\n        case \"payment.succeeded\":\n          const payment = await getDodoPaymentsClient().payments.retrieve(\n            payload.data.payment_id\n          );\n          console.log(\"-------PAYMENT DATA START ---------\");\n          console.log(payment);\n          console.log(\"-------PAYMENT DATA END ---------\");\n          break;\n      }\n    }\n\n    return res.status(200).json({ message: \"Webhook processed successfully\" });\n  } catch (error) {\n    console.error(\"Webhook verification failed:\", error);\n    return res.status(400).json({ error: \"Invalid webhook\" });\n  }\n});\n\nexport default router;\n"
    },
    {
      "target": "routes/dodopayments/route.ts",
      "type": "template",
      "content": "import {Router} from \"express\";\nimport checkOutRoutes from \"./checkout.js\";\nimport customerRoutes from \"./customer.js\";\nimport paymentsRoutes from \"./payments.js\";\nimport productsRoutes from \"./product.js\";\nimport subscriptionsRoutes from \"./subscriptions.js\";\nimport webhookRoutes from \"./webhook.js\"\n\nconst router = Router();\n\n\nrouter.use(\"/checkout\", checkOutRoutes);\nrouter.use(\"/customer\", customerRoutes);\nrouter.use(\"/payments\", paymentsRoutes);\nrouter.use(\"/products\", productsRoutes);\nrouter.use(\"/subscriptions\", subscriptionsRoutes);\nrouter.use(\"/webhook\", webhookRoutes);\n\nexport default router;"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "DODO_PAYMENTS_API_KEY=your-api-key\nDODO_PAYMENTS_WEBHOOK_KEY=your-webhook-secret\nDODO_PAYMENTS_RETURN_URL=https://yourdomain.com/checkout/success\nDODO_PAYMENTS_ENVIRONMENT=\"test_mode\"\n"
    }
  ],
  "dependencies": [
    "express",
    "dodopayments",
    "standardwebhooks",
    "zod",
    "standardwebhooks"
  ]
}