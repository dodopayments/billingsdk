{
  "files": [
    {
      "path": "packages/templates/nextjs/lib/paypal.ts",
      "target": "lib/paypal.ts",
      "content": "import { PayPalSDK } from '@paypal/paypal-server-sdk';\n\n/**\n * PayPal SDK configuration\n * \n * This file sets up the PayPal client with the appropriate environment\n * based on the PAYPAL_ENV environment variable.\n */\n\n// Create PayPal client\nconst paypalClient = new PayPalSDK({\n  clientId: process.env.PAYPAL_CLIENT_ID || '',\n  clientSecret: process.env.PAYPAL_CLIENT_SECRET || '',\n  environment: process.env.PAYPAL_ENV === 'live' ? 'live' : 'sandbox',\n});\n\n/**\n * Create a PayPal order\n * \n * @param amount - The amount to charge\n * @param currency - The currency code (e.g., 'USD')\n * @param description - Description of the purchase\n * @returns Promise resolving to the order ID\n */\nexport const createPayPalOrder = async (\n  amount: string,\n  currency: string = 'USD',\n  description: string = 'BillingSDK Purchase'\n) => {\n  try {\n    const order = await paypalClient.createOrder({\n      intent: 'CAPTURE',\n      purchase_units: [\n        {\n          description,\n          amount: {\n            currency_code: currency,\n            value: amount,\n          },\n        },\n      ],\n      application_context: {\n        cancel_url: `${process.env.NEXT_PUBLIC_APP_URL}/cancel`,\n        return_url: `${process.env.NEXT_PUBLIC_APP_URL}/return`,\n      },\n    });\n    \n    return order.id;\n  } catch (error) {\n    console.error('Error creating PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Capture a PayPal order\n * \n * @param orderId - The PayPal order ID to capture\n * @returns Promise resolving to the capture result\n */\nexport const capturePayPalOrder = async (orderId: string) => {\n  try {\n    const capture = await paypalClient.capturePaymentForOrder(orderId);\n    return capture;\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    throw error;\n  }\n};\n\n/**\n * Get order details\n * \n * @param orderId - The PayPal order ID to retrieve\n * @returns Promise resolving to the order details\n */\nexport const getPayPalOrder = async (orderId: string) => {\n  try {\n    const order = await paypalClient.getOrder(orderId);\n    return order;\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    throw error;\n  }\n};"
    },
    {
import { useState } from 'react';

/**
 * Custom React hook for managing PayPal integration
 * 
 * This hook provides functions and state management for integrating
 * PayPal payments into your React application.
 */

interface PayPalOrder {
  id: string;
  status: string;
  amount: string;
  currency: string;
}

export const usePayPal = () => {
  const [order, setOrder] = useState<PayPalOrder | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  /**
   * Create a PayPal order
   * 
   * @param amount - The amount to charge
   * @param currency - The currency code (e.g., 'USD')
   * @param description - Description of the purchase
   */
  const createOrder = async (
    amount: string,
    currency: string = 'USD',
    description: string = 'BillingSDK Purchase'
  ) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ amount, currency, description }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to create PayPal order');
      }
      
      const data = await response.json();
      setOrder({
        id: data.id,
        status: 'CREATED',
        amount,
        currency,
      });
      
      return data.id;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Capture a PayPal order
   * 
   * @param orderId - The PayPal order ID to capture
   */
  const captureOrder = async (orderId: string) => {
    setLoading(true);
    setError(null);
    
    try {
      const response = await fetch('/api/order/capture', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to capture PayPal order');
      }
      
      const data = await response.json();
      setOrder(prev => prev ? { ...prev, status: data?.status ?? 'CAPTURED' } : null);
      
      return data;
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Unknown error';
      setError(errorMessage);
      throw err;
    } finally {
      setLoading(false);
    }
  };

  /**
   * Reset the hook state
   */
  const reset = () => {
    setOrder(null);
    setLoading(false);
    setError(null);
  };

  return {
    order,
    loading,
    error,
    createOrder,
    captureOrder,
    reset,
  };
};
    {
      "path": "packages/templates/nextjs/api-routes/(paypal)/checkout/route.ts",
      "target": "app/api/(paypal)/checkout/route.ts",
      "content": "import { NextRequest } from 'next/server';\nimport { createPayPalOrder } from '@/lib/paypal';\n\n/**\n * Create a PayPal order for checkout\n * POST /api/(paypal)/checkout\n * \n * This endpoint is called by the frontend to create a PayPal order\n * before redirecting the user to PayPal for approval.\n * \n * Request body:\n * - amount: string (required)\n * - currency: string (optional, defaults to 'USD')\n * - description: string (optional)\n */\nexport async function POST(req: NextRequest) {\n  try {\n    const { amount, currency = 'USD', description = 'BillingSDK Purchase' } = await req.json();\n    \n    if (!amount) {\n      return new Response(\n        JSON.stringify({ error: 'Amount is required' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const orderId = await createPayPalOrder(amount, currency, description);\n    \n    return new Response(\n      JSON.stringify({ id: orderId }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Error creating PayPal checkout order:', error);\n    \n    return new Response(\n      JSON.stringify({ error: 'Failed to create PayPal checkout order' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}"
    },
    {
      "path": "packages/templates/nextjs/api-routes/(paypal)/order/[orderId]/route.ts",
      "target": "app/api/(paypal)/order/[orderId]/route.ts",
      "content": "import { NextRequest } from 'next/server';\nimport { getPayPalOrder } from '@/lib/paypal';\n\n/**\n * Get PayPal order details\n * GET /api/(paypal)/order/[orderId]\n * \n * Path parameters:\n * - orderId: string (required)\n */\nexport async function GET(\n  req: NextRequest,\n  { params }: { params: { orderId: string } }\n) {\n  try {\n    const { orderId } = params;\n    \n    if (!orderId) {\n      return new Response(\n        JSON.stringify({ error: 'Order ID is required' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const order = await getPayPalOrder(orderId);\n    \n    return new Response(\n      JSON.stringify(order),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Error retrieving PayPal order:', error);\n    \n    return new Response(\n      JSON.stringify({ error: 'Failed to retrieve PayPal order' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}"
    },
    {
      "path": "packages/templates/nextjs/api-routes/(paypal)/order/capture/route.ts",
      "target": "app/api/(paypal)/order/capture/route.ts",
      "content": "import { NextRequest } from 'next/server';\nimport { z } from 'zod';\nimport { capturePayPalOrder } from '@/lib/paypal';\n\n/**\n * Capture a PayPal order\n * POST /api/(paypal)/order/capture\n * \n * Request body:\n * - orderId: string (required)\n */\nexport async function POST(req: NextRequest) {\n  try {\n    const { orderId } = z.object({ orderId: z.string().min(1) }).parse(await req.json());\n    \n    if (!orderId) {\n      return new Response(\n        JSON.stringify({ error: 'Order ID is required' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    const capture = await capturePayPalOrder(orderId);\n    \n    return new Response(\n      JSON.stringify(capture),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    \n    return new Response(\n      JSON.stringify({ error: 'Failed to capture PayPal order' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}\n"
    }
    {
      "path": "packages/templates/nextjs/api-routes/(paypal)/webhook/route.ts",
      "target": "app/api/(paypal)/webhook/route.ts",
      "content": "import { NextRequest } from 'next/server';\nimport { Webhook } from 'standardwebhooks';\n\n/**\n * Handle PayPal webhook events\n * POST /api/(paypal)/webhook\n * \n * This endpoint receives webhook events from PayPal and processes them accordingly.\n * The request body contains the event data, and the headers contain the signature\n * for verification.\n */\nexport async function POST(req: NextRequest) {\n  try {\n    // Initialize webhook handler with PayPal webhook ID from environment variables\n    const webhook = new Webhook(process.env.PAYPAL_WEBHOOK_ID || '');\n    \n    // Get the request body and headers\n    const body = await req.text();\n    const headers = Object.fromEntries(req.headers);\n    \n    // Verify the webhook signature\n    const verified = webhook.verify(body, headers);\n    \n    if (!verified) {\n      return new Response(\n        JSON.stringify({ error: 'Invalid webhook signature' }),\n        { status: 400, headers: { 'Content-Type': 'application/json' } }\n      );\n    }\n    \n    // Parse the event data\n    const event = JSON.parse(body);\n    const eventType = event.event_type;\n    \n    switch (eventType) {\n      case 'PAYMENT.CAPTURE.COMPLETED':\n        // Handle successful payment capture\n        console.log('Payment captured:', event);\n        // Update your database, send confirmation emails, etc.\n        break;\n        \n      case 'PAYMENT.CAPTURE.REFUNDED':\n        // Handle payment refund\n        console.log('Payment refunded:', event);\n        // Update your database, notify user, etc.\n        break;\n        \n      case 'BILLING.SUBSCRIPTION.ACTIVATED':\n        // Handle subscription activation\n        console.log('Subscription activated:', event);\n        // Update your database, grant access to premium features, etc.\n        break;\n        \n      case 'BILLING.SUBSCRIPTION.CANCELLED':\n        // Handle subscription cancellation\n        console.log('Subscription cancelled:', event);\n        // Update your database, revoke access to premium features, etc.\n        break;\n        \n      default:\n        console.log('Unhandled PayPal event:', eventType);\n        break;\n    }\n    \n    return new Response(\n      JSON.stringify({ received: true }),\n      { status: 200, headers: { 'Content-Type': 'application/json' } }\n    );\n  } catch (error) {\n    console.error('Error processing PayPal webhook:', error);\n    \n    return new Response(\n      JSON.stringify({ error: 'Failed to process webhook' }),\n      { status: 500, headers: { 'Content-Type': 'application/json' } }\n    );\n  }\n}"
    },
    {
      "path": "packages/templates/nextjs/.env.paypal.example",
      "target": ".env.example",
      "content": "NEXT_PUBLIC_APP_URL=http://localhost:3000\nPAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID"
    }
  ],
  "dependencies": [
    "@paypal/paypal-server-sdk",
    "standardwebhooks",
    "zod"
  ]
}