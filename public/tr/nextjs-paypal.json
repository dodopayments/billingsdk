{
	"name": "nextjs-paypal",
	"description": "PayPal template for NextJS",
	"framework": "nextjs",
	"files": [
		{
			"target": "lib/paypal.ts",
			"type": "template",
			"content": "import paypal from '@paypal/checkout-server-sdk'\n\nlet paypalClient: paypal.core.PayPalHttpClient | null = null\n\nexport function getPayPalClient(): paypal.core.PayPalHttpClient {\n  if (!paypalClient) {\n    const clientId = process.env.PAYPAL_CLIENT_ID\n    const clientSecret = process.env.PAYPAL_CLIENT_SECRET\n    if (!clientId || !clientSecret) {\n      throw new Error('PAYPAL_CLIENT_ID/PAYPAL_CLIENT_SECRET are not set')\n    }\n    const environment = process.env.PAYPAL_ENV === 'live'\n      ? new paypal.core.LiveEnvironment(clientId, clientSecret)\n      : new paypal.core.SandboxEnvironment(clientId, clientSecret)\n    paypalClient = new paypal.core.PayPalHttpClient(environment)\n  }\n  return paypalClient\n}\n"
		},
		{
			"target": "app/api/(paypal)/checkout/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { z } from 'zod'\nimport { getPayPalClient } from '@/lib/paypal'\n\n// ISO 4217 currency decimal places lookup\nconst currencyDecimals: Record<string, number> = {\n  'USD': 2, 'EUR': 2, 'GBP': 2, 'CAD': 2, 'AUD': 2, 'CNY': 2,\n  'JPY': 0, 'KRW': 0, 'VND': 0, 'CLP': 0, 'PYG': 0, 'XOF': 0,\n  'HUF': 2, 'ISK': 0, 'MXN': 2, 'NOK': 2, 'PLN': 2, 'SEK': 2,\n  'CHF': 2, 'CZK': 2, 'DKK': 2, 'RON': 2, 'BRL': 2, 'MYR': 2,\n  'THB': 2, 'PHP': 2, 'INR': 2, 'SGD': 2, 'ILS': 2, 'TWD': 2,\n  'ZAR': 2, 'NZD': 2, 'TRY': 2, 'HKD': 2, 'SAR': 2, 'AED': 2,\n  'RUB': 2, 'EGP': 2, 'IDR': 2, 'ARS': 2, 'COP': 2, 'PEN': 2,\n  'UYU': 2, 'BOB': 2, 'CRC': 2, 'DOP': 2, 'GTQ': 2, 'HNL': 2,\n  'NIO': 2, 'PAB': 2, 'UYI': 0\n};\n\nconst schema = z.object({\n  amount: z.string().regex(/^\\d+(\\.\\d{1,2})?$/).transform(Number).refine(val => val > 0, { message: 'Amount must be greater than 0' }),\n  currency: z.string().regex(/^[A-Z]{3}$/, { message: 'Currency must be a 3-letter uppercase code' }).refine(currency => ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CNY'].includes(currency), { message: 'Unsupported currency' }),\n})\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const parsed = schema.safeParse(body)\n    if (!parsed.success) {\n      return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })\n    }\n    \n    // Get the correct number of decimal places for the currency\n    const decimals = currencyDecimals[parsed.data.currency] ?? 2;\n    \n    const requestOrder = new paypal.orders.OrdersCreateRequest()\n    requestOrder.headers['Prefer'] = 'return=representation'\n    requestOrder.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [{ amount: { currency_code: parsed.data.currency, value: parsed.data.amount.toFixed(decimals) } }],\n    })\n    const client = getPayPalClient()\n    const response = await client.execute(requestOrder)\n    return NextResponse.json(response.result)\n  } catch (e) {\n    return NextResponse.json({ error: 'Internal error' }, { status: 500 })\n  }\n}\n"
		},
		{
			"target": "app/api/(paypal)/order/capture/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '@/lib/paypal'\nimport { z } from 'zod'\n\nconst capSchema = z.object({ orderId: z.string().min(1) })\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const parsed = capSchema.safeParse(body)\n    if (!parsed.success) return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })\n    const { orderId } = parsed.data\n    \n    const client = getPayPalClient();\n    const capReq = new paypal.orders.OrdersCaptureRequest(orderId);\n    capReq.requestBody({});\n    \n    const response = await client.execute(capReq);\n    return NextResponse.json(response.result);\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    return NextResponse.json({ error: 'Internal error capturing order' }, { status: 500 });\n  }\n}\n"
		},
		{
			"target": "app/api/(paypal)/order/[orderId]/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '@/lib/paypal'\n\nexport async function GET(request: Request, { params }: { params: { orderId: string } }) {\n  try {\n    // Validate orderId parameter is present and non-empty\n    const { orderId } = params;\n    if (!orderId || typeof orderId !== 'string' || orderId.trim() === '') {\n      return NextResponse.json({ error: 'orderId parameter is required and must be a non-empty string' }, { status: 400 });\n    }\n    \n    const client = getPayPalClient();\n    const getReq = new paypal.orders.OrdersGetRequest(orderId);\n    \n    const response = await client.execute(getReq);\n    return NextResponse.json(response.result);\n  } catch (error) {\n    console.error('Error fetching PayPal order:', error);\n    return NextResponse.json({ error: 'Internal error fetching order' }, { status: 500 });\n  }\n}\n"
		},
		{
    {
      "target": "app/api/(paypal)/webhook/route.ts",
      "type": "template",
      "content": "import { NextResponse } from 'next/server'\\nimport paypal from '@paypal/checkout-server-sdk'\\nimport { getPayPalClient } from '@/lib/paypal'\\n\\nexport async function POST(request: Request) {\\n  try {\\n    const rawBody = await request.text()\\n    const client = getPayPalClient()\\n    const webhookId = process.env.PAYPAL_WEBHOOK_ID\\n    if (!webhookId) {\\n      console.error('PAYPAL_WEBHOOK_ID is not set in environment variables')\\n      return NextResponse.json({ error: 'Webhook verification not configured' }, { status: 500 })\\n    }\\n    const headers = Object.fromEntries(request.headers.entries())\\n    let event: any\\n    try {\\n      event = JSON.parse(rawBody)\\n    } catch {\\n      return NextResponse.json({ error: 'Invalid JSON body' }, { status: 400 })\\n    }\\n    const required = ['paypal-auth-algo','paypal-cert-url','paypal-transmission-id','paypal-transmission-sig','paypal-transmission-time'] as const\\n    for (const h of required) {\\n      if (!headers[h]) return NextResponse.json({ error: `Missing header: ${h}` }, { status: 400 })\\n    }\\n    const verifyRequest = new paypal.notifications.VerifyWebhookSignatureRequest()\\n    verifyRequest.requestBody({\\n      auth_algo: headers['paypal-auth-algo'],\\n      cert_url: headers['paypal-cert-url'],\\n      transmission_id: headers['paypal-transmission-id'],\\n      transmission_sig: headers['paypal-transmission-sig'],\\n      transmission_time: headers['paypal-transmission-time'],\\n      webhook_id: webhookId,\\n      webhook_event: event\\n    })\\n    const verifyResponse = await client.execute(verifyRequest)\\n    if (verifyResponse.result.verification_status !== 'SUCCESS') {\\n      console.warn('PayPal webhook signature verification failed')\\n      return NextResponse.json({ error: 'Webhook signature verification failed' }, { status: 400 })\\n    }\\n    return NextResponse.json({ received: true })\\n  } catch (error) {\\n    console.error('Error processing PayPal webhook:', error)\\n    return NextResponse.json({ error: 'Internal error processing webhook' }, { status: 500 })\\n  }\\n}\\n"
    },
			"target": ".env.example",
			"type": "template",
			"content": "PAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
		}
	],
	"dependencies": ["@paypal/checkout-server-sdk", "zod"]
}
