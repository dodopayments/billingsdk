{
	"name": "nextjs-paypal",
	"description": "PayPal template for NextJS",
	"framework": "nextjs",
	"files": [
		{
			"target": "lib/paypal.ts",
			"type": "template",
			"content": "import paypal from '@paypal/checkout-server-sdk'\n\nlet paypalClient: paypal.core.PayPalHttpClient | null = null\n\nexport function getPayPalClient(): paypal.core.PayPalHttpClient {\n  if (!paypalClient) {\n    const clientId = process.env.PAYPAL_CLIENT_ID\n    const clientSecret = process.env.PAYPAL_CLIENT_SECRET\n    if (!clientId || !clientSecret) {\n      throw new Error('PAYPAL_CLIENT_ID/PAYPAL_CLIENT_SECRET are not set')\n    }\n    const environment = process.env.PAYPAL_ENV === 'live'\n      ? new paypal.core.LiveEnvironment(clientId, clientSecret)\n      : new paypal.core.SandboxEnvironment(clientId, clientSecret)\n    paypalClient = new paypal.core.PayPalHttpClient(environment)\n  }\n  return paypalClient\n}\n"
		},
		{
			"target": "app/api/(paypal)/checkout/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { z } from 'zod'\nimport { getPayPalClient } from '@/lib/paypal'\n\nconst schema = z.object({\n  amount: z.string().regex(/^\\\\d+(\\\\.\\\\d{1,2})?$/).transform(Number).refine(val => val > 0, { message: 'Amount must be greater than 0' }),\n  currency: z.string().regex(/^[A-Z]{3}$/, { message: 'Currency must be a 3-letter uppercase code' }).refine(currency => ['USD', 'EUR', 'GBP', 'CAD', 'AUD', 'JPY', 'CNY'].includes(currency), { message: 'Unsupported currency' }),\n})\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    const parsed = schema.safeParse(body)\n    if (!parsed.success) {\n      return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 })\n    }\n    const requestOrder = new paypal.orders.OrdersCreateRequest()\n    requestOrder.headers['Prefer'] = 'return=representation'\n    requestOrder.requestBody({\n      intent: 'CAPTURE',\n      purchase_units: [{ amount: { currency_code: parsed.data.currency, value: parsed.data.amount.toFixed(2) } }],\n    })\n    const client = getPayPalClient()\n    const response = await client.execute(requestOrder)\n    return NextResponse.json(response.result)\n  } catch (e) {\n    return NextResponse.json({ error: 'Internal error' }, { status: 500 })\n  }\n}\n"
		},
		{
			"target": "app/api/(paypal)/order/capture/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '@/lib/paypal'\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json()\n    \n    // Validate request body is an object\n    if (!body || typeof body !== 'object') {\n      return NextResponse.json({ error: 'Request body must be a JSON object' }, { status: 400 })\n    }\n    \n    const { orderId } = body as { orderId?: string };\n    \n    // Validate orderId is present and non-empty\n    if (!orderId || typeof orderId !== 'string' || orderId.trim() === '') {\n      return NextResponse.json({ error: 'orderId is required and must be a non-empty string' }, { status: 400 })\n    }\n    \n    const client = getPayPalClient();\n    const capReq = new paypal.orders.OrdersCaptureRequest(orderId);\n    capReq.requestBody({});\n    \n    const response = await client.execute(capReq);\n    return NextResponse.json(response.result);\n  } catch (error) {\n    console.error('Error capturing PayPal order:', error);\n    return NextResponse.json({ error: 'Internal error capturing order' }, { status: 500 });\n  }\n}\n"
		},
		{
			"target": "app/api/(paypal)/order/[orderId]/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '@/lib/paypal'\n\nexport async function GET(request: Request, { params }: { params: { orderId: string } }) {\n  try {\n    // Validate orderId parameter is present and non-empty\n    const { orderId } = params;\n    if (!orderId || typeof orderId !== 'string' || orderId.trim() === '') {\n      return NextResponse.json({ error: 'orderId parameter is required and must be a non-empty string' }, { status: 400 });\n    }\n    \n    const client = getPayPalClient();\n    const getReq = new paypal.orders.OrdersGetRequest(orderId);\n    \n    const response = await client.execute(getReq);\n    return NextResponse.json(response.result);\n  } catch (error) {\n    console.error('Error fetching PayPal order:', error);\n    return NextResponse.json({ error: 'Internal error fetching order' }, { status: 500 });\n  }\n}\n"
		},
		{
			"target": "app/api/(paypal)/webhook/route.ts",
			"type": "template",
			"content": "import { NextResponse } from 'next/server'\nimport paypal from '@paypal/checkout-server-sdk'\nimport { getPayPalClient } from '@/lib/paypal'\n\nexport async function POST(request: Request) {\n  try {\n    // Get raw body for webhook verification\n    const rawBody = await request.text()\n    \n    // Verify PayPal webhook signature\n    const client = getPayPalClient()\n    const verifyRequest = new paypal.notifications.VerifyWebhookSignatureRequest()\n    \n    // Get webhook ID from environment variables\n    const webhookId = process.env.PAYPAL_WEBHOOK_ID\n    if (!webhookId) {\n      console.error('PAYPAL_WEBHOOK_ID is not set in environment variables')\n      return NextResponse.json({ error: 'Webhook verification not configured' }, { status: 500 })\n    }\n    \n    // Get headers\n    const headers = Object.fromEntries(request.headers.entries())\n    \n    // Prepare verification payload\n    verifyRequest.requestBody({\n      auth_algo: headers['paypal-auth-algo'],\n      cert_url: headers['paypal-cert-url'],\n      transmission_id: headers['paypal-transmission-id'],\n      transmission_sig: headers['paypal-transmission-sig'],\n      transmission_time: headers['paypal-transmission-time'],\n      webhook_id: webhookId,\n      webhook_event: JSON.parse(rawBody)\n    })\n    \n    // Execute verification\n    const verifyResponse = await client.execute(verifyRequest)\n    \n    // Check verification result\n    if (verifyResponse.result.verification_status !== 'SUCCESS') {\n      console.warn('PayPal webhook signature verification failed')\n      return NextResponse.json({ error: 'Webhook signature verification failed' }, { status: 400 })\n    }\n    \n    // Process verified webhook event\n    const event = JSON.parse(rawBody)\n    console.log('Verified PayPal webhook event received:', event.event_type)\n    \n    // TODO: Handle specific webhook events (e.g., payment completed, subscription cancelled, etc.)\n    \n    return NextResponse.json({ received: true })\n  } catch (error) {\n    console.error('Error processing PayPal webhook:', error)\n    return NextResponse.json({ error: 'Internal error processing webhook' }, { status: 500 })\n  }\n}\n"
		},
		{
			"target": ".env.example",
			"type": "template",
			"content": "PAYPAL_CLIENT_ID=YOUR-CLIENT-ID\nPAYPAL_CLIENT_SECRET=YOUR-CLIENT-SECRET\nPAYPAL_ENV=sandbox\nPAYPAL_WEBHOOK_ID=YOUR-WEBHOOK-ID\nNEXT_PUBLIC_APP_URL=http://localhost:3000"
		}
	],
	"dependencies": ["@paypal/checkout-server-sdk", "zod"]
}
