{
  "name": "react-stripe",
  "description": "Stripe template for React.js",
  "framework": "react",
  "files": [
    {
      "target": "lib/stripe.ts",
      "type": "template",
      "content": "import Stripe from \"stripe\";\n\nexport type Product = Stripe.Product;\nexport type Customer = Stripe.Customer;\nexport type Subscription = Stripe.Subscription;\nexport type PaymentIntent = Stripe.PaymentIntent;\n\nexport const getProducts = async ({\n  baseUrl,\n}: {\n  baseUrl: string;\n}): Promise<Product[]> => {\n  const response = await fetch(`${baseUrl}/products`);\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch products: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const getProduct = async ({\n  baseUrl,\n  product_id,\n}: {\n  baseUrl: string;\n  product_id: string;\n}): Promise<Product> => {\n  const response = await fetch(`${baseUrl}/product?product_id=${product_id}`);\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch product: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const getCustomer = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string;\n  customer_id: string;\n}): Promise<Customer> => {\n  const response = await fetch(\n    `${baseUrl}/customer?customer_id=${customer_id}`\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch customer: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const getCustomerSubscriptions = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string;\n  customer_id: string;\n}): Promise<Subscription[]> => {\n  const response = await fetch(\n    `${baseUrl}/customer/subscriptions?customer_id=${customer_id}`\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch subscriptions: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const getCustomerPayments = async ({\n  baseUrl,\n  customer_id,\n}: {\n  baseUrl: string;\n  customer_id: string;\n}): Promise<PaymentIntent[]> => {\n  const response = await fetch(\n    `${baseUrl}/customer/payments?customer_id=${customer_id}`\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to fetch payments: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const createCustomer = async ({\n  baseUrl,\n  customer,\n}: {\n  baseUrl: string;\n  customer: Stripe.CustomerCreateParams;\n}): Promise<Customer> => {\n  const response = await fetch(`${baseUrl}/customer`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(customer),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Failed to create customer: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const updateCustomer = async ({\n  baseUrl,\n  customer_id,\n  customer,\n}: {\n  baseUrl: string;\n  customer_id: string;\n  customer: Stripe.CustomerUpdateParams;\n}): Promise<Customer> => {\n  const response = await fetch(\n    `${baseUrl}/customer?customer_id=${customer_id}`,\n    {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(customer),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to update customer: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n\nexport const checkout = async ({\n  baseUrl,\n  price_id,\n  customer_id,\n  success_url,\n  cancel_url,\n}: {\n  baseUrl: string;\n  price_id: string;\n  customer_id?: string;\n  success_url: string;\n  cancel_url: string;\n}): Promise<{ checkout_url: string }> => {\n  const response = await fetch(`${baseUrl}/checkout`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ price_id, customer_id, success_url, cancel_url }),\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Failed to checkout: ${response.status} ${response.statusText}`\n    );\n  }\n  return response.json();\n};\n"
    },
    {
      "target": "hooks/stripe/useBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from \"react\";\nimport Stripe from \"stripe\";\nimport {\n  getProducts,\n  getProduct,\n  getCustomer,\n  getCustomerSubscriptions,\n  getCustomerPayments,\n  createCustomer,\n  updateCustomer,\n  checkout,\n} from \"../../lib/stripe\";\n\ninterface UseBillingState {\n  loading: boolean;\n  error: string | null;\n}\n\nexport function useBilling({ baseUrl }: { baseUrl?: string } = {}) {\n  const resolvedBaseUrl =\n    baseUrl ?? process.env.VITE_BASE_URL ?? \"http://localhost:8080\";\n\n  const [state, setState] = useState<UseBillingState>({\n    loading: false,\n    error: null,\n  });\n\n  const [products, setProducts] = useState<Stripe.Product[]>([]);\n  const [customer, setCustomer] = useState<Stripe.Customer | null>(null);\n\n  const setLoading = useCallback((loading: boolean) => {\n    setState((prev) => ({ ...prev, loading }));\n  }, []);\n\n  const setError = useCallback((error: string | null) => {\n    setState((prev) => ({ ...prev, error }));\n  }, []);\n\n  const handleAsyncOperation = useCallback(\n    async <T>(\n      operation: () => Promise<T>,\n      operationName: string\n    ): Promise<T> => {\n      try {\n        setLoading(true);\n        setError(null);\n        const result = await operation();\n        return result;\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : `Failed to ${operationName}`;\n        setError(errorMessage);\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setLoading, setError]\n  );\n\n  const fetchProducts = useCallback(async (): Promise<Stripe.Product[]> => {\n    const result = await handleAsyncOperation(\n      () => getProducts({ baseUrl: resolvedBaseUrl }),\n      \"fetch products\"\n    );\n    setProducts(result);\n    return result;\n  }, [handleAsyncOperation, resolvedBaseUrl]);\n\n  const fetchProduct = useCallback(\n    async (product_id: string): Promise<Stripe.Product> => {\n      return handleAsyncOperation(\n        () => getProduct({ baseUrl: resolvedBaseUrl, product_id }),\n        \"fetch product\"\n      );\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const fetchCustomer = useCallback(\n    async (customer_id: string): Promise<Stripe.Customer> => {\n      const result = await handleAsyncOperation(\n        () => getCustomer({ baseUrl: resolvedBaseUrl, customer_id }),\n        \"fetch customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const fetchCustomerSubscriptions = useCallback(\n    async (customer_id: string): Promise<Stripe.Subscription[]> => {\n      return handleAsyncOperation(\n        () =>\n          getCustomerSubscriptions({ baseUrl: resolvedBaseUrl, customer_id }),\n        \"fetch customer subscriptions\"\n      );\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const fetchCustomerPayments = useCallback(\n    async (customer_id: string): Promise<Stripe.PaymentIntent[]> => {\n      return handleAsyncOperation(\n        () => getCustomerPayments({ baseUrl: resolvedBaseUrl, customer_id }),\n        \"fetch customer payments\"\n      );\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const createNewCustomer = useCallback(\n    async (\n      newCustomer: Stripe.CustomerCreateParams\n    ): Promise<Stripe.Customer> => {\n      const result = await handleAsyncOperation(\n        () =>\n          createCustomer({ baseUrl: resolvedBaseUrl, customer: newCustomer }),\n        \"create customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const updateExistingCustomer = useCallback(\n    async (\n      customer_id: string,\n      updatedCustomer: Stripe.CustomerUpdateParams\n    ): Promise<Stripe.Customer> => {\n      const result = await handleAsyncOperation(\n        () =>\n          updateCustomer({\n            baseUrl: resolvedBaseUrl,\n            customer_id,\n            customer: updatedCustomer,\n          }),\n        \"update customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const createCheckout = useCallback(\n    async (\n      price_id: string,\n      success_url: string,\n      cancel_url: string,\n      customer_id?: string\n    ) => {\n      return handleAsyncOperation(\n        () =>\n          checkout({\n            baseUrl: resolvedBaseUrl,\n            price_id,\n            customer_id,\n            success_url,\n            cancel_url,\n          }),\n        \"create checkout\"\n      );\n    },\n    [handleAsyncOperation, resolvedBaseUrl]\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, [setError]);\n\n  return {\n    loading: state.loading,\n    error: state.error,\n    products,\n    customer,\n    clearError,\n    fetchProducts,\n    fetchProduct,\n    fetchCustomer,\n    fetchCustomerSubscriptions,\n    fetchCustomerPayments,\n    createNewCustomer,\n    updateExistingCustomer,\n    createCheckout,\n  };\n}\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "VITE_BASE_URL=\"YOUR API URL\""
    }
  ],
  "dependencies": [
    "stripe",
    "react"
  ]
}