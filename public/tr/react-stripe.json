{
  "name": "react-stripe",
  "description": "Stripe template for React.js",
  "framework": "react",
  "files": [
    {
      "target": "lib/stripe.ts",
      "type": "template",
      "content": "import Stripe from 'stripe';\n\nlet _stripe: Stripe | null = null;\nexport const getStripe = (): Stripe => {\n  if (!_stripe) {\n    _stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {\n      \n    });\n  }\n  return _stripe;\n};\n\nconst stripe = getStripe();\n\nexport type Product = Stripe.Product;\nexport type Customer = Stripe.Customer;\nexport type Subscription = Stripe.Subscription;\nexport type PaymentIntent = Stripe.PaymentIntent;\n\n\nexport const getProducts = async (): Promise<Product[]> => {\n  const { data } = await stripe.products.list({ limit: 100 });\n  return data;\n};\n\nexport const getProduct = async (product_id: string): Promise<Product> => {\n  return await stripe.products.retrieve(product_id);\n};\n\n\nexport const getCustomer = async (customer_id: string): Promise<Customer> => {\n  const customer = await stripe.customers.retrieve(customer_id);\n  if ((customer as Stripe.DeletedCustomer).deleted) {\n    throw new Error(`Customer with id ${customer_id} is deleted.`);\n  }\n  return customer as Customer;\n};\n\nexport const createCustomer = async (\n  customer: Stripe.CustomerCreateParams\n): Promise<Customer> => {\n  return await stripe.customers.create(customer);\n};\n\nexport const updateCustomer = async (\n  customer_id: string,\n  customer: Stripe.CustomerUpdateParams\n): Promise<Customer> => {\n  return await stripe.customers.update(customer_id, customer);\n};\n\n\nexport const getCustomerSubscriptions = async (\n  customer_id: string\n): Promise<Subscription[]> => {\n  const { data } = await stripe.subscriptions.list({\n    customer: customer_id,\n  });\n  return data;\n};\n\n\nexport const getCustomerPayments = async (\n  customer_id: string\n): Promise<PaymentIntent[]> => {\n  const { data } = await stripe.paymentIntents.list({\n    customer: customer_id,\n    limit: 100,\n  });\n  return data;\n};\n\n\nexport const checkout = async ({\n  product_id,\n  customer_id,\n  success_url,\n  cancel_url,\n}: {\n  product_id: string;\n  customer_id?: string;\n  success_url: string;\n  cancel_url: string;\n}): Promise<{ checkout_url: string }> => {\n  const session = await stripe.checkout.sessions.create({\n    mode: \"subscription\", // or \"payment\" for one-time\n    line_items: [{ price: product_id, quantity: 1 }],\n    customer: customer_id,\n    success_url,\n    cancel_url,\n  });\n\n  return { checkout_url: session.url! };\n};"
    },
    {
      "target": "hooks/useStripeBilling.ts",
      "type": "template",
      "content": "import { useState, useCallback } from \"react\";\nimport {\n  getProducts,\n  getProduct,\n  getCustomer,\n  getCustomerSubscriptions,\n  getCustomerPayments,\n  createCustomer,\n  updateCustomer,\n  checkout,\n  \n  \n} from \"../lib/stripe\";\nimport Stripe from \"stripe\";\nimport type {Product,\n  Customer,\n  Subscription,\n  PaymentIntent,} from \"../lib/stripe\";\n\ninterface UseBillingState {\n  loading: boolean;\n  error: string | null;\n}\n\nexport function useStripeBilling() {\n  const [state, setState] = useState<UseBillingState>({\n    loading: false,\n    error: null,\n  });\n\n  const [products, setProducts] = useState<Product[]>([]);\n  const [customer, setCustomer] = useState<Customer | null>(null);\n\n  const setLoading = useCallback((loading: boolean) => {\n    setState((prev) => ({ ...prev, loading }));\n  }, []);\n\n  const setError = useCallback((error: string | null) => {\n    setState((prev) => ({ ...prev, error }));\n  }, []);\n\n  const handleAsyncOperation = useCallback(\n    async <T,>(operation: () => Promise<T>, operationName: string): Promise<T> => {\n      try {\n        setLoading(true);\n        setError(null);\n        const result = await operation();\n        return result;\n      } catch (error) {\n        const errorMessage =\n          error instanceof Error ? error.message : `Failed to ${operationName}`;\n        setError(errorMessage);\n        throw error;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [setLoading, setError]\n  );\n\n  // -------- Products --------\n  const fetchProducts = useCallback(async (): Promise<Product[]> => {\n    const result = await handleAsyncOperation(() => getProducts(), \"fetch products\");\n    setProducts(result);\n    return result;\n  }, [handleAsyncOperation]);\n\n  const fetchProduct = useCallback(\n    async (product_id: string): Promise<Product> => {\n      return handleAsyncOperation(() => getProduct(product_id), \"fetch product\");\n    },\n    [handleAsyncOperation]\n  );\n\n  // -------- Customers --------\n  const fetchCustomer = useCallback(\n    async (customer_id: string): Promise<Customer> => {\n      const result = await handleAsyncOperation(\n        () => getCustomer(customer_id),\n        \"fetch customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation]\n  );\n\n  const createNewCustomer = useCallback(\n    async (newCustomer: Stripe.CustomerCreateParams): Promise<Customer> => {\n      const result = await handleAsyncOperation(\n        () => createCustomer(newCustomer),\n        \"create customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation]\n  );\n\n  const updateExistingCustomer = useCallback(\n    async (\n      customer_id: string,\n      updatedCustomer: Stripe.CustomerUpdateParams\n    ): Promise<Customer> => {\n      const result = await handleAsyncOperation(\n        () => updateCustomer(customer_id, updatedCustomer),\n        \"update customer\"\n      );\n      setCustomer(result);\n      return result;\n    },\n    [handleAsyncOperation]\n  );\n\n  // -------- Subscriptions --------\n  const fetchCustomerSubscriptions = useCallback(\n    async (customer_id: string): Promise<Subscription[]> => {\n      return handleAsyncOperation(\n        () => getCustomerSubscriptions(customer_id),\n        \"fetch customer subscriptions\"\n      );\n    },\n    [handleAsyncOperation]\n  );\n\n  // -------- Payments --------\n  const fetchCustomerPayments = useCallback(\n    async (customer_id: string): Promise<PaymentIntent[]> => {\n      return handleAsyncOperation(\n        () => getCustomerPayments(customer_id),\n        \"fetch customer payments\"\n      );\n    },\n    [handleAsyncOperation]\n  );\n\n  // -------- Checkout --------\n  const createCheckout = useCallback(\n    async (opts: {\n      product_id: string;\n      customer_id?: string;\n      success_url: string;\n      cancel_url: string;\n    }) => {\n      return handleAsyncOperation(() => checkout(opts), \"create checkout\");\n    },\n    [handleAsyncOperation]\n  );\n\n  const clearError = useCallback(() => {\n    setError(null);\n  }, [setError]);\n\n  return {\n    loading: state.loading,\n    error: state.error,\n    products,\n    customer,\n    clearError,\n    fetchProducts,\n    fetchProduct,\n    fetchCustomer,\n    fetchCustomerSubscriptions,\n    fetchCustomerPayments,\n    createNewCustomer,\n    updateExistingCustomer,\n    createCheckout,\n  };\n}\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": " VITE_BASE_URL=\"YOUR API URL\"\nSTRIPE_SECRET_KEY=sk_test_12345...\nSTRIPE_WEBHOOK_SECRET=whsec_12345\nVITE_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_12345\n"
    }
  ],
  "dependencies": [
    "stripe",
    "react",
    "zod"
  ]
}