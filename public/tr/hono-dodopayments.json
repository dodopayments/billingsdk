{
  "name": "hono-dodopayments",
  "description": "DodoPayments template for hono",
  "framework": "hono",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from 'dodopayments'\n\nlet dodopaymentsClient: DodoPayments | null = null\n\nexport function getDodoPaymentsClient(): DodoPayments {\n  if (!dodopaymentsClient) {\n    const token = process.env.DODO_PAYMENTS_API_KEY\n    const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as \"live_mode\" | \"test_mode\"\n\n    if (!token) {\n      throw new Error(`\n        DODO_PAYMENTS_API_KEY environment variable is missing.\n        \n        Please check:\n        1. Your .env file exists in the project root\n        2. The file contains: DODO_PAYMENTS_API_KEY=<your-api-key>\n        3. You've restarted your development server\n        4. No extra quotes or spaces in the .env file\n      `)\n    }\n\n    if (!environment || (environment !== \"live_mode\" && environment !== \"test_mode\")) {\n      throw new Error('DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"')\n    }\n\n    dodopaymentsClient = new DodoPayments({\n      bearerToken: token,\n      environment: environment,\n    })\n  }\n\n  return dodopaymentsClient\n}\n"
    },
    {
      "target": "routes/dodopayments/route.ts",
      "type": "template",
      "content": "import { Hono } from 'hono';\nimport { checkoutRouter } from './checkout';\nimport { customerRouter } from './customer';\nimport { paymentsRouter } from './payments';\nimport { productsRouter } from './products';\nimport { subscriptionsRouter } from './subscriptions';\nimport { webhookRouter } from './webhook';\n\nconst router = new Hono()\n  .route('/checkout', checkoutRouter)\n  .route('/customer', customerRouter)\n  .route('/payments', paymentsRouter)\n  .route('/products', productsRouter)\n  .route('/subscriptions', subscriptionsRouter)\n  .route('/webhook', webhookRouter);\n\n\nexport { router as dodopaymentsRouter };\n"
    },
    {
      "target": "routes/dodopayments/checkout.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\nimport { DodoPayments } from 'dodopayments';\nimport { z } from 'zod';\nimport { zValidator } from '@hono/zod-validator'\n\n\nconst productCartItemSchema = z.object({\n  product_id: z.string().min(1, \"Product ID is required\"),\n  quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\n  amount: z.number().int().min(0).optional(),\n});\n\nconst attachExistingCustomerSchema = z.object({\n  customer_id: z.string().min(1, \"Customer ID is required\"),\n});\n\nconst newCustomerSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone_number: z.string().optional().nullable(),\n  create_new_customer: z.boolean().optional(),\n});\n\nconst customerSchema = z.union([attachExistingCustomerSchema, newCustomerSchema]);\n\nconst billingAddressSchema = z.object({\n  city: z.string().min(1, \"City is required\"),\n  country: z.string().regex(/^[A-Z]{2}$/, \"Country must be a 2-letter uppercase ISO code\"),\n  state: z.string().min(1, \"State is required\"),\n  street: z.string().min(1, \"Street address is required\"),\n  zipcode: z.string().min(1, \"Zipcode is required\"),\n});\n\nconst checkoutSessionSchema = z.object({\n  productCart: z.array(productCartItemSchema).min(1, \"At least one product is required\"),\n  customer: customerSchema,\n  billing_address: billingAddressSchema,\n  return_url: z.string().url(\"Return URL must be a valid URL\"),\n  customMetadata: z.record(z.string(), z.string()).optional(),\n});\n\nconst router = new Hono()\n  .post('/', zValidator('json', checkoutSessionSchema, (result, c) => {\n    if (!result.success) {\n      return c.json({\n        error: \"Validation failed\",\n        details: result.error.issues.map(issue => ({\n          field: issue.path.join('.'),\n          message: issue.message\n        }))\n      })\n    }\n  }), async (c) => {\n    const { productCart, customer, billing_address, return_url, customMetadata } = c.req.valid('json')\n    try {\n      const session = await getDodoPaymentsClient().checkoutSessions.create({\n        product_cart: productCart,\n        customer: customer,\n        billing_address: billing_address as DodoPayments.Payments.BillingAddress,\n        return_url: return_url,\n        metadata: customMetadata,\n      });\n\n      return c.json(session);\n    } catch (error) {\n      console.error('Error creating checkout session:', error);\n      return c.json({ error: 'Internal Server Error' }, 500);\n    }\n  })\n\nexport { router as checkoutRouter };\n"
    },
    {
      "target": "routes/dodopayments/customer.ts",
      "type": "template",
      "content": "import { Hono } from 'hono';\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\nimport { z } from 'zod';\nimport { zValidator } from '@hono/zod-validator';\n\nconst customerCreateSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  name: z.string().min(1, \"Name is required\"),\n  phone_number: z.string().optional().nullable(),\n});\n\nconst customerUpdateSchema = z.object({\n  email: z.string().email(\"Invalid email format\").optional(),\n  name: z.string().min(1, \"Name is required\").optional(),\n  phone_number: z.string().optional().nullable(),\n});\n\nconst router = new Hono().\n  get('/', zValidator('query', z.object({ customer_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'customer_id is required' }, 400);\n    }\n  }), async (c) => {\n    try {\n      const { customer_id } = c.req.valid('query')\n      const customer = await getDodoPaymentsClient().customers.retrieve(customer_id);\n      return c.json(customer);\n    } catch (error) {\n      console.error('Error fetching customer:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .post('/', zValidator('json', customerCreateSchema, (result, c) => {\n    if (!result.success) {\n      return c.json({\n        error: \"Validation failed\",\n        details: result.error.issues.map(issue => ({\n          field: issue.path.join('.'),\n          message: issue.message\n        }))\n      }, 400)\n    }\n  }), async (c) => {\n    try {\n      const customerData = c.req.valid('json')\n      const customer = await getDodoPaymentsClient().customers.create(customerData);\n      return c.json(customer);\n    } catch (error) {\n      console.error('Error creating customer:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .put('/', zValidator('query', z.object({ customer_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'customer_id is required' }, 400);\n    }\n  }), zValidator('json', customerUpdateSchema, (result, c) => {\n    if (!result.success) {\n      return c.json({\n        error: \"Validation failed\",\n        details: result.error.issues.map(issue => ({\n          field: issue.path.join('.'),\n          message: issue.message\n        }))\n      }, 400)\n    }\n  }), async (c) => {\n    try {\n      const { customer_id } = c.req.valid('query')\n      const updateData = c.req.valid('json')\n      const customer = await getDodoPaymentsClient().customers.update(customer_id, updateData);\n      return c.json(customer);\n    } catch (error) {\n      console.error('Error updating customer:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .get('/subscriptions', zValidator('query', z.object({ customer_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'customer_id is required' }, 400);\n    }\n  }), async (c) => {\n    try {\n      const { customer_id } = c.req.valid('query')\n      const subscriptions = await getDodoPaymentsClient().subscriptions.list({\n        customer_id: customer_id,\n      });\n      return c.json(subscriptions);\n    } catch (error) {\n      console.error('Error fetching customer subscriptions:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .get('/payments', zValidator('query', z.object({ customer_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'customer_id is required' }, 400);\n    }\n  }), async (c) => {\n    try {\n      const { customer_id } = c.req.valid('query')\n\n      const payments = await getDodoPaymentsClient().payments.list({\n        customer_id: customer_id,\n      });\n      return c.json(payments);\n    } catch (error) {\n      console.error('Error fetching customer payments:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  });\n\nexport { router as customerRouter };\n"
    },
    {
      "target": "routes/dodopayments/payments.ts",
      "type": "template",
      "content": "import { Hono } from 'hono';\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\nimport { zValidator } from '@hono/zod-validator';\nimport z from 'zod';\n\nconst router = new Hono()\n  .get('/', zValidator('param', z.object({ payment_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'payment_id is required' }, 400);\n    }\n  }), async (c) => {\n    try {\n      const { payment_id } = c.req.valid('param');\n      const payment = await getDodoPaymentsClient().payments.retrieve(payment_id);\n      return c.json(payment);\n    } catch (error) {\n      console.error('Error fetching payment:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .get('/list', zValidator('query', z.object({\n    customer_id: z.string().optional(),\n    limit: z.coerce.number().optional(),\n    starting_after: z.string().optional()\n  })), async (c) => {\n    try {\n      const params = c.req.valid('query');\n\n      const payments = await getDodoPaymentsClient().payments.list(params);\n      return c.json(payments);\n    } catch (error) {\n      console.error('Error fetching payments list:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n\nexport { router as paymentsRouter };\n"
    },
    {
      "target": "routes/dodopayments/products.ts",
      "type": "template",
      "content": "import { Hono } from 'hono';\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\nimport { zValidator } from '@hono/zod-validator';\nimport z from 'zod';\n\nconst router = new Hono()\n  .get('/', async (c) => {\n    try {\n      const products = await getDodoPaymentsClient().products.list()\n      return c.json(products);\n    } catch (error) {\n      console.error('Error fetching products:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n  .get('product', zValidator('param', z.object({ product_id: z.string() }), (result, c) => {\n    if (!result.success) {\n      return c.json({ error: 'product_id is required' }, 400);\n    }\n  }), async (c) => {\n    try {\n      const { product_id } = c.req.valid('param');\n      const product = await getDodoPaymentsClient().products.retrieve(product_id);\n      return c.json(product);\n    } catch (error) {\n      console.error('Error fetching product:', error);\n      return c.json({ error: 'Internal server error' }, 500);\n    }\n  })\n\nexport { router as productsRouter };\n"
    },
    {
      "target": "routes/dodopayments/subscriptions.ts",
      "type": "template",
      "content": "import { Hono } from \"hono\";\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\nimport { zValidator } from \"@hono/zod-validator\";\nimport z from \"zod\";\n\nconst router = new Hono()\n  .get('/',\n    zValidator('query', z.object({ subscription_id: z.string() }), (result, c) => {\n      if (!result.success) {\n        return c.json({ error: 'subscription_id is required' }, 400);\n      }\n    }),\n    async (c) => {\n      try {\n        const { subscription_id } = c.req.valid('query');\n        const subscription = await getDodoPaymentsClient().subscriptions.retrieve(subscription_id);\n        return c.json(subscription);\n      } catch (error) {\n        console.error('Error fetching subscription:', error);\n        return c.json({ error: 'Internal server error' }, 500);\n      }\n    })\n  .get('/list',\n    zValidator('query', z.object({\n      customer_id: z.string().optional(),\n      limit: z.coerce.number().optional(),\n      starting_after: z.string().optional()\n    })),\n    async (c) => {\n      try {\n        const params = c.req.valid('query');\n\n        const subscriptions = await getDodoPaymentsClient().subscriptions.list(params);\n        return c.json(subscriptions);\n      } catch (error) {\n        console.error('Error fetching subscriptions list:', error);\n        return c.json({ error: 'Internal server error' }, 500);\n      }\n    })\n\nexport { router as subscriptionsRouter };\n"
    },
    {
      "target": "routes/dodopayments/webhook.ts",
      "type": "template",
      "content": "import { Hono } from \"hono\";\nimport { Webhook } from \"standardwebhooks\";\nimport { getDodoPaymentsClient } from '../../lib/dodopayments';\n\nconst webhook = new Webhook(process.env.DODO_PAYMENTS_WEBHOOK_KEY!);\n\nconst router = new Hono()\n  .post('/', async (c) => {\n    try {\n      const rawBody = await c.req.raw.text();\n      const webhookHeaders = {\n        \"webhook-id\": c.req.header(\"webhook-id\") || \"\",\n        \"webhook-signature\": c.req.header(\"webhook-signature\") || \"\",\n        \"webhook-timestamp\": c.req.header(\"webhook-timestamp\") || \"\",\n      };\n\n      await webhook.verify(rawBody, webhookHeaders);\n      const payload = JSON.parse(rawBody);\n      if (payload.data.payload_type === \"Subscription\") {\n        switch (payload.type) {\n          case \"subscription.active\":\n            const subscription = await getDodoPaymentsClient().subscriptions.retrieve(payload.data.subscription_id);\n            console.log(\"-------SUBSCRIPTION DATA START ---------\")\n            console.log(subscription)\n            console.log(\"-------SUBSCRIPTION DATA END ---------\")\n            break;\n          case \"subscription.failed\":\n            break;\n          case \"subscription.cancelled\":\n            break;\n          case \"subscription.renewed\":\n            break;\n          case \"subscription.on_hold\":\n            break\n          default:\n            break;\n        }\n      } else if (payload.data.payload_type === \"Payment\") {\n        switch (payload.type) {\n          case \"payment.succeeded\":\n            const paymentDataResp = await getDodoPaymentsClient().payments.retrieve(payload.data.payment_id)\n            console.log(\"-------PAYMENT DATA START ---------\")\n            console.log(paymentDataResp)\n            console.log(\"-------PAYMENT DATA END ---------\")\n            break;\n          default:\n            break;\n        }\n      }\n\n      return c.json({ message: \"Webhook processed successfully\" }, 200);\n    } catch (error) {\n      console.error('Error processing webhook:', error);\n      return c.json({ error: 'Webhook verification failed:' }, 400);\n    }\n  })\n\nexport { router as webhookRouter };\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "# DodoPayments Configuration\nDODO_PAYMENTS_API_KEY=your_api_key_here\nDODO_PAYMENTS_ENVIRONMENT=test_mode\nDODO_PAYMENTS_WEBHOOK_KEY=your_webhook_key_here\n\n# Server Configuration\nPORT=3000\nNODE_ENV=development\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "standardwebhooks",
    "zod",
    "hono",
    "@hono/zod-validator"
  ]
}