{
  "name": "hono-dodopayments",
  "description": "DodoPayments template for Hono",
  "framework": "hono",
  "files": [
    {
      "target": "lib/dodopayments.ts",
      "type": "template",
      "content": "import { DodoPayments } from 'dodopayments'\n\nlet dodopaymentsClient: DodoPayments | null = null\n\nexport function getDodoPaymentsClient(): DodoPayments {\n  if (!dodopaymentsClient) {\n    const token = process.env.DODO_PAYMENTS_API_KEY\n    const environment = process.env.DODO_PAYMENTS_ENVIRONMENT as \"live_mode\" | \"test_mode\"\n\n    if (!token) {\n      throw new Error(`\n        DODO_PAYMENTS_API_KEY environment variable is missing.\n        \n        Please check:\n        1. Your .env file exists in the project root\n        2. The file contains: DODO_PAYMENTS_API_KEY=<your-api-key>\n        3. You've restarted your development server\n        4. No extra quotes or spaces in the .env file\n      `)\n    }\n\n    if (!environment || (environment !== \"live_mode\" && environment !== \"test_mode\")) {\n      throw new Error('DODO_PAYMENTS_ENVIRONMENT must be either \"live_mode\" or \"test_mode\"')\n    }\n\n    dodopaymentsClient = new DodoPayments({\n      bearerToken: token,\n      environment: environment,\n    })\n  }\n\n  return dodopaymentsClient\n}"
    },
    {
      "target": "routes/route.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { checkoutRouter } from './dodopayments/checkout'\nimport { customerRouter } from './dodopayments/customer'\nimport { paymentsRouter } from './dodopayments/payments'\nimport { productsRouter } from './dodopayments/products'\nimport { subscriptionsRouter } from './dodopayments/subscriptions'\nimport { webhookRouter } from './dodopayments/webhook'\n\nconst app = new Hono()\n\napp.route('/checkout', checkoutRouter)\napp.route('/customer', customerRouter)\napp.route('/payments', paymentsRouter)\napp.route('/products', productsRouter)\napp.route('/subscriptions', subscriptionsRouter)\napp.route('/webhook', webhookRouter)\n\nexport { app as dodopaymentsRouter }\n"
    },
    {
      "target": "routes/dodopayments/checkout.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport DodoPayments from 'dodopayments'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments'\nimport { z } from 'zod'\n\nconst app = new Hono();\n\nconst productCartItemSchema = z.object({\n    product_id: z.string().min(1, \"Product ID is required\"),\n    quantity: z.number().int().min(1, \"Quantity must be at least 1\"),\n    amount: z.number().int().min(0).optional(),\n});\n\nconst attachExistingCustomerSchema = z.object({\n    customer_id: z.string().min(1, \"Customer ID is required\"),\n});\n\nconst newCustomerSchema = z.object({\n    email: z.string().email(\"Invalid email format\"),\n    name: z.string().min(1, \"Name is required\"),\n    phone_number: z.string().optional().nullable(),\n    create_new_customer: z.boolean().optional(),\n});\n\nconst customerSchema = z.union([attachExistingCustomerSchema, newCustomerSchema]);\n\nconst billingAddressSchema = z.object({\n    city: z.string().min(1, \"City is required\"),\n    country: z.string().regex(/^[A-Z]{2}$/, \"Country must be a 2-letter uppercase ISO code\"),\n    state: z.string().min(1, \"State is required\"),\n    street: z.string().min(1, \"Street address is required\"),\n    zipcode: z.string().min(1, \"Zipcode is required\"),\n});\n\nconst checkoutSessionSchema = z.object({\n    productCart: z.array(productCartItemSchema).min(1, \"At least one product is required\"),\n    customer: customerSchema,\n    billing_address: billingAddressSchema,\n    return_url: z.string().url(\"Return URL must be a valid URL\"),\n    customMetadata: z.record(z.string(), z.string()).optional(),\n});\n\n\napp.post('/', async (c) => {\n    try {\n        const body = await c.req.json()\n        const validatedResult = checkoutSessionSchema.safeParse(body)\n\n        if (!validatedResult.success) {\n            return c.json(\n                {\n                    error: \"Validation Failed\",\n                    details: validatedResult.error.issues.map(issue => ({\n                        field: issue.path.join(\".\"),\n                        message: issue.message\n                    })),\n                },\n                400\n            )\n        }\n\n        const { productCart, billing_address, customer, return_url, customMetadata} = validatedResult.data\n\n        const sesssion = getDodoPaymentsClient().checkoutSessions.create({\n            product_cart: productCart,\n            billing_address: billing_address as DodoPayments.Payments.BillingAddress,\n            customer,\n            return_url,\n            metadata: customMetadata\n        })\n        return c.json(sesssion)\n\n    } catch (error) {\n            console.error(\"Error in checkout POST handler\", error)\n            return c.json({error: \"Internal server error\"}, 500)\n    }\n})\n\nexport {app as checkoutRouter};"
    },
    {
      "target": "routes/dodopayments/customer.ts",
      "type": "template",
      "content": "import { Hono } from \"hono\";\nimport { getDodoPaymentsClient } from \"../../lib/dodopayments\";\nimport { z } from \"zod\"\n\nconst app = new Hono();\n\nconst customerCreateSchema = z.object({\n    email: z.string().email(\"Invalid email format\"),\n    name: z.string().min(1, \"Name is required\"),\n    phone_number: z.string().optional().nullable(),\n});\n\nconst customerUpdateSchema = z.object({\n    email: z.string().email(\"Invalid email format\").optional(),\n    name: z.string().min(1, \"Name is required\").optional(),\n    phone_number: z.string().optional().nullable(),\n})\n\n\napp.get('/', async (c) => {\n    try {\n        const customer_id  = c.req.query('customer_id');\n\n        if (!customer_id || typeof customer_id !== \"string\") {\n            return c.json({ error: \"customer_id is required\" }, 400)\n        }\n\n        const costumer = await getDodoPaymentsClient().customers.retrieve(customer_id)\n    } catch (error) {\n        console.error(\"Error fetching customer\", error);\n        return c.json({ error: \"internal server error\" }, 500)\n    }\n})\n\napp.post('/', async (c) => {\n    try {\n        const body = c.req.json()\n        const validatedResult = customerCreateSchema.safeParse(body);\n\n        if(!validatedResult.success) {\n            return c.json({\n                error: \"Validation failed\",\n                details: validatedResult.error.issues.map(issue => ({\n                    field: issue.path.join(\".\"),\n                    message: issue.message\n                }))\n            }, 400)\n        }\n\n        const customer = await getDodoPaymentsClient().customers.create(validatedResult.data)\n        return c.json(customer)\n\n    } catch (error) {\n\n        console.error(\"Error while creating new customer:\", error);\n        return c.json({error: \"Internal server error\"}, 500)\n    }\n});\n\napp.put('/', async (c) => {\n    try {\n        const customer_id = c.req.query('customer_id');\n\n        if(!customer_id || typeof customer_id !== \"string\") {\n            return c.json({error: \"customer_id is required\"}, 400)\n        }\n\n        const body = c.req.json()\n        const validatedResult = customerUpdateSchema.safeParse(body)\n\n        if(!validatedResult.success) {\n            return c.json({\n                error: \"Valdiation failed\",\n                details: validatedResult.error.issues.map(issue => ({\n                    field: issue.path.join(\".\"),\n                    message: issue.message\n                }))\n            }, 400)\n        }\n\n        const customer = await getDodoPaymentsClient().customers.update(customer_id, validatedResult.data)\n        return c.json(customer)\n\n    } catch (error) {\n        console.error(\"Error while updating customer:\", error)\n        return c.json({error: \"Internal server error\"}, 500)\n    }\n})\n\napp.get('/subsriptions', async (c) => {\n    try {\n        const customer_id = c.req.query('customer_id')\n        \n        if(!customer_id || typeof customer_id !== \"string\") {\n            return c.json({error: \"customer_id is required\"}, 400)\n        }\n\n        const subscriptions = await getDodoPaymentsClient().subscriptions.list({\n            customer_id: customer_id\n        })\n\n        return c.json(subscriptions)\n\n    } catch (error) {\n        console.error(\"Error while fetching customer subscriptions:\", error)\n        return c.json({error: \"internal server error\"}, 500)\n    }\n})\n\napp.get('payments', async (c) => {\n    try {\n        const customer_id = c.req.query('customer_id')\n\n        if(!customer_id || typeof customer_id !== \"string\") {\n            return c.json({error: \"customer_id is required\"}, 400)\n        }\n\n        const payments = getDodoPaymentsClient().payments.list({\n            customer_id: customer_id\n        })\n        return c.json(payments)\n\n    } catch (error) {\n        console.error(\"Error fetching customer payments\", error)\n        return c.json({error: \"internal server error\"}, 500)\n    }\n})\n\nexport { app as customerRouter }"
    },
    {
      "target": "routes/dodopayments/payments.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments'\n\nconst app = new Hono()\n\napp.get('/', async (c) => {\n  try {\n    const payment_id = c.req.query('payment_id')\n\n    if (!payment_id || typeof payment_id !== 'string') {\n      return c.json({ error: 'payment_id is required' }, 400)\n    }\n\n    const payment = await getDodoPaymentsClient().payments.retrieve(payment_id)\n    return c.json(payment)\n  } catch (error) {\n\n    console.error('Error fetching payment:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n\n  }\n})\n\napp.get('/list', async (c) => {\n  try {\n\n    const customer_id = c.req.query('customer_id')\n    const limit = c.req.query('limit')\n    const starting_after = c.req.query('starting_after')\n\n    const params: any = {}\n    if (customer_id && typeof customer_id === 'string') {\n      params.customer_id = customer_id\n    }\n    if (limit && typeof limit === 'string') {\n      params.limit = parseInt(limit)\n    }\n    if (starting_after && typeof starting_after === 'string') {\n      params.starting_after = starting_after\n    }\n\n    const payments = await getDodoPaymentsClient().payments.list(params)\n    return c.json(payments)\n  } catch (error) {\n\n    console.error('Error fetching payments list:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n    \n  }\n})\n\nexport { app as paymentsRouter }\n"
    },
    {
      "target": "routes/dodopayments/products.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments'\n\nconst app = new Hono()\n\napp.get('/', async (c) => {\n  try {\n    const limit = c.req.query('limit')\n    const starting_after = c.req.query('starting_after')\n\n    const params: any = {}\n    if (limit && typeof limit === 'string') {\n      params.limit = parseInt(limit)\n    }\n    if (starting_after && typeof starting_after === 'string') {\n      params.starting_after = starting_after\n    }\n\n    const products = await getDodoPaymentsClient().products.list(params)\n    return c.json(products)\n  } catch (error) {\n    console.error('Error fetching products:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n  }\n})\n\napp.get('/product', async (c) => {\n  try {\n    const product_id = c.req.query('product_id')\n\n    if (!product_id || typeof product_id !== 'string') {\n      return c.json({ error: 'product_id is required' }, 400)\n    }\n\n    const product = await getDodoPaymentsClient().products.retrieve(product_id)\n    return c.json(product)\n  } catch (error) {\n    console.error('Error fetching product:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n  }\n})\n\nexport { app as productsRouter }\n"
    },
    {
      "target": "routes/dodopayments/subscriptions.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments'\n\nconst app = new Hono()\n\napp.get('/', async (c) => {\n  try {\n    const subscription_id = c.req.query('subscription_id')\n\n    if (!subscription_id || typeof subscription_id !== 'string') {\n      return c.json({ error: 'subscription_id is required' }, 400)\n    }\n\n    const subscription = await getDodoPaymentsClient().subscriptions.retrieve(subscription_id)\n    return c.json(subscription)\n  } catch (error) {\n    console.error('Error fetching subscription:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n  }\n})\n\napp.get('/list', async (c) => {\n  try {\n    const customer_id = c.req.query('customer_id')\n    const limit = c.req.query('limit')\n    const starting_after = c.req.query('starting_after')\n\n    const params: any = {}\n    if (customer_id && typeof customer_id === 'string') {\n      params.customer_id = customer_id\n    }\n    if (limit && typeof limit === 'string') {\n      params.limit = parseInt(limit)\n    }\n    if (starting_after && typeof starting_after === 'string') {\n      params.starting_after = starting_after\n    }\n\n    const subscriptions = await getDodoPaymentsClient().subscriptions.list(params)\n    return c.json(subscriptions)\n  } catch (error) {\n    console.error('Error fetching subscriptions list:', error)\n    return c.json({ error: 'Internal server error' }, 500)\n  }\n})\n\nexport { app as subscriptionsRouter }\n"
    },
    {
      "target": "routes/dodopayments/webhook.ts",
      "type": "template",
      "content": "import { Hono } from 'hono'\nimport { Webhook } from 'standardwebhooks'\nimport { getDodoPaymentsClient } from '../../lib/dodopayments'\n\nconst app = new Hono()\n\nconst webhook = new Webhook(process.env.DODO_PAYMENTS_WEBHOOK_KEY!)\n\napp.post('/', async (c) => {\n  try {\n    const rawBody = await c.req.raw.clone().arrayBuffer()\n    const bodyText = new TextDecoder().decode(rawBody)\n    \n    const webhookHeaders = {\n      'webhook-id': c.req.header('webhook-id') || '',\n      'webhook-signature': c.req.header('webhook-signature') || '',\n      'webhook-timestamp': c.req.header('webhook-timestamp') || '',\n    }\n\n    await webhook.verify(bodyText, webhookHeaders)\n    const payload = JSON.parse(bodyText)\n\n    if (payload.data.payload_type === \"Subscription\") {\n      switch (payload.type) {\n        case \"subscription.active\":\n          const subscription = await getDodoPaymentsClient().subscriptions.retrieve(payload.data.subscription_id)\n          console.log(\"-------SUBSCRIPTION DATA START ---------\")\n          console.log(subscription)\n          console.log(\"-------SUBSCRIPTION DATA END ---------\")\n          break\n        case \"subscription.failed\":\n          console.log(\"Subscription failed:\", payload.data.subscription_id)\n          break\n        case \"subscription.cancelled\":\n          console.log(\"Subscription cancelled:\", payload.data.subscription_id)\n          break\n        case \"subscription.renewed\":\n          console.log(\"Subscription renewed:\", payload.data.subscription_id)\n          break\n        case \"subscription.on_hold\":\n          console.log(\"Subscription on hold:\", payload.data.subscription_id)\n          break\n        default:\n          console.log(\"Unknown subscription event:\", payload.type)\n          break\n      }\n    } else if (payload.data.payload_type === \"Payment\") {\n      switch (payload.type) {\n        case \"payment.succeeded\":\n          const paymentDataResp = await getDodoPaymentsClient().payments.retrieve(payload.data.payment_id)\n          console.log(\"-------PAYMENT DATA START ---------\")\n          console.log(paymentDataResp)\n          console.log(\"-------PAYMENT DATA END ---------\")\n          break\n        case \"payment.failed\":\n          console.log(\"Payment failed:\", payload.data.payment_id)\n          break\n        case \"payment.refunded\":\n          console.log(\"Payment refunded:\", payload.data.payment_id)\n          break\n        default:\n          console.log(\"Unknown payment event:\", payload.type)\n          break\n      }\n    }\n\n    return c.json({ message: \"Webhook processed successfully\" }, 200)\n  } catch (error) {\n    console.error(\"Webhook verification failed:\", error)\n    return c.json({ error: \"Webhook verification failed\" }, 400)\n  }\n})\n\nexport { app as webhookRouter }\n"
    },
    {
      "target": ".env.example",
      "type": "template",
      "content": "# DodoPayments Configurations\nDODO_PAYMENTS_API_KEY=your_api_key\nDODO_PAYMENTS_ENVIRONMENT=test_mode\nDODO_PAYMENTS_WEBHOOK_KEY=your_webhook_key_here\n\n# server configurations\nPORT=3000\nBUN_ENV=development\n\nSTRIPE_SECRET_KEY=sk_test_12345...\nSTRIPE_WEBHOOK_SECRET=whsec_12345\n"
    }
  ],
  "dependencies": [
    "dodopayments",
    "standardwebhooks",
    "zod",
    "hono"
  ]
}